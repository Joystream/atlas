scalar DateTime

type Language {
  name: String!
}

type Membership {
  id: ID!

  handle: String!

  avatarUri: String

  controllerAccount: String!

  channels: [Channel!]!
}

enum AssetAvailability {
  ACCEPTED
  PENDING
  INVALID
}

enum LiaisonJudgement {
  PENDING
  ACCEPTED
  REJECTED
}

type DataObject {
  id: ID!
  createdAt: DateTime!
  size: Int!
  # id of storage provider
  liaisonId: Int!
  # Storage provider as liaison judgment
  liaisonJudgement: LiaisonJudgement!
  # IPFS content id
  ipfsContentId: String!
  # Joystream runtime content
  joystreamContentId: String!
}

type Block {
  id: ID!
  block: Int!
}

type Channel {
  id: ID!
  createdAt: DateTime!
  title: String!
  description: String
  coverPhotoDataObject: DataObject
  coverPhotoUrl: String
  coverPhotoAvailability: AssetAvailability!
  avatarPhotoDataObject: DataObject
  avatarPhotoUrl: String
  avatarPhotoAvailability: AssetAvailability!
  ownerMember: Membership
  isPublic: Boolean
  isCensored: Boolean
  language: Language
  videos: [Video!]!

  # extended from Orion
  follows: Int
}

type VideoCategory {
  id: ID!
  name: String
  videos: [Video!]
}

type License {
  id: ID!
  code: Int
  url: String
  attribution: String
  videoLicense: [Video!]
  customText: String
}

type VideoMediaMetadata {
  id: ID!

  # Resolution width
  pixelWidth: Int

  # Resolution height
  pixelHeight: Int
  # Size in bytes
  size: Float
}

type Video {
  id: ID!
  channel: Channel!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  category: VideoCategory!
  title: String!
  description: String!
  # In seconds
  duration: Int!
  thumbnailDataObject: DataObject
  thumbnailUrl: String
  thumbnailAvailability: AssetAvailability!
  Language: Language
  hasMarketing: Boolean
  # Possible time when video was published before Joystream
  publishedBeforeJoystream: String
  isPublic: Boolean!
  isCensored: Boolean!
  isExplicit: Boolean!
  mediaDataObject: DataObject
  mediaUrl: String
  mediaAvailability: AssetAvailability!
  mediaMetadata: VideoMediaMetadata!
  license: License!
  isFeatured: Boolean!

  skippableIntroDuration: Int
  # Timestamp of block
  # extended from Orion
  views: Int
}

# Isn't provided by query node yet
type CoverVideo {
  id: ID!
  video: Video!
  coverDescription: String!
  coverCutMediaMetadata: VideoMediaMetadata!
  coverCutmediaDataObject: DataObject
  coverCutmediaUrl: String
  coverCutmediaAvailability: AssetAvailability!
}

type FeaturedVideo {
  id: ID!

  video: Video!
}

union SearchResult = Video | Channel

type SearchFTSOutput {
  item: SearchResult!

  rank: Float!

  isTypeOf: String!

  highlight: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!

  startCursor: String
  endCursor: String
}

input ChannelWhereInput {
  isCurated_eq: Boolean
  isPublic_eq: Boolean
  ownerMemberId_eq: ID
  id_in: [ID!]
}

input ChannelWhereUniqueInput {
  id: ID!
}

enum ChannelOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

type ChannelEdge {
  node: Channel!
  cursor: String!
}

type ChannelConnection {
  edges: [ChannelEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input VideoCategoryWhereUniqueInput {
  id: ID!
}

input VideoWhereInput {
  categoryId_eq: ID
  channelId_in: [ID!]
  channelId_eq: ID
  createdAt_gte: DateTime
  isFeatured_eq: Boolean
  isPublic_eq: Boolean
  id_in: [ID!]
}

input VideoWhereUniqueInput {
  id: ID!
}

input MembershipWhereUniqueInput {
  id: ID
}

input MembershipWhereInput {
  controllerAccount_eq: ID
}

enum VideoOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

type VideoEdge {
  node: Video!
  cursor: String!
}

type VideoConnection {
  edges: [VideoEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

enum FeaturedVideoOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

type Query {
  # Lookup a membership by its ID
  membership(where: MembershipWhereUniqueInput!): Membership

  # Lookup all memberships by account ID
  memberships(where: MembershipWhereInput!): [Membership!]!

  # Lookup a channel by its ID
  channel(where: ChannelWhereUniqueInput!): Channel

  # List all channels by given constraints
  channels(where: ChannelWhereInput): [Channel!]!

  # List all channel by given constraints
  channelsConnection(
    first: Int
    after: String
    where: ChannelWhereInput
    orderBy: ChannelOrderByInput
  ): ChannelConnection!

  # Lookup a channel by its ID
  category(where: VideoCategoryWhereUniqueInput!): VideoCategory

  # List all categories
  categories: [VideoCategory!]!

  # Lookup video by its ID
  video(where: VideoWhereUniqueInput!): Video

  # Lookup videos by where params
  videos(offset: Int, limit: Int, where: VideoWhereInput): [Video!]

  # List all videos by given constraints
  videosConnection(first: Int, after: String, where: VideoWhereInput, orderBy: VideoOrderByInput): VideoConnection!

  # Get the current cover video
  coverVideo: CoverVideo!

  # List all top trending videos
  featuredVideos(orderBy: FeaturedVideoOrderByInput): [FeaturedVideo!]!

  # Free text search across videos and channels
  search(limit: Int, text: String!): [SearchFTSOutput!]!
}
