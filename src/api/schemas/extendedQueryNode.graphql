scalar Date

enum Language {
  Chinese
  English
  Arabic
  Portugese
  French
}

type Member {
  id: ID!
  handle: String!
}

type Channel {
  id: ID!

  createdAt: Date!

  handle: String!

  description: String!

  coverPhotoUrl: String

  avatarPhotoUrl: String

  owner: Member!

  isPublic: Boolean!

  isCurated: Boolean!

  language: Language

  videos: [Video!]!
}

type Category {
  id: ID!

  name: String!

  videos: [Video!]
}

type JoystreamMediaLocation {
  dataObjectId: String!
}

type HttpMediaLocation {
  url: String!
}

# In the future we can add IPFS, Dat, etc.
union MediaLocation = JoystreamMediaLocation | HttpMediaLocation

# Mixed both encoding and containers, only having popular combos, may need to be changed later.
enum VideoMediaEncoding {
  H264_mpeg4
  VP8_WEBM
  Theroa_Vorbis
}

# Apparently there are lots of different Creative Commons licenses,
# read about all here https://creativecommons.org/licenses/,
# I haven't had the time.
enum CreativeCommonsVersion {
  CC_BY
  CC_BY_SA
  CC_BY_ND
  CC_BY_NC
  CC_BY_NC_SA
  CC_BY_NC_ND
}

type CreativeCommonsLicense {
  version: CreativeCommonsVersion
}

type UserDefinedLicense {
  text: String!
}

union License = UserDefinedLicense | CreativeCommonsLicense

type VideoMedia {
  id: ID!

  encoding: VideoMediaEncoding!

  # Resolution width
  pixelWidth: Int!

  # Resolution height
  pixelHeight: Int!

  # Size in bytes
  size: Float

  # where to find
  location: MediaLocation!
}

type Video {
  id: ID!

  channel: Channel!

  category: Category!

  title: String!

  description: String!

  views: Int

  # In seconds
  duration: Int!

  # In intro
  skippableIntroDuration: Int

  thumbnailUrl: String!
  Language: Language

  media: VideoMedia!

  hasMarketing: Boolean

  # Timestamp of block
  createdAt: Date!
  createdAtBlockHeight: Float!

  # Possible time when video was published before Joystream
  publishedBeforeJoystream: String

  isPublic: Boolean!

  isCurated: Boolean!

  isExplicit: Boolean!

  license: License!
}

union SearchResult = Video | Channel

type SearchFTSOutput {
  item: SearchResult!

  rank: Float!

  isTypeOf: String!

  highlight: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!

  startCursor: String
  endCursor: String
}

input ChannelWhereInput {
  isCurated_eq: Boolean
  isPublic_eq: Boolean
}

input ChannelWhereUniqueInput {
  id: ID!
}

enum ChannelOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

type ChannelEdge {
  node: Channel!
  cursor: String!
}

type ChannelConnection {
  edges: [ChannelEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input CategoryWhereUniqueInput {
  id: ID!
}

input VideoWhereInput {
  categoryId_eq: ID
  channelId_eq: ID
  isCurated_eq: Boolean
  isPublic_eq: Boolean
}

input VideoWhereUniqueInput {
  id: ID!
}

enum VideoOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

type VideoEdge {
  node: Video!
  cursor: String!
}

type VideoConnection {
  edges: [VideoEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type VideoViewsInfo {
  id: ID!
  views: Int!
}

type Query {
  # Lookup a channel by its ID
  channel(where: ChannelWhereUniqueInput!): Channel

  # List all channel by given constraints
  channelsConnection(
    first: Int
    after: String
    where: ChannelWhereInput
    orderBy: ChannelOrderByInput
  ): ChannelConnection!

  # Lookup a channel by its ID
  category(where: CategoryWhereUniqueInput!): Category

  # List all categories
  categories: [Category!]!

  # Lookup video by its ID
  video(where: VideoWhereUniqueInput!): Video

  # List all videos by given constraints
  videosConnection(first: Int, after: String, where: VideoWhereInput, orderBy: VideoOrderByInput): VideoConnection!

  # List all top trending videos
  featured_videos: [Video!]!

  # Free text search across videos and channels
  search(limit: Int, text: String!): [SearchFTSOutput!]!
}

type Mutation {
  addVideoView(videoID: ID!): VideoViewsInfo!
}
