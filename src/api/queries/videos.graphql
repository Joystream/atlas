fragment VideoMediaFields on VideoMedia {
  id
  pixelHeight
  pixelWidth
  location {
    ... on HttpMediaLocation {
      url
    }
    ... on JoystreamMediaLocation {
      dataObjectId
    }
  }
}

fragment LicenseFields on LicenseEntity {
  id
  attribution
  type {
    ... on KnownLicense {
      code
      url
    }
    ... on UserDefinedLicense {
      content
    }
  }
}

fragment VideoFields on Video {
  id
  title
  description
  category {
    id
  }
  views
  duration
  thumbnailUrl
  createdAt
  media {
    ...VideoMediaFields
  }
  channel {
    ...BasicChannelFields
  }
  license {
    ...LicenseFields
  }
}

query GetVideo($where: VideoWhereUniqueInput!) {
  video(where: $where) {
    ...VideoFields
  }
}

query GetVideosConnection(
  $first: Int
  $after: String
  $orderBy: VideoOrderByInput = createdAt_DESC
  $where: VideoWhereInput
) {
  videosConnection(first: $first, after: $after, where: $where, orderBy: $orderBy) {
    edges {
      cursor
      node {
        ...VideoFields
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
    totalCount
  }
}

query GetVideos($where: VideoWhereInput) {
  videos(where: $where) {
    ...VideoFields
  }
}

query GetFeaturedVideos {
  featuredVideos(orderBy: createdAt_DESC) {
    video {
      ...VideoFields
    }
  }
}

query GetCoverVideo {
  coverVideo {
    video {
      ...VideoFields
    }
    coverDescription
    coverCutMedia {
      ...VideoMediaFields
    }
  }
}

### Orion

# modyfying this query name will need a sync-up in `src/api/client/resolvers.ts`
query GetVideoViews($videoId: ID!) {
  videoViews(videoId: $videoId) {
    id
    views
  }
}

mutation AddVideoView($videoId: ID!, $channelId: ID!) {
  addVideoView(videoId: $videoId, channelId: $channelId) {
    id
    views
  }
}
