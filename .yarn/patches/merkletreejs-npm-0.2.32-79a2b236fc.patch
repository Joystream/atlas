diff --git a/dist/MerkleMountainRange.js b/dist/MerkleMountainRange.js
index 4a6837cf6fd7810b267bb87a63892f6abb10cd96..739617befc9a44ced38bde04542bab8b6deb956f 100644
--- a/dist/MerkleMountainRange.js
+++ b/dist/MerkleMountainRange.js
@@ -5,14 +5,23 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.MerkleMountainRange = void 0;
 const buffer_1 = require("buffer");
-const sha256_1 = __importDefault(require("crypto-js/sha256"));
+// const sha256_1 = __importDefault(require("crypto-js/sha256"));
+const { sha256 } = require('@noble/hashes/sha256');
+
+function overrideSha256(data) {
+    return sha256
+      .create()
+      .update(data)
+      .digest();
+}
+
 const Base_1 = __importDefault(require("./Base"));
 // @credit: https://github.com/wanseob/solidity-mmr
 /**
  * @desc The index of this MMR implementation starts from 1 not 0.
  */
 class MerkleMountainRange extends Base_1.default {
-    constructor(hashFn = sha256_1.default, leaves = [], hashLeafFn, peakBaggingFn, hashBranchFn) {
+    constructor(hashFn = overrideSha256, leaves = [], hashLeafFn, peakBaggingFn, hashBranchFn) {
         super();
         this.root = buffer_1.Buffer.alloc(0);
         this.size = 0;
diff --git a/dist/MerkleTree.js b/dist/MerkleTree.js
index 7d1eff304f0b518e1b476fe3badcd85cc5100510..2f7bf244120904d70ff3eb6f1736a747b0e7d87d 100644
--- a/dist/MerkleTree.js
+++ b/dist/MerkleTree.js
@@ -6,9 +6,18 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.MerkleTree = void 0;
 const buffer_1 = require("buffer");
 const buffer_reverse_1 = __importDefault(require("buffer-reverse"));
-const sha256_1 = __importDefault(require("crypto-js/sha256"));
+// const sha256_1 = __importDefault(require("crypto-js/sha256"));
+const { sha256 } = require('@noble/hashes/sha256');
 const treeify_1 = __importDefault(require("treeify"));
 const Base_1 = __importDefault(require("./Base"));
+
+function overrideSha256(data) {
+    return sha256
+      .create()
+      .update(data)
+      .digest();
+}
+
 /**
  * Class reprensenting a Merkle Tree
  * @namespace MerkleTree
@@ -36,7 +45,7 @@ class MerkleTree extends Base_1.default {
      *const tree = new MerkleTree(leaves, sha256)
      *```
      */
-    constructor(leaves, hashFn = sha256_1.default, options = {}) {
+    constructor(leaves, hashFn = overrideSha256, options = {}) {
         super();
         this.duplicateOdd = false;
         this.hashLeaves = false;
@@ -1017,7 +1026,7 @@ class MerkleTree extends Base_1.default {
      *const verified = MerkleTree.verify(proof, leaf, root, sha256, options)
      *```
      */
-    static verify(proof, targetNode, root, hashFn = sha256_1.default, options = {}) {
+    static verify(proof, targetNode, root, hashFn = overrideSha256, options = {}) {
         const tree = new MerkleTree([], hashFn, options);
         return tree.verify(proof, targetNode, root);
     }
