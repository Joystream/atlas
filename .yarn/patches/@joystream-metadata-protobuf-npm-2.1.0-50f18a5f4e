diff --git a/compiled/index.d.ts b/compiled/index.d.ts
index 2a0afa724ed1dc315a7da94bef95462ddddab0b7..17c0792993e3a8e5c4ec355aed03e63d80fb2207 100644
--- a/compiled/index.d.ts
+++ b/compiled/index.d.ts
@@ -924,6 +924,1233 @@ export class MembershipMetadata implements IMembershipMetadata {
     public toJSON(): { [k: string]: any };
 }
 
+/** Properties of a ReactVideo. */
+export interface IReactVideo {
+
+    /** ReactVideo videoId */
+    videoId: Long;
+
+    /** ReactVideo reaction */
+    reaction: ReactVideo.Reaction;
+}
+
+/** Represents a ReactVideo. */
+export class ReactVideo implements IReactVideo {
+
+    /**
+     * Constructs a new ReactVideo.
+     * @param [properties] Properties to set
+     */
+    constructor(properties?: IReactVideo);
+
+    /** ReactVideo videoId. */
+    public videoId: Long;
+
+    /** ReactVideo reaction. */
+    public reaction: ReactVideo.Reaction;
+
+    /**
+     * Creates a new ReactVideo instance using the specified properties.
+     * @param [properties] Properties to set
+     * @returns ReactVideo instance
+     */
+    public static create(properties?: IReactVideo): ReactVideo;
+
+    /**
+     * Encodes the specified ReactVideo message. Does not implicitly {@link ReactVideo.verify|verify} messages.
+     * @param message ReactVideo message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encode(message: IReactVideo, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Encodes the specified ReactVideo message, length delimited. Does not implicitly {@link ReactVideo.verify|verify} messages.
+     * @param message ReactVideo message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encodeDelimited(message: IReactVideo, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Decodes a ReactVideo message from the specified reader or buffer.
+     * @param reader Reader or buffer to decode from
+     * @param [length] Message length if known beforehand
+     * @returns ReactVideo
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ReactVideo;
+
+    /**
+     * Decodes a ReactVideo message from the specified reader or buffer, length delimited.
+     * @param reader Reader or buffer to decode from
+     * @returns ReactVideo
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ReactVideo;
+
+    /**
+     * Verifies a ReactVideo message.
+     * @param message Plain object to verify
+     * @returns `null` if valid, otherwise the reason why it is not
+     */
+    public static verify(message: { [k: string]: any }): (string|null);
+
+    /**
+     * Creates a ReactVideo message from a plain object. Also converts values to their respective internal types.
+     * @param object Plain object
+     * @returns ReactVideo
+     */
+    public static fromObject(object: { [k: string]: any }): ReactVideo;
+
+    /**
+     * Creates a plain object from a ReactVideo message. Also converts values to other types if specified.
+     * @param message ReactVideo
+     * @param [options] Conversion options
+     * @returns Plain object
+     */
+    public static toObject(message: ReactVideo, options?: $protobuf.IConversionOptions): { [k: string]: any };
+
+    /**
+     * Converts this ReactVideo to JSON.
+     * @returns JSON object
+     */
+    public toJSON(): { [k: string]: any };
+}
+
+export namespace ReactVideo {
+
+    /** Reaction enum. */
+    enum Reaction {
+        LIKE = 0,
+        UNLIKE = 1
+    }
+}
+
+/** Properties of a ReactComment. */
+export interface IReactComment {
+
+    /** ReactComment commentId */
+    commentId: string;
+
+    /** ReactComment reactionId */
+    reactionId: number;
+}
+
+/** Represents a ReactComment. */
+export class ReactComment implements IReactComment {
+
+    /**
+     * Constructs a new ReactComment.
+     * @param [properties] Properties to set
+     */
+    constructor(properties?: IReactComment);
+
+    /** ReactComment commentId. */
+    public commentId: string;
+
+    /** ReactComment reactionId. */
+    public reactionId: number;
+
+    /**
+     * Creates a new ReactComment instance using the specified properties.
+     * @param [properties] Properties to set
+     * @returns ReactComment instance
+     */
+    public static create(properties?: IReactComment): ReactComment;
+
+    /**
+     * Encodes the specified ReactComment message. Does not implicitly {@link ReactComment.verify|verify} messages.
+     * @param message ReactComment message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encode(message: IReactComment, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Encodes the specified ReactComment message, length delimited. Does not implicitly {@link ReactComment.verify|verify} messages.
+     * @param message ReactComment message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encodeDelimited(message: IReactComment, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Decodes a ReactComment message from the specified reader or buffer.
+     * @param reader Reader or buffer to decode from
+     * @param [length] Message length if known beforehand
+     * @returns ReactComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ReactComment;
+
+    /**
+     * Decodes a ReactComment message from the specified reader or buffer, length delimited.
+     * @param reader Reader or buffer to decode from
+     * @returns ReactComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ReactComment;
+
+    /**
+     * Verifies a ReactComment message.
+     * @param message Plain object to verify
+     * @returns `null` if valid, otherwise the reason why it is not
+     */
+    public static verify(message: { [k: string]: any }): (string|null);
+
+    /**
+     * Creates a ReactComment message from a plain object. Also converts values to their respective internal types.
+     * @param object Plain object
+     * @returns ReactComment
+     */
+    public static fromObject(object: { [k: string]: any }): ReactComment;
+
+    /**
+     * Creates a plain object from a ReactComment message. Also converts values to other types if specified.
+     * @param message ReactComment
+     * @param [options] Conversion options
+     * @returns Plain object
+     */
+    public static toObject(message: ReactComment, options?: $protobuf.IConversionOptions): { [k: string]: any };
+
+    /**
+     * Converts this ReactComment to JSON.
+     * @returns JSON object
+     */
+    public toJSON(): { [k: string]: any };
+}
+
+/** Properties of a CreateComment. */
+export interface ICreateComment {
+
+    /** CreateComment videoId */
+    videoId: Long;
+
+    /** CreateComment parentCommentId */
+    parentCommentId?: (string|null);
+
+    /** CreateComment body */
+    body: string;
+}
+
+/** Represents a CreateComment. */
+export class CreateComment implements ICreateComment {
+
+    /**
+     * Constructs a new CreateComment.
+     * @param [properties] Properties to set
+     */
+    constructor(properties?: ICreateComment);
+
+    /** CreateComment videoId. */
+    public videoId: Long;
+
+    /** CreateComment parentCommentId. */
+    public parentCommentId: string;
+
+    /** CreateComment body. */
+    public body: string;
+
+    /**
+     * Creates a new CreateComment instance using the specified properties.
+     * @param [properties] Properties to set
+     * @returns CreateComment instance
+     */
+    public static create(properties?: ICreateComment): CreateComment;
+
+    /**
+     * Encodes the specified CreateComment message. Does not implicitly {@link CreateComment.verify|verify} messages.
+     * @param message CreateComment message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encode(message: ICreateComment, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Encodes the specified CreateComment message, length delimited. Does not implicitly {@link CreateComment.verify|verify} messages.
+     * @param message CreateComment message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encodeDelimited(message: ICreateComment, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Decodes a CreateComment message from the specified reader or buffer.
+     * @param reader Reader or buffer to decode from
+     * @param [length] Message length if known beforehand
+     * @returns CreateComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): CreateComment;
+
+    /**
+     * Decodes a CreateComment message from the specified reader or buffer, length delimited.
+     * @param reader Reader or buffer to decode from
+     * @returns CreateComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): CreateComment;
+
+    /**
+     * Verifies a CreateComment message.
+     * @param message Plain object to verify
+     * @returns `null` if valid, otherwise the reason why it is not
+     */
+    public static verify(message: { [k: string]: any }): (string|null);
+
+    /**
+     * Creates a CreateComment message from a plain object. Also converts values to their respective internal types.
+     * @param object Plain object
+     * @returns CreateComment
+     */
+    public static fromObject(object: { [k: string]: any }): CreateComment;
+
+    /**
+     * Creates a plain object from a CreateComment message. Also converts values to other types if specified.
+     * @param message CreateComment
+     * @param [options] Conversion options
+     * @returns Plain object
+     */
+    public static toObject(message: CreateComment, options?: $protobuf.IConversionOptions): { [k: string]: any };
+
+    /**
+     * Converts this CreateComment to JSON.
+     * @returns JSON object
+     */
+    public toJSON(): { [k: string]: any };
+}
+
+/** Properties of an EditComment. */
+export interface IEditComment {
+
+    /** EditComment commentId */
+    commentId: string;
+
+    /** EditComment newBody */
+    newBody: string;
+}
+
+/** Represents an EditComment. */
+export class EditComment implements IEditComment {
+
+    /**
+     * Constructs a new EditComment.
+     * @param [properties] Properties to set
+     */
+    constructor(properties?: IEditComment);
+
+    /** EditComment commentId. */
+    public commentId: string;
+
+    /** EditComment newBody. */
+    public newBody: string;
+
+    /**
+     * Creates a new EditComment instance using the specified properties.
+     * @param [properties] Properties to set
+     * @returns EditComment instance
+     */
+    public static create(properties?: IEditComment): EditComment;
+
+    /**
+     * Encodes the specified EditComment message. Does not implicitly {@link EditComment.verify|verify} messages.
+     * @param message EditComment message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encode(message: IEditComment, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Encodes the specified EditComment message, length delimited. Does not implicitly {@link EditComment.verify|verify} messages.
+     * @param message EditComment message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encodeDelimited(message: IEditComment, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Decodes an EditComment message from the specified reader or buffer.
+     * @param reader Reader or buffer to decode from
+     * @param [length] Message length if known beforehand
+     * @returns EditComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): EditComment;
+
+    /**
+     * Decodes an EditComment message from the specified reader or buffer, length delimited.
+     * @param reader Reader or buffer to decode from
+     * @returns EditComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): EditComment;
+
+    /**
+     * Verifies an EditComment message.
+     * @param message Plain object to verify
+     * @returns `null` if valid, otherwise the reason why it is not
+     */
+    public static verify(message: { [k: string]: any }): (string|null);
+
+    /**
+     * Creates an EditComment message from a plain object. Also converts values to their respective internal types.
+     * @param object Plain object
+     * @returns EditComment
+     */
+    public static fromObject(object: { [k: string]: any }): EditComment;
+
+    /**
+     * Creates a plain object from an EditComment message. Also converts values to other types if specified.
+     * @param message EditComment
+     * @param [options] Conversion options
+     * @returns Plain object
+     */
+    public static toObject(message: EditComment, options?: $protobuf.IConversionOptions): { [k: string]: any };
+
+    /**
+     * Converts this EditComment to JSON.
+     * @returns JSON object
+     */
+    public toJSON(): { [k: string]: any };
+}
+
+/** Properties of a DeleteComment. */
+export interface IDeleteComment {
+
+    /** DeleteComment commentId */
+    commentId: string;
+}
+
+/** Represents a DeleteComment. */
+export class DeleteComment implements IDeleteComment {
+
+    /**
+     * Constructs a new DeleteComment.
+     * @param [properties] Properties to set
+     */
+    constructor(properties?: IDeleteComment);
+
+    /** DeleteComment commentId. */
+    public commentId: string;
+
+    /**
+     * Creates a new DeleteComment instance using the specified properties.
+     * @param [properties] Properties to set
+     * @returns DeleteComment instance
+     */
+    public static create(properties?: IDeleteComment): DeleteComment;
+
+    /**
+     * Encodes the specified DeleteComment message. Does not implicitly {@link DeleteComment.verify|verify} messages.
+     * @param message DeleteComment message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encode(message: IDeleteComment, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Encodes the specified DeleteComment message, length delimited. Does not implicitly {@link DeleteComment.verify|verify} messages.
+     * @param message DeleteComment message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encodeDelimited(message: IDeleteComment, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Decodes a DeleteComment message from the specified reader or buffer.
+     * @param reader Reader or buffer to decode from
+     * @param [length] Message length if known beforehand
+     * @returns DeleteComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): DeleteComment;
+
+    /**
+     * Decodes a DeleteComment message from the specified reader or buffer, length delimited.
+     * @param reader Reader or buffer to decode from
+     * @returns DeleteComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): DeleteComment;
+
+    /**
+     * Verifies a DeleteComment message.
+     * @param message Plain object to verify
+     * @returns `null` if valid, otherwise the reason why it is not
+     */
+    public static verify(message: { [k: string]: any }): (string|null);
+
+    /**
+     * Creates a DeleteComment message from a plain object. Also converts values to their respective internal types.
+     * @param object Plain object
+     * @returns DeleteComment
+     */
+    public static fromObject(object: { [k: string]: any }): DeleteComment;
+
+    /**
+     * Creates a plain object from a DeleteComment message. Also converts values to other types if specified.
+     * @param message DeleteComment
+     * @param [options] Conversion options
+     * @returns Plain object
+     */
+    public static toObject(message: DeleteComment, options?: $protobuf.IConversionOptions): { [k: string]: any };
+
+    /**
+     * Converts this DeleteComment to JSON.
+     * @returns JSON object
+     */
+    public toJSON(): { [k: string]: any };
+}
+
+/** Properties of a PinOrUnpinComment. */
+export interface IPinOrUnpinComment {
+
+    /** PinOrUnpinComment videoId */
+    videoId: Long;
+
+    /** PinOrUnpinComment commentId */
+    commentId: string;
+
+    /** PinOrUnpinComment option */
+    option: PinOrUnpinComment.Option;
+}
+
+/** Represents a PinOrUnpinComment. */
+export class PinOrUnpinComment implements IPinOrUnpinComment {
+
+    /**
+     * Constructs a new PinOrUnpinComment.
+     * @param [properties] Properties to set
+     */
+    constructor(properties?: IPinOrUnpinComment);
+
+    /** PinOrUnpinComment videoId. */
+    public videoId: Long;
+
+    /** PinOrUnpinComment commentId. */
+    public commentId: string;
+
+    /** PinOrUnpinComment option. */
+    public option: PinOrUnpinComment.Option;
+
+    /**
+     * Creates a new PinOrUnpinComment instance using the specified properties.
+     * @param [properties] Properties to set
+     * @returns PinOrUnpinComment instance
+     */
+    public static create(properties?: IPinOrUnpinComment): PinOrUnpinComment;
+
+    /**
+     * Encodes the specified PinOrUnpinComment message. Does not implicitly {@link PinOrUnpinComment.verify|verify} messages.
+     * @param message PinOrUnpinComment message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encode(message: IPinOrUnpinComment, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Encodes the specified PinOrUnpinComment message, length delimited. Does not implicitly {@link PinOrUnpinComment.verify|verify} messages.
+     * @param message PinOrUnpinComment message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encodeDelimited(message: IPinOrUnpinComment, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Decodes a PinOrUnpinComment message from the specified reader or buffer.
+     * @param reader Reader or buffer to decode from
+     * @param [length] Message length if known beforehand
+     * @returns PinOrUnpinComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): PinOrUnpinComment;
+
+    /**
+     * Decodes a PinOrUnpinComment message from the specified reader or buffer, length delimited.
+     * @param reader Reader or buffer to decode from
+     * @returns PinOrUnpinComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): PinOrUnpinComment;
+
+    /**
+     * Verifies a PinOrUnpinComment message.
+     * @param message Plain object to verify
+     * @returns `null` if valid, otherwise the reason why it is not
+     */
+    public static verify(message: { [k: string]: any }): (string|null);
+
+    /**
+     * Creates a PinOrUnpinComment message from a plain object. Also converts values to their respective internal types.
+     * @param object Plain object
+     * @returns PinOrUnpinComment
+     */
+    public static fromObject(object: { [k: string]: any }): PinOrUnpinComment;
+
+    /**
+     * Creates a plain object from a PinOrUnpinComment message. Also converts values to other types if specified.
+     * @param message PinOrUnpinComment
+     * @param [options] Conversion options
+     * @returns Plain object
+     */
+    public static toObject(message: PinOrUnpinComment, options?: $protobuf.IConversionOptions): { [k: string]: any };
+
+    /**
+     * Converts this PinOrUnpinComment to JSON.
+     * @returns JSON object
+     */
+    public toJSON(): { [k: string]: any };
+}
+
+export namespace PinOrUnpinComment {
+
+    /** Option enum. */
+    enum Option {
+        PIN = 0,
+        UNPIN = 1
+    }
+}
+
+/** Properties of a ModerateComment. */
+export interface IModerateComment {
+
+    /** ModerateComment commentId */
+    commentId: string;
+
+    /** ModerateComment rationale */
+    rationale: string;
+}
+
+/** Represents a ModerateComment. */
+export class ModerateComment implements IModerateComment {
+
+    /**
+     * Constructs a new ModerateComment.
+     * @param [properties] Properties to set
+     */
+    constructor(properties?: IModerateComment);
+
+    /** ModerateComment commentId. */
+    public commentId: string;
+
+    /** ModerateComment rationale. */
+    public rationale: string;
+
+    /**
+     * Creates a new ModerateComment instance using the specified properties.
+     * @param [properties] Properties to set
+     * @returns ModerateComment instance
+     */
+    public static create(properties?: IModerateComment): ModerateComment;
+
+    /**
+     * Encodes the specified ModerateComment message. Does not implicitly {@link ModerateComment.verify|verify} messages.
+     * @param message ModerateComment message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encode(message: IModerateComment, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Encodes the specified ModerateComment message, length delimited. Does not implicitly {@link ModerateComment.verify|verify} messages.
+     * @param message ModerateComment message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encodeDelimited(message: IModerateComment, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Decodes a ModerateComment message from the specified reader or buffer.
+     * @param reader Reader or buffer to decode from
+     * @param [length] Message length if known beforehand
+     * @returns ModerateComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ModerateComment;
+
+    /**
+     * Decodes a ModerateComment message from the specified reader or buffer, length delimited.
+     * @param reader Reader or buffer to decode from
+     * @returns ModerateComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ModerateComment;
+
+    /**
+     * Verifies a ModerateComment message.
+     * @param message Plain object to verify
+     * @returns `null` if valid, otherwise the reason why it is not
+     */
+    public static verify(message: { [k: string]: any }): (string|null);
+
+    /**
+     * Creates a ModerateComment message from a plain object. Also converts values to their respective internal types.
+     * @param object Plain object
+     * @returns ModerateComment
+     */
+    public static fromObject(object: { [k: string]: any }): ModerateComment;
+
+    /**
+     * Creates a plain object from a ModerateComment message. Also converts values to other types if specified.
+     * @param message ModerateComment
+     * @param [options] Conversion options
+     * @returns Plain object
+     */
+    public static toObject(message: ModerateComment, options?: $protobuf.IConversionOptions): { [k: string]: any };
+
+    /**
+     * Converts this ModerateComment to JSON.
+     * @returns JSON object
+     */
+    public toJSON(): { [k: string]: any };
+}
+
+/** Properties of a BanOrUnbanMemberFromChannel. */
+export interface IBanOrUnbanMemberFromChannel {
+
+    /** BanOrUnbanMemberFromChannel memberId */
+    memberId: Long;
+
+    /** BanOrUnbanMemberFromChannel option */
+    option: BanOrUnbanMemberFromChannel.Option;
+}
+
+/** Represents a BanOrUnbanMemberFromChannel. */
+export class BanOrUnbanMemberFromChannel implements IBanOrUnbanMemberFromChannel {
+
+    /**
+     * Constructs a new BanOrUnbanMemberFromChannel.
+     * @param [properties] Properties to set
+     */
+    constructor(properties?: IBanOrUnbanMemberFromChannel);
+
+    /** BanOrUnbanMemberFromChannel memberId. */
+    public memberId: Long;
+
+    /** BanOrUnbanMemberFromChannel option. */
+    public option: BanOrUnbanMemberFromChannel.Option;
+
+    /**
+     * Creates a new BanOrUnbanMemberFromChannel instance using the specified properties.
+     * @param [properties] Properties to set
+     * @returns BanOrUnbanMemberFromChannel instance
+     */
+    public static create(properties?: IBanOrUnbanMemberFromChannel): BanOrUnbanMemberFromChannel;
+
+    /**
+     * Encodes the specified BanOrUnbanMemberFromChannel message. Does not implicitly {@link BanOrUnbanMemberFromChannel.verify|verify} messages.
+     * @param message BanOrUnbanMemberFromChannel message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encode(message: IBanOrUnbanMemberFromChannel, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Encodes the specified BanOrUnbanMemberFromChannel message, length delimited. Does not implicitly {@link BanOrUnbanMemberFromChannel.verify|verify} messages.
+     * @param message BanOrUnbanMemberFromChannel message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encodeDelimited(message: IBanOrUnbanMemberFromChannel, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Decodes a BanOrUnbanMemberFromChannel message from the specified reader or buffer.
+     * @param reader Reader or buffer to decode from
+     * @param [length] Message length if known beforehand
+     * @returns BanOrUnbanMemberFromChannel
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): BanOrUnbanMemberFromChannel;
+
+    /**
+     * Decodes a BanOrUnbanMemberFromChannel message from the specified reader or buffer, length delimited.
+     * @param reader Reader or buffer to decode from
+     * @returns BanOrUnbanMemberFromChannel
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): BanOrUnbanMemberFromChannel;
+
+    /**
+     * Verifies a BanOrUnbanMemberFromChannel message.
+     * @param message Plain object to verify
+     * @returns `null` if valid, otherwise the reason why it is not
+     */
+    public static verify(message: { [k: string]: any }): (string|null);
+
+    /**
+     * Creates a BanOrUnbanMemberFromChannel message from a plain object. Also converts values to their respective internal types.
+     * @param object Plain object
+     * @returns BanOrUnbanMemberFromChannel
+     */
+    public static fromObject(object: { [k: string]: any }): BanOrUnbanMemberFromChannel;
+
+    /**
+     * Creates a plain object from a BanOrUnbanMemberFromChannel message. Also converts values to other types if specified.
+     * @param message BanOrUnbanMemberFromChannel
+     * @param [options] Conversion options
+     * @returns Plain object
+     */
+    public static toObject(message: BanOrUnbanMemberFromChannel, options?: $protobuf.IConversionOptions): { [k: string]: any };
+
+    /**
+     * Converts this BanOrUnbanMemberFromChannel to JSON.
+     * @returns JSON object
+     */
+    public toJSON(): { [k: string]: any };
+}
+
+export namespace BanOrUnbanMemberFromChannel {
+
+    /** Option enum. */
+    enum Option {
+        BAN = 0,
+        UNBAN = 1
+    }
+}
+
+/** Properties of a VideoReactionsPreference. */
+export interface IVideoReactionsPreference {
+
+    /** VideoReactionsPreference videoId */
+    videoId: Long;
+
+    /** VideoReactionsPreference option */
+    option: VideoReactionsPreference.Option;
+}
+
+/** Represents a VideoReactionsPreference. */
+export class VideoReactionsPreference implements IVideoReactionsPreference {
+
+    /**
+     * Constructs a new VideoReactionsPreference.
+     * @param [properties] Properties to set
+     */
+    constructor(properties?: IVideoReactionsPreference);
+
+    /** VideoReactionsPreference videoId. */
+    public videoId: Long;
+
+    /** VideoReactionsPreference option. */
+    public option: VideoReactionsPreference.Option;
+
+    /**
+     * Creates a new VideoReactionsPreference instance using the specified properties.
+     * @param [properties] Properties to set
+     * @returns VideoReactionsPreference instance
+     */
+    public static create(properties?: IVideoReactionsPreference): VideoReactionsPreference;
+
+    /**
+     * Encodes the specified VideoReactionsPreference message. Does not implicitly {@link VideoReactionsPreference.verify|verify} messages.
+     * @param message VideoReactionsPreference message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encode(message: IVideoReactionsPreference, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Encodes the specified VideoReactionsPreference message, length delimited. Does not implicitly {@link VideoReactionsPreference.verify|verify} messages.
+     * @param message VideoReactionsPreference message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encodeDelimited(message: IVideoReactionsPreference, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Decodes a VideoReactionsPreference message from the specified reader or buffer.
+     * @param reader Reader or buffer to decode from
+     * @param [length] Message length if known beforehand
+     * @returns VideoReactionsPreference
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): VideoReactionsPreference;
+
+    /**
+     * Decodes a VideoReactionsPreference message from the specified reader or buffer, length delimited.
+     * @param reader Reader or buffer to decode from
+     * @returns VideoReactionsPreference
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): VideoReactionsPreference;
+
+    /**
+     * Verifies a VideoReactionsPreference message.
+     * @param message Plain object to verify
+     * @returns `null` if valid, otherwise the reason why it is not
+     */
+    public static verify(message: { [k: string]: any }): (string|null);
+
+    /**
+     * Creates a VideoReactionsPreference message from a plain object. Also converts values to their respective internal types.
+     * @param object Plain object
+     * @returns VideoReactionsPreference
+     */
+    public static fromObject(object: { [k: string]: any }): VideoReactionsPreference;
+
+    /**
+     * Creates a plain object from a VideoReactionsPreference message. Also converts values to other types if specified.
+     * @param message VideoReactionsPreference
+     * @param [options] Conversion options
+     * @returns Plain object
+     */
+    public static toObject(message: VideoReactionsPreference, options?: $protobuf.IConversionOptions): { [k: string]: any };
+
+    /**
+     * Converts this VideoReactionsPreference to JSON.
+     * @returns JSON object
+     */
+    public toJSON(): { [k: string]: any };
+}
+
+export namespace VideoReactionsPreference {
+
+    /** Option enum. */
+    enum Option {
+        ENABLE = 0,
+        DISABLE = 1
+    }
+}
+
+/** Properties of a MemberRemarked. */
+export interface IMemberRemarked {
+
+    /** MemberRemarked reactVideo */
+    reactVideo?: (IReactVideo|null);
+
+    /** MemberRemarked reactComment */
+    reactComment?: (IReactComment|null);
+
+    /** MemberRemarked createComment */
+    createComment?: (ICreateComment|null);
+
+    /** MemberRemarked editComment */
+    editComment?: (IEditComment|null);
+
+    /** MemberRemarked deleteComment */
+    deleteComment?: (IDeleteComment|null);
+}
+
+/** Represents a MemberRemarked. */
+export class MemberRemarked implements IMemberRemarked {
+
+    /**
+     * Constructs a new MemberRemarked.
+     * @param [properties] Properties to set
+     */
+    constructor(properties?: IMemberRemarked);
+
+    /** MemberRemarked reactVideo. */
+    public reactVideo?: (IReactVideo|null);
+
+    /** MemberRemarked reactComment. */
+    public reactComment?: (IReactComment|null);
+
+    /** MemberRemarked createComment. */
+    public createComment?: (ICreateComment|null);
+
+    /** MemberRemarked editComment. */
+    public editComment?: (IEditComment|null);
+
+    /** MemberRemarked deleteComment. */
+    public deleteComment?: (IDeleteComment|null);
+
+    /** MemberRemarked memberRemarked. */
+    public memberRemarked?: ("reactVideo"|"reactComment"|"createComment"|"editComment"|"deleteComment");
+
+    /**
+     * Creates a new MemberRemarked instance using the specified properties.
+     * @param [properties] Properties to set
+     * @returns MemberRemarked instance
+     */
+    public static create(properties?: IMemberRemarked): MemberRemarked;
+
+    /**
+     * Encodes the specified MemberRemarked message. Does not implicitly {@link MemberRemarked.verify|verify} messages.
+     * @param message MemberRemarked message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encode(message: IMemberRemarked, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Encodes the specified MemberRemarked message, length delimited. Does not implicitly {@link MemberRemarked.verify|verify} messages.
+     * @param message MemberRemarked message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encodeDelimited(message: IMemberRemarked, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Decodes a MemberRemarked message from the specified reader or buffer.
+     * @param reader Reader or buffer to decode from
+     * @param [length] Message length if known beforehand
+     * @returns MemberRemarked
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): MemberRemarked;
+
+    /**
+     * Decodes a MemberRemarked message from the specified reader or buffer, length delimited.
+     * @param reader Reader or buffer to decode from
+     * @returns MemberRemarked
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): MemberRemarked;
+
+    /**
+     * Verifies a MemberRemarked message.
+     * @param message Plain object to verify
+     * @returns `null` if valid, otherwise the reason why it is not
+     */
+    public static verify(message: { [k: string]: any }): (string|null);
+
+    /**
+     * Creates a MemberRemarked message from a plain object. Also converts values to their respective internal types.
+     * @param object Plain object
+     * @returns MemberRemarked
+     */
+    public static fromObject(object: { [k: string]: any }): MemberRemarked;
+
+    /**
+     * Creates a plain object from a MemberRemarked message. Also converts values to other types if specified.
+     * @param message MemberRemarked
+     * @param [options] Conversion options
+     * @returns Plain object
+     */
+    public static toObject(message: MemberRemarked, options?: $protobuf.IConversionOptions): { [k: string]: any };
+
+    /**
+     * Converts this MemberRemarked to JSON.
+     * @returns JSON object
+     */
+    public toJSON(): { [k: string]: any };
+}
+
+/** Properties of a ChannelModeratorRemarked. */
+export interface IChannelModeratorRemarked {
+
+    /** ChannelModeratorRemarked moderateComment */
+    moderateComment?: (IModerateComment|null);
+}
+
+/** Represents a ChannelModeratorRemarked. */
+export class ChannelModeratorRemarked implements IChannelModeratorRemarked {
+
+    /**
+     * Constructs a new ChannelModeratorRemarked.
+     * @param [properties] Properties to set
+     */
+    constructor(properties?: IChannelModeratorRemarked);
+
+    /** ChannelModeratorRemarked moderateComment. */
+    public moderateComment?: (IModerateComment|null);
+
+    /** ChannelModeratorRemarked channelModeratorRemarked. */
+    public channelModeratorRemarked?: "moderateComment";
+
+    /**
+     * Creates a new ChannelModeratorRemarked instance using the specified properties.
+     * @param [properties] Properties to set
+     * @returns ChannelModeratorRemarked instance
+     */
+    public static create(properties?: IChannelModeratorRemarked): ChannelModeratorRemarked;
+
+    /**
+     * Encodes the specified ChannelModeratorRemarked message. Does not implicitly {@link ChannelModeratorRemarked.verify|verify} messages.
+     * @param message ChannelModeratorRemarked message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encode(message: IChannelModeratorRemarked, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Encodes the specified ChannelModeratorRemarked message, length delimited. Does not implicitly {@link ChannelModeratorRemarked.verify|verify} messages.
+     * @param message ChannelModeratorRemarked message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encodeDelimited(message: IChannelModeratorRemarked, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Decodes a ChannelModeratorRemarked message from the specified reader or buffer.
+     * @param reader Reader or buffer to decode from
+     * @param [length] Message length if known beforehand
+     * @returns ChannelModeratorRemarked
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ChannelModeratorRemarked;
+
+    /**
+     * Decodes a ChannelModeratorRemarked message from the specified reader or buffer, length delimited.
+     * @param reader Reader or buffer to decode from
+     * @returns ChannelModeratorRemarked
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ChannelModeratorRemarked;
+
+    /**
+     * Verifies a ChannelModeratorRemarked message.
+     * @param message Plain object to verify
+     * @returns `null` if valid, otherwise the reason why it is not
+     */
+    public static verify(message: { [k: string]: any }): (string|null);
+
+    /**
+     * Creates a ChannelModeratorRemarked message from a plain object. Also converts values to their respective internal types.
+     * @param object Plain object
+     * @returns ChannelModeratorRemarked
+     */
+    public static fromObject(object: { [k: string]: any }): ChannelModeratorRemarked;
+
+    /**
+     * Creates a plain object from a ChannelModeratorRemarked message. Also converts values to other types if specified.
+     * @param message ChannelModeratorRemarked
+     * @param [options] Conversion options
+     * @returns Plain object
+     */
+    public static toObject(message: ChannelModeratorRemarked, options?: $protobuf.IConversionOptions): { [k: string]: any };
+
+    /**
+     * Converts this ChannelModeratorRemarked to JSON.
+     * @returns JSON object
+     */
+    public toJSON(): { [k: string]: any };
+}
+
+/** Properties of a ChannelOwnerRemarked. */
+export interface IChannelOwnerRemarked {
+
+    /** ChannelOwnerRemarked pinOrUnpinComment */
+    pinOrUnpinComment?: (IPinOrUnpinComment|null);
+
+    /** ChannelOwnerRemarked banOrUnbanMemberFromChannel */
+    banOrUnbanMemberFromChannel?: (IBanOrUnbanMemberFromChannel|null);
+
+    /** ChannelOwnerRemarked videoReactionsPreference */
+    videoReactionsPreference?: (IVideoReactionsPreference|null);
+
+    /** ChannelOwnerRemarked moderateComment */
+    moderateComment?: (IModerateComment|null);
+}
+
+/** Represents a ChannelOwnerRemarked. */
+export class ChannelOwnerRemarked implements IChannelOwnerRemarked {
+
+    /**
+     * Constructs a new ChannelOwnerRemarked.
+     * @param [properties] Properties to set
+     */
+    constructor(properties?: IChannelOwnerRemarked);
+
+    /** ChannelOwnerRemarked pinOrUnpinComment. */
+    public pinOrUnpinComment?: (IPinOrUnpinComment|null);
+
+    /** ChannelOwnerRemarked banOrUnbanMemberFromChannel. */
+    public banOrUnbanMemberFromChannel?: (IBanOrUnbanMemberFromChannel|null);
+
+    /** ChannelOwnerRemarked videoReactionsPreference. */
+    public videoReactionsPreference?: (IVideoReactionsPreference|null);
+
+    /** ChannelOwnerRemarked moderateComment. */
+    public moderateComment?: (IModerateComment|null);
+
+    /** ChannelOwnerRemarked channelOwnerRemarked. */
+    public channelOwnerRemarked?: ("pinOrUnpinComment"|"banOrUnbanMemberFromChannel"|"videoReactionsPreference"|"moderateComment");
+
+    /**
+     * Creates a new ChannelOwnerRemarked instance using the specified properties.
+     * @param [properties] Properties to set
+     * @returns ChannelOwnerRemarked instance
+     */
+    public static create(properties?: IChannelOwnerRemarked): ChannelOwnerRemarked;
+
+    /**
+     * Encodes the specified ChannelOwnerRemarked message. Does not implicitly {@link ChannelOwnerRemarked.verify|verify} messages.
+     * @param message ChannelOwnerRemarked message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encode(message: IChannelOwnerRemarked, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Encodes the specified ChannelOwnerRemarked message, length delimited. Does not implicitly {@link ChannelOwnerRemarked.verify|verify} messages.
+     * @param message ChannelOwnerRemarked message or plain object to encode
+     * @param [writer] Writer to encode to
+     * @returns Writer
+     */
+    public static encodeDelimited(message: IChannelOwnerRemarked, writer?: $protobuf.Writer): $protobuf.Writer;
+
+    /**
+     * Decodes a ChannelOwnerRemarked message from the specified reader or buffer.
+     * @param reader Reader or buffer to decode from
+     * @param [length] Message length if known beforehand
+     * @returns ChannelOwnerRemarked
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ChannelOwnerRemarked;
+
+    /**
+     * Decodes a ChannelOwnerRemarked message from the specified reader or buffer, length delimited.
+     * @param reader Reader or buffer to decode from
+     * @returns ChannelOwnerRemarked
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ChannelOwnerRemarked;
+
+    /**
+     * Verifies a ChannelOwnerRemarked message.
+     * @param message Plain object to verify
+     * @returns `null` if valid, otherwise the reason why it is not
+     */
+    public static verify(message: { [k: string]: any }): (string|null);
+
+    /**
+     * Creates a ChannelOwnerRemarked message from a plain object. Also converts values to their respective internal types.
+     * @param object Plain object
+     * @returns ChannelOwnerRemarked
+     */
+    public static fromObject(object: { [k: string]: any }): ChannelOwnerRemarked;
+
+    /**
+     * Creates a plain object from a ChannelOwnerRemarked message. Also converts values to other types if specified.
+     * @param message ChannelOwnerRemarked
+     * @param [options] Conversion options
+     * @returns Plain object
+     */
+    public static toObject(message: ChannelOwnerRemarked, options?: $protobuf.IConversionOptions): { [k: string]: any };
+
+    /**
+     * Converts this ChannelOwnerRemarked to JSON.
+     * @returns JSON object
+     */
+    public toJSON(): { [k: string]: any };
+}
+
 /** Properties of a PersonMetadata. */
 export interface IPersonMetadata {
 
@@ -2431,6 +3658,9 @@ export interface IVideoMetadata {
 
     /** VideoMetadata category */
     category?: (Long|null);
+
+    /** VideoMetadata enableComments */
+    enableComments?: (boolean|null);
 }
 
 /** Represents a VideoMetadata. */
@@ -2490,6 +3720,9 @@ export class VideoMetadata implements IVideoMetadata {
     /** VideoMetadata category. */
     public category: Long;
 
+    /** VideoMetadata enableComments. */
+    public enableComments: boolean;
+
     /**
      * Creates a new VideoMetadata instance using the specified properties.
      * @param [properties] Properties to set
diff --git a/compiled/index.js b/compiled/index.js
index f290bcbd1cbfba3e93885a29c7c30a6dce761e5f..ed0dc6dc0a364e34996d5d9814f06ac893e7d007 100644
--- a/compiled/index.js
+++ b/compiled/index.js
@@ -2168,6 +2168,2966 @@ $root.MembershipMetadata = (function() {
     return MembershipMetadata;
 })();
 
+$root.ReactVideo = (function() {
+
+    /**
+     * Properties of a ReactVideo.
+     * @exports IReactVideo
+     * @interface IReactVideo
+     * @property {Long} videoId ReactVideo videoId
+     * @property {ReactVideo.Reaction} reaction ReactVideo reaction
+     */
+
+    /**
+     * Constructs a new ReactVideo.
+     * @exports ReactVideo
+     * @classdesc Represents a ReactVideo.
+     * @implements IReactVideo
+     * @constructor
+     * @param {IReactVideo=} [properties] Properties to set
+     */
+    function ReactVideo(properties) {
+        if (properties)
+            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
+                if (properties[keys[i]] != null)
+                    this[keys[i]] = properties[keys[i]];
+    }
+
+    /**
+     * ReactVideo videoId.
+     * @member {Long} videoId
+     * @memberof ReactVideo
+     * @instance
+     */
+    ReactVideo.prototype.videoId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
+
+    /**
+     * ReactVideo reaction.
+     * @member {ReactVideo.Reaction} reaction
+     * @memberof ReactVideo
+     * @instance
+     */
+    ReactVideo.prototype.reaction = 0;
+
+    /**
+     * Creates a new ReactVideo instance using the specified properties.
+     * @function create
+     * @memberof ReactVideo
+     * @static
+     * @param {IReactVideo=} [properties] Properties to set
+     * @returns {ReactVideo} ReactVideo instance
+     */
+    ReactVideo.create = function create(properties) {
+        return new ReactVideo(properties);
+    };
+
+    /**
+     * Encodes the specified ReactVideo message. Does not implicitly {@link ReactVideo.verify|verify} messages.
+     * @function encode
+     * @memberof ReactVideo
+     * @static
+     * @param {IReactVideo} message ReactVideo message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    ReactVideo.encode = function encode(message, writer) {
+        if (!writer)
+            writer = $Writer.create();
+        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.videoId);
+        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.reaction);
+        return writer;
+    };
+
+    /**
+     * Encodes the specified ReactVideo message, length delimited. Does not implicitly {@link ReactVideo.verify|verify} messages.
+     * @function encodeDelimited
+     * @memberof ReactVideo
+     * @static
+     * @param {IReactVideo} message ReactVideo message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    ReactVideo.encodeDelimited = function encodeDelimited(message, writer) {
+        return this.encode(message, writer).ldelim();
+    };
+
+    /**
+     * Decodes a ReactVideo message from the specified reader or buffer.
+     * @function decode
+     * @memberof ReactVideo
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @param {number} [length] Message length if known beforehand
+     * @returns {ReactVideo} ReactVideo
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    ReactVideo.decode = function decode(reader, length) {
+        if (!(reader instanceof $Reader))
+            reader = $Reader.create(reader);
+        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReactVideo();
+        while (reader.pos < end) {
+            var tag = reader.uint32();
+            switch (tag >>> 3) {
+            case 1:
+                message.videoId = reader.uint64();
+                break;
+            case 2:
+                message.reaction = reader.int32();
+                break;
+            default:
+                reader.skipType(tag & 7);
+                break;
+            }
+        }
+        if (!message.hasOwnProperty("videoId"))
+            throw $util.ProtocolError("missing required 'videoId'", { instance: message });
+        if (!message.hasOwnProperty("reaction"))
+            throw $util.ProtocolError("missing required 'reaction'", { instance: message });
+        return message;
+    };
+
+    /**
+     * Decodes a ReactVideo message from the specified reader or buffer, length delimited.
+     * @function decodeDelimited
+     * @memberof ReactVideo
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @returns {ReactVideo} ReactVideo
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    ReactVideo.decodeDelimited = function decodeDelimited(reader) {
+        if (!(reader instanceof $Reader))
+            reader = new $Reader(reader);
+        return this.decode(reader, reader.uint32());
+    };
+
+    /**
+     * Verifies a ReactVideo message.
+     * @function verify
+     * @memberof ReactVideo
+     * @static
+     * @param {Object.<string,*>} message Plain object to verify
+     * @returns {string|null} `null` if valid, otherwise the reason why it is not
+     */
+    ReactVideo.verify = function verify(message) {
+        if (typeof message !== "object" || message === null)
+            return "object expected";
+        if (!$util.isInteger(message.videoId) && !(message.videoId && $util.isInteger(message.videoId.low) && $util.isInteger(message.videoId.high)))
+            return "videoId: integer|Long expected";
+        switch (message.reaction) {
+        default:
+            return "reaction: enum value expected";
+        case 0:
+        case 1:
+            break;
+        }
+        return null;
+    };
+
+    /**
+     * Creates a ReactVideo message from a plain object. Also converts values to their respective internal types.
+     * @function fromObject
+     * @memberof ReactVideo
+     * @static
+     * @param {Object.<string,*>} object Plain object
+     * @returns {ReactVideo} ReactVideo
+     */
+    ReactVideo.fromObject = function fromObject(object) {
+        if (object instanceof $root.ReactVideo)
+            return object;
+        var message = new $root.ReactVideo();
+        if (object.videoId != null)
+            if ($util.Long)
+                (message.videoId = $util.Long.fromValue(object.videoId)).unsigned = true;
+            else if (typeof object.videoId === "string")
+                message.videoId = parseInt(object.videoId, 10);
+            else if (typeof object.videoId === "number")
+                message.videoId = object.videoId;
+            else if (typeof object.videoId === "object")
+                message.videoId = new $util.LongBits(object.videoId.low >>> 0, object.videoId.high >>> 0).toNumber(true);
+        switch (object.reaction) {
+        case "LIKE":
+        case 0:
+            message.reaction = 0;
+            break;
+        case "UNLIKE":
+        case 1:
+            message.reaction = 1;
+            break;
+        }
+        return message;
+    };
+
+    /**
+     * Creates a plain object from a ReactVideo message. Also converts values to other types if specified.
+     * @function toObject
+     * @memberof ReactVideo
+     * @static
+     * @param {ReactVideo} message ReactVideo
+     * @param {$protobuf.IConversionOptions} [options] Conversion options
+     * @returns {Object.<string,*>} Plain object
+     */
+    ReactVideo.toObject = function toObject(message, options) {
+        if (!options)
+            options = {};
+        var object = {};
+        if (options.defaults) {
+            if ($util.Long) {
+                var long = new $util.Long(0, 0, true);
+                object.videoId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
+            } else
+                object.videoId = options.longs === String ? "0" : 0;
+            object.reaction = options.enums === String ? "LIKE" : 0;
+        }
+        if (message.videoId != null && message.hasOwnProperty("videoId"))
+            if (typeof message.videoId === "number")
+                object.videoId = options.longs === String ? String(message.videoId) : message.videoId;
+            else
+                object.videoId = options.longs === String ? $util.Long.prototype.toString.call(message.videoId) : options.longs === Number ? new $util.LongBits(message.videoId.low >>> 0, message.videoId.high >>> 0).toNumber(true) : message.videoId;
+        if (message.reaction != null && message.hasOwnProperty("reaction"))
+            object.reaction = options.enums === String ? $root.ReactVideo.Reaction[message.reaction] : message.reaction;
+        return object;
+    };
+
+    /**
+     * Converts this ReactVideo to JSON.
+     * @function toJSON
+     * @memberof ReactVideo
+     * @instance
+     * @returns {Object.<string,*>} JSON object
+     */
+    ReactVideo.prototype.toJSON = function toJSON() {
+        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
+    };
+
+    /**
+     * Reaction enum.
+     * @name ReactVideo.Reaction
+     * @enum {number}
+     * @property {number} LIKE=0 LIKE value
+     * @property {number} UNLIKE=1 UNLIKE value
+     */
+    ReactVideo.Reaction = (function() {
+        var valuesById = {}, values = Object.create(valuesById);
+        values[valuesById[0] = "LIKE"] = 0;
+        values[valuesById[1] = "UNLIKE"] = 1;
+        return values;
+    })();
+
+    return ReactVideo;
+})();
+
+$root.ReactComment = (function() {
+
+    /**
+     * Properties of a ReactComment.
+     * @exports IReactComment
+     * @interface IReactComment
+     * @property {string} commentId ReactComment commentId
+     * @property {number} reactionId ReactComment reactionId
+     */
+
+    /**
+     * Constructs a new ReactComment.
+     * @exports ReactComment
+     * @classdesc Represents a ReactComment.
+     * @implements IReactComment
+     * @constructor
+     * @param {IReactComment=} [properties] Properties to set
+     */
+    function ReactComment(properties) {
+        if (properties)
+            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
+                if (properties[keys[i]] != null)
+                    this[keys[i]] = properties[keys[i]];
+    }
+
+    /**
+     * ReactComment commentId.
+     * @member {string} commentId
+     * @memberof ReactComment
+     * @instance
+     */
+    ReactComment.prototype.commentId = "";
+
+    /**
+     * ReactComment reactionId.
+     * @member {number} reactionId
+     * @memberof ReactComment
+     * @instance
+     */
+    ReactComment.prototype.reactionId = 0;
+
+    /**
+     * Creates a new ReactComment instance using the specified properties.
+     * @function create
+     * @memberof ReactComment
+     * @static
+     * @param {IReactComment=} [properties] Properties to set
+     * @returns {ReactComment} ReactComment instance
+     */
+    ReactComment.create = function create(properties) {
+        return new ReactComment(properties);
+    };
+
+    /**
+     * Encodes the specified ReactComment message. Does not implicitly {@link ReactComment.verify|verify} messages.
+     * @function encode
+     * @memberof ReactComment
+     * @static
+     * @param {IReactComment} message ReactComment message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    ReactComment.encode = function encode(message, writer) {
+        if (!writer)
+            writer = $Writer.create();
+        writer.uint32(/* id 1, wireType 2 =*/10).string(message.commentId);
+        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.reactionId);
+        return writer;
+    };
+
+    /**
+     * Encodes the specified ReactComment message, length delimited. Does not implicitly {@link ReactComment.verify|verify} messages.
+     * @function encodeDelimited
+     * @memberof ReactComment
+     * @static
+     * @param {IReactComment} message ReactComment message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    ReactComment.encodeDelimited = function encodeDelimited(message, writer) {
+        return this.encode(message, writer).ldelim();
+    };
+
+    /**
+     * Decodes a ReactComment message from the specified reader or buffer.
+     * @function decode
+     * @memberof ReactComment
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @param {number} [length] Message length if known beforehand
+     * @returns {ReactComment} ReactComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    ReactComment.decode = function decode(reader, length) {
+        if (!(reader instanceof $Reader))
+            reader = $Reader.create(reader);
+        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReactComment();
+        while (reader.pos < end) {
+            var tag = reader.uint32();
+            switch (tag >>> 3) {
+            case 1:
+                message.commentId = reader.string();
+                break;
+            case 2:
+                message.reactionId = reader.uint32();
+                break;
+            default:
+                reader.skipType(tag & 7);
+                break;
+            }
+        }
+        if (!message.hasOwnProperty("commentId"))
+            throw $util.ProtocolError("missing required 'commentId'", { instance: message });
+        if (!message.hasOwnProperty("reactionId"))
+            throw $util.ProtocolError("missing required 'reactionId'", { instance: message });
+        return message;
+    };
+
+    /**
+     * Decodes a ReactComment message from the specified reader or buffer, length delimited.
+     * @function decodeDelimited
+     * @memberof ReactComment
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @returns {ReactComment} ReactComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    ReactComment.decodeDelimited = function decodeDelimited(reader) {
+        if (!(reader instanceof $Reader))
+            reader = new $Reader(reader);
+        return this.decode(reader, reader.uint32());
+    };
+
+    /**
+     * Verifies a ReactComment message.
+     * @function verify
+     * @memberof ReactComment
+     * @static
+     * @param {Object.<string,*>} message Plain object to verify
+     * @returns {string|null} `null` if valid, otherwise the reason why it is not
+     */
+    ReactComment.verify = function verify(message) {
+        if (typeof message !== "object" || message === null)
+            return "object expected";
+        if (!$util.isString(message.commentId))
+            return "commentId: string expected";
+        if (!$util.isInteger(message.reactionId))
+            return "reactionId: integer expected";
+        return null;
+    };
+
+    /**
+     * Creates a ReactComment message from a plain object. Also converts values to their respective internal types.
+     * @function fromObject
+     * @memberof ReactComment
+     * @static
+     * @param {Object.<string,*>} object Plain object
+     * @returns {ReactComment} ReactComment
+     */
+    ReactComment.fromObject = function fromObject(object) {
+        if (object instanceof $root.ReactComment)
+            return object;
+        var message = new $root.ReactComment();
+        if (object.commentId != null)
+            message.commentId = String(object.commentId);
+        if (object.reactionId != null)
+            message.reactionId = object.reactionId >>> 0;
+        return message;
+    };
+
+    /**
+     * Creates a plain object from a ReactComment message. Also converts values to other types if specified.
+     * @function toObject
+     * @memberof ReactComment
+     * @static
+     * @param {ReactComment} message ReactComment
+     * @param {$protobuf.IConversionOptions} [options] Conversion options
+     * @returns {Object.<string,*>} Plain object
+     */
+    ReactComment.toObject = function toObject(message, options) {
+        if (!options)
+            options = {};
+        var object = {};
+        if (options.defaults) {
+            object.commentId = "";
+            object.reactionId = 0;
+        }
+        if (message.commentId != null && message.hasOwnProperty("commentId"))
+            object.commentId = message.commentId;
+        if (message.reactionId != null && message.hasOwnProperty("reactionId"))
+            object.reactionId = message.reactionId;
+        return object;
+    };
+
+    /**
+     * Converts this ReactComment to JSON.
+     * @function toJSON
+     * @memberof ReactComment
+     * @instance
+     * @returns {Object.<string,*>} JSON object
+     */
+    ReactComment.prototype.toJSON = function toJSON() {
+        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
+    };
+
+    return ReactComment;
+})();
+
+$root.CreateComment = (function() {
+
+    /**
+     * Properties of a CreateComment.
+     * @exports ICreateComment
+     * @interface ICreateComment
+     * @property {Long} videoId CreateComment videoId
+     * @property {string|null} [parentCommentId] CreateComment parentCommentId
+     * @property {string} body CreateComment body
+     */
+
+    /**
+     * Constructs a new CreateComment.
+     * @exports CreateComment
+     * @classdesc Represents a CreateComment.
+     * @implements ICreateComment
+     * @constructor
+     * @param {ICreateComment=} [properties] Properties to set
+     */
+    function CreateComment(properties) {
+        if (properties)
+            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
+                if (properties[keys[i]] != null)
+                    this[keys[i]] = properties[keys[i]];
+    }
+
+    /**
+     * CreateComment videoId.
+     * @member {Long} videoId
+     * @memberof CreateComment
+     * @instance
+     */
+    CreateComment.prototype.videoId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
+
+    /**
+     * CreateComment parentCommentId.
+     * @member {string} parentCommentId
+     * @memberof CreateComment
+     * @instance
+     */
+    CreateComment.prototype.parentCommentId = "";
+
+    /**
+     * CreateComment body.
+     * @member {string} body
+     * @memberof CreateComment
+     * @instance
+     */
+    CreateComment.prototype.body = "";
+
+    /**
+     * Creates a new CreateComment instance using the specified properties.
+     * @function create
+     * @memberof CreateComment
+     * @static
+     * @param {ICreateComment=} [properties] Properties to set
+     * @returns {CreateComment} CreateComment instance
+     */
+    CreateComment.create = function create(properties) {
+        return new CreateComment(properties);
+    };
+
+    /**
+     * Encodes the specified CreateComment message. Does not implicitly {@link CreateComment.verify|verify} messages.
+     * @function encode
+     * @memberof CreateComment
+     * @static
+     * @param {ICreateComment} message CreateComment message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    CreateComment.encode = function encode(message, writer) {
+        if (!writer)
+            writer = $Writer.create();
+        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.videoId);
+        if (message.parentCommentId != null && Object.hasOwnProperty.call(message, "parentCommentId"))
+            writer.uint32(/* id 2, wireType 2 =*/18).string(message.parentCommentId);
+        writer.uint32(/* id 3, wireType 2 =*/26).string(message.body);
+        return writer;
+    };
+
+    /**
+     * Encodes the specified CreateComment message, length delimited. Does not implicitly {@link CreateComment.verify|verify} messages.
+     * @function encodeDelimited
+     * @memberof CreateComment
+     * @static
+     * @param {ICreateComment} message CreateComment message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    CreateComment.encodeDelimited = function encodeDelimited(message, writer) {
+        return this.encode(message, writer).ldelim();
+    };
+
+    /**
+     * Decodes a CreateComment message from the specified reader or buffer.
+     * @function decode
+     * @memberof CreateComment
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @param {number} [length] Message length if known beforehand
+     * @returns {CreateComment} CreateComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    CreateComment.decode = function decode(reader, length) {
+        if (!(reader instanceof $Reader))
+            reader = $Reader.create(reader);
+        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CreateComment();
+        while (reader.pos < end) {
+            var tag = reader.uint32();
+            switch (tag >>> 3) {
+            case 1:
+                message.videoId = reader.uint64();
+                break;
+            case 2:
+                message.parentCommentId = reader.string();
+                break;
+            case 3:
+                message.body = reader.string();
+                break;
+            default:
+                reader.skipType(tag & 7);
+                break;
+            }
+        }
+        if (!message.hasOwnProperty("videoId"))
+            throw $util.ProtocolError("missing required 'videoId'", { instance: message });
+        if (!message.hasOwnProperty("body"))
+            throw $util.ProtocolError("missing required 'body'", { instance: message });
+        return message;
+    };
+
+    /**
+     * Decodes a CreateComment message from the specified reader or buffer, length delimited.
+     * @function decodeDelimited
+     * @memberof CreateComment
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @returns {CreateComment} CreateComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    CreateComment.decodeDelimited = function decodeDelimited(reader) {
+        if (!(reader instanceof $Reader))
+            reader = new $Reader(reader);
+        return this.decode(reader, reader.uint32());
+    };
+
+    /**
+     * Verifies a CreateComment message.
+     * @function verify
+     * @memberof CreateComment
+     * @static
+     * @param {Object.<string,*>} message Plain object to verify
+     * @returns {string|null} `null` if valid, otherwise the reason why it is not
+     */
+    CreateComment.verify = function verify(message) {
+        if (typeof message !== "object" || message === null)
+            return "object expected";
+        if (!$util.isInteger(message.videoId) && !(message.videoId && $util.isInteger(message.videoId.low) && $util.isInteger(message.videoId.high)))
+            return "videoId: integer|Long expected";
+        if (message.parentCommentId != null && message.hasOwnProperty("parentCommentId"))
+            if (!$util.isString(message.parentCommentId))
+                return "parentCommentId: string expected";
+        if (!$util.isString(message.body))
+            return "body: string expected";
+        return null;
+    };
+
+    /**
+     * Creates a CreateComment message from a plain object. Also converts values to their respective internal types.
+     * @function fromObject
+     * @memberof CreateComment
+     * @static
+     * @param {Object.<string,*>} object Plain object
+     * @returns {CreateComment} CreateComment
+     */
+    CreateComment.fromObject = function fromObject(object) {
+        if (object instanceof $root.CreateComment)
+            return object;
+        var message = new $root.CreateComment();
+        if (object.videoId != null)
+            if ($util.Long)
+                (message.videoId = $util.Long.fromValue(object.videoId)).unsigned = true;
+            else if (typeof object.videoId === "string")
+                message.videoId = parseInt(object.videoId, 10);
+            else if (typeof object.videoId === "number")
+                message.videoId = object.videoId;
+            else if (typeof object.videoId === "object")
+                message.videoId = new $util.LongBits(object.videoId.low >>> 0, object.videoId.high >>> 0).toNumber(true);
+        if (object.parentCommentId != null)
+            message.parentCommentId = String(object.parentCommentId);
+        if (object.body != null)
+            message.body = String(object.body);
+        return message;
+    };
+
+    /**
+     * Creates a plain object from a CreateComment message. Also converts values to other types if specified.
+     * @function toObject
+     * @memberof CreateComment
+     * @static
+     * @param {CreateComment} message CreateComment
+     * @param {$protobuf.IConversionOptions} [options] Conversion options
+     * @returns {Object.<string,*>} Plain object
+     */
+    CreateComment.toObject = function toObject(message, options) {
+        if (!options)
+            options = {};
+        var object = {};
+        if (options.defaults) {
+            if ($util.Long) {
+                var long = new $util.Long(0, 0, true);
+                object.videoId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
+            } else
+                object.videoId = options.longs === String ? "0" : 0;
+            object.parentCommentId = "";
+            object.body = "";
+        }
+        if (message.videoId != null && message.hasOwnProperty("videoId"))
+            if (typeof message.videoId === "number")
+                object.videoId = options.longs === String ? String(message.videoId) : message.videoId;
+            else
+                object.videoId = options.longs === String ? $util.Long.prototype.toString.call(message.videoId) : options.longs === Number ? new $util.LongBits(message.videoId.low >>> 0, message.videoId.high >>> 0).toNumber(true) : message.videoId;
+        if (message.parentCommentId != null && message.hasOwnProperty("parentCommentId"))
+            object.parentCommentId = message.parentCommentId;
+        if (message.body != null && message.hasOwnProperty("body"))
+            object.body = message.body;
+        return object;
+    };
+
+    /**
+     * Converts this CreateComment to JSON.
+     * @function toJSON
+     * @memberof CreateComment
+     * @instance
+     * @returns {Object.<string,*>} JSON object
+     */
+    CreateComment.prototype.toJSON = function toJSON() {
+        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
+    };
+
+    return CreateComment;
+})();
+
+$root.EditComment = (function() {
+
+    /**
+     * Properties of an EditComment.
+     * @exports IEditComment
+     * @interface IEditComment
+     * @property {string} commentId EditComment commentId
+     * @property {string} newBody EditComment newBody
+     */
+
+    /**
+     * Constructs a new EditComment.
+     * @exports EditComment
+     * @classdesc Represents an EditComment.
+     * @implements IEditComment
+     * @constructor
+     * @param {IEditComment=} [properties] Properties to set
+     */
+    function EditComment(properties) {
+        if (properties)
+            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
+                if (properties[keys[i]] != null)
+                    this[keys[i]] = properties[keys[i]];
+    }
+
+    /**
+     * EditComment commentId.
+     * @member {string} commentId
+     * @memberof EditComment
+     * @instance
+     */
+    EditComment.prototype.commentId = "";
+
+    /**
+     * EditComment newBody.
+     * @member {string} newBody
+     * @memberof EditComment
+     * @instance
+     */
+    EditComment.prototype.newBody = "";
+
+    /**
+     * Creates a new EditComment instance using the specified properties.
+     * @function create
+     * @memberof EditComment
+     * @static
+     * @param {IEditComment=} [properties] Properties to set
+     * @returns {EditComment} EditComment instance
+     */
+    EditComment.create = function create(properties) {
+        return new EditComment(properties);
+    };
+
+    /**
+     * Encodes the specified EditComment message. Does not implicitly {@link EditComment.verify|verify} messages.
+     * @function encode
+     * @memberof EditComment
+     * @static
+     * @param {IEditComment} message EditComment message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    EditComment.encode = function encode(message, writer) {
+        if (!writer)
+            writer = $Writer.create();
+        writer.uint32(/* id 1, wireType 2 =*/10).string(message.commentId);
+        writer.uint32(/* id 2, wireType 2 =*/18).string(message.newBody);
+        return writer;
+    };
+
+    /**
+     * Encodes the specified EditComment message, length delimited. Does not implicitly {@link EditComment.verify|verify} messages.
+     * @function encodeDelimited
+     * @memberof EditComment
+     * @static
+     * @param {IEditComment} message EditComment message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    EditComment.encodeDelimited = function encodeDelimited(message, writer) {
+        return this.encode(message, writer).ldelim();
+    };
+
+    /**
+     * Decodes an EditComment message from the specified reader or buffer.
+     * @function decode
+     * @memberof EditComment
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @param {number} [length] Message length if known beforehand
+     * @returns {EditComment} EditComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    EditComment.decode = function decode(reader, length) {
+        if (!(reader instanceof $Reader))
+            reader = $Reader.create(reader);
+        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EditComment();
+        while (reader.pos < end) {
+            var tag = reader.uint32();
+            switch (tag >>> 3) {
+            case 1:
+                message.commentId = reader.string();
+                break;
+            case 2:
+                message.newBody = reader.string();
+                break;
+            default:
+                reader.skipType(tag & 7);
+                break;
+            }
+        }
+        if (!message.hasOwnProperty("commentId"))
+            throw $util.ProtocolError("missing required 'commentId'", { instance: message });
+        if (!message.hasOwnProperty("newBody"))
+            throw $util.ProtocolError("missing required 'newBody'", { instance: message });
+        return message;
+    };
+
+    /**
+     * Decodes an EditComment message from the specified reader or buffer, length delimited.
+     * @function decodeDelimited
+     * @memberof EditComment
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @returns {EditComment} EditComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    EditComment.decodeDelimited = function decodeDelimited(reader) {
+        if (!(reader instanceof $Reader))
+            reader = new $Reader(reader);
+        return this.decode(reader, reader.uint32());
+    };
+
+    /**
+     * Verifies an EditComment message.
+     * @function verify
+     * @memberof EditComment
+     * @static
+     * @param {Object.<string,*>} message Plain object to verify
+     * @returns {string|null} `null` if valid, otherwise the reason why it is not
+     */
+    EditComment.verify = function verify(message) {
+        if (typeof message !== "object" || message === null)
+            return "object expected";
+        if (!$util.isString(message.commentId))
+            return "commentId: string expected";
+        if (!$util.isString(message.newBody))
+            return "newBody: string expected";
+        return null;
+    };
+
+    /**
+     * Creates an EditComment message from a plain object. Also converts values to their respective internal types.
+     * @function fromObject
+     * @memberof EditComment
+     * @static
+     * @param {Object.<string,*>} object Plain object
+     * @returns {EditComment} EditComment
+     */
+    EditComment.fromObject = function fromObject(object) {
+        if (object instanceof $root.EditComment)
+            return object;
+        var message = new $root.EditComment();
+        if (object.commentId != null)
+            message.commentId = String(object.commentId);
+        if (object.newBody != null)
+            message.newBody = String(object.newBody);
+        return message;
+    };
+
+    /**
+     * Creates a plain object from an EditComment message. Also converts values to other types if specified.
+     * @function toObject
+     * @memberof EditComment
+     * @static
+     * @param {EditComment} message EditComment
+     * @param {$protobuf.IConversionOptions} [options] Conversion options
+     * @returns {Object.<string,*>} Plain object
+     */
+    EditComment.toObject = function toObject(message, options) {
+        if (!options)
+            options = {};
+        var object = {};
+        if (options.defaults) {
+            object.commentId = "";
+            object.newBody = "";
+        }
+        if (message.commentId != null && message.hasOwnProperty("commentId"))
+            object.commentId = message.commentId;
+        if (message.newBody != null && message.hasOwnProperty("newBody"))
+            object.newBody = message.newBody;
+        return object;
+    };
+
+    /**
+     * Converts this EditComment to JSON.
+     * @function toJSON
+     * @memberof EditComment
+     * @instance
+     * @returns {Object.<string,*>} JSON object
+     */
+    EditComment.prototype.toJSON = function toJSON() {
+        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
+    };
+
+    return EditComment;
+})();
+
+$root.DeleteComment = (function() {
+
+    /**
+     * Properties of a DeleteComment.
+     * @exports IDeleteComment
+     * @interface IDeleteComment
+     * @property {string} commentId DeleteComment commentId
+     */
+
+    /**
+     * Constructs a new DeleteComment.
+     * @exports DeleteComment
+     * @classdesc Represents a DeleteComment.
+     * @implements IDeleteComment
+     * @constructor
+     * @param {IDeleteComment=} [properties] Properties to set
+     */
+    function DeleteComment(properties) {
+        if (properties)
+            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
+                if (properties[keys[i]] != null)
+                    this[keys[i]] = properties[keys[i]];
+    }
+
+    /**
+     * DeleteComment commentId.
+     * @member {string} commentId
+     * @memberof DeleteComment
+     * @instance
+     */
+    DeleteComment.prototype.commentId = "";
+
+    /**
+     * Creates a new DeleteComment instance using the specified properties.
+     * @function create
+     * @memberof DeleteComment
+     * @static
+     * @param {IDeleteComment=} [properties] Properties to set
+     * @returns {DeleteComment} DeleteComment instance
+     */
+    DeleteComment.create = function create(properties) {
+        return new DeleteComment(properties);
+    };
+
+    /**
+     * Encodes the specified DeleteComment message. Does not implicitly {@link DeleteComment.verify|verify} messages.
+     * @function encode
+     * @memberof DeleteComment
+     * @static
+     * @param {IDeleteComment} message DeleteComment message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    DeleteComment.encode = function encode(message, writer) {
+        if (!writer)
+            writer = $Writer.create();
+        writer.uint32(/* id 1, wireType 2 =*/10).string(message.commentId);
+        return writer;
+    };
+
+    /**
+     * Encodes the specified DeleteComment message, length delimited. Does not implicitly {@link DeleteComment.verify|verify} messages.
+     * @function encodeDelimited
+     * @memberof DeleteComment
+     * @static
+     * @param {IDeleteComment} message DeleteComment message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    DeleteComment.encodeDelimited = function encodeDelimited(message, writer) {
+        return this.encode(message, writer).ldelim();
+    };
+
+    /**
+     * Decodes a DeleteComment message from the specified reader or buffer.
+     * @function decode
+     * @memberof DeleteComment
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @param {number} [length] Message length if known beforehand
+     * @returns {DeleteComment} DeleteComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    DeleteComment.decode = function decode(reader, length) {
+        if (!(reader instanceof $Reader))
+            reader = $Reader.create(reader);
+        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DeleteComment();
+        while (reader.pos < end) {
+            var tag = reader.uint32();
+            switch (tag >>> 3) {
+            case 1:
+                message.commentId = reader.string();
+                break;
+            default:
+                reader.skipType(tag & 7);
+                break;
+            }
+        }
+        if (!message.hasOwnProperty("commentId"))
+            throw $util.ProtocolError("missing required 'commentId'", { instance: message });
+        return message;
+    };
+
+    /**
+     * Decodes a DeleteComment message from the specified reader or buffer, length delimited.
+     * @function decodeDelimited
+     * @memberof DeleteComment
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @returns {DeleteComment} DeleteComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    DeleteComment.decodeDelimited = function decodeDelimited(reader) {
+        if (!(reader instanceof $Reader))
+            reader = new $Reader(reader);
+        return this.decode(reader, reader.uint32());
+    };
+
+    /**
+     * Verifies a DeleteComment message.
+     * @function verify
+     * @memberof DeleteComment
+     * @static
+     * @param {Object.<string,*>} message Plain object to verify
+     * @returns {string|null} `null` if valid, otherwise the reason why it is not
+     */
+    DeleteComment.verify = function verify(message) {
+        if (typeof message !== "object" || message === null)
+            return "object expected";
+        if (!$util.isString(message.commentId))
+            return "commentId: string expected";
+        return null;
+    };
+
+    /**
+     * Creates a DeleteComment message from a plain object. Also converts values to their respective internal types.
+     * @function fromObject
+     * @memberof DeleteComment
+     * @static
+     * @param {Object.<string,*>} object Plain object
+     * @returns {DeleteComment} DeleteComment
+     */
+    DeleteComment.fromObject = function fromObject(object) {
+        if (object instanceof $root.DeleteComment)
+            return object;
+        var message = new $root.DeleteComment();
+        if (object.commentId != null)
+            message.commentId = String(object.commentId);
+        return message;
+    };
+
+    /**
+     * Creates a plain object from a DeleteComment message. Also converts values to other types if specified.
+     * @function toObject
+     * @memberof DeleteComment
+     * @static
+     * @param {DeleteComment} message DeleteComment
+     * @param {$protobuf.IConversionOptions} [options] Conversion options
+     * @returns {Object.<string,*>} Plain object
+     */
+    DeleteComment.toObject = function toObject(message, options) {
+        if (!options)
+            options = {};
+        var object = {};
+        if (options.defaults)
+            object.commentId = "";
+        if (message.commentId != null && message.hasOwnProperty("commentId"))
+            object.commentId = message.commentId;
+        return object;
+    };
+
+    /**
+     * Converts this DeleteComment to JSON.
+     * @function toJSON
+     * @memberof DeleteComment
+     * @instance
+     * @returns {Object.<string,*>} JSON object
+     */
+    DeleteComment.prototype.toJSON = function toJSON() {
+        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
+    };
+
+    return DeleteComment;
+})();
+
+$root.PinOrUnpinComment = (function() {
+
+    /**
+     * Properties of a PinOrUnpinComment.
+     * @exports IPinOrUnpinComment
+     * @interface IPinOrUnpinComment
+     * @property {Long} videoId PinOrUnpinComment videoId
+     * @property {string} commentId PinOrUnpinComment commentId
+     * @property {PinOrUnpinComment.Option} option PinOrUnpinComment option
+     */
+
+    /**
+     * Constructs a new PinOrUnpinComment.
+     * @exports PinOrUnpinComment
+     * @classdesc Represents a PinOrUnpinComment.
+     * @implements IPinOrUnpinComment
+     * @constructor
+     * @param {IPinOrUnpinComment=} [properties] Properties to set
+     */
+    function PinOrUnpinComment(properties) {
+        if (properties)
+            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
+                if (properties[keys[i]] != null)
+                    this[keys[i]] = properties[keys[i]];
+    }
+
+    /**
+     * PinOrUnpinComment videoId.
+     * @member {Long} videoId
+     * @memberof PinOrUnpinComment
+     * @instance
+     */
+    PinOrUnpinComment.prototype.videoId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
+
+    /**
+     * PinOrUnpinComment commentId.
+     * @member {string} commentId
+     * @memberof PinOrUnpinComment
+     * @instance
+     */
+    PinOrUnpinComment.prototype.commentId = "";
+
+    /**
+     * PinOrUnpinComment option.
+     * @member {PinOrUnpinComment.Option} option
+     * @memberof PinOrUnpinComment
+     * @instance
+     */
+    PinOrUnpinComment.prototype.option = 0;
+
+    /**
+     * Creates a new PinOrUnpinComment instance using the specified properties.
+     * @function create
+     * @memberof PinOrUnpinComment
+     * @static
+     * @param {IPinOrUnpinComment=} [properties] Properties to set
+     * @returns {PinOrUnpinComment} PinOrUnpinComment instance
+     */
+    PinOrUnpinComment.create = function create(properties) {
+        return new PinOrUnpinComment(properties);
+    };
+
+    /**
+     * Encodes the specified PinOrUnpinComment message. Does not implicitly {@link PinOrUnpinComment.verify|verify} messages.
+     * @function encode
+     * @memberof PinOrUnpinComment
+     * @static
+     * @param {IPinOrUnpinComment} message PinOrUnpinComment message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    PinOrUnpinComment.encode = function encode(message, writer) {
+        if (!writer)
+            writer = $Writer.create();
+        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.videoId);
+        writer.uint32(/* id 2, wireType 2 =*/18).string(message.commentId);
+        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.option);
+        return writer;
+    };
+
+    /**
+     * Encodes the specified PinOrUnpinComment message, length delimited. Does not implicitly {@link PinOrUnpinComment.verify|verify} messages.
+     * @function encodeDelimited
+     * @memberof PinOrUnpinComment
+     * @static
+     * @param {IPinOrUnpinComment} message PinOrUnpinComment message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    PinOrUnpinComment.encodeDelimited = function encodeDelimited(message, writer) {
+        return this.encode(message, writer).ldelim();
+    };
+
+    /**
+     * Decodes a PinOrUnpinComment message from the specified reader or buffer.
+     * @function decode
+     * @memberof PinOrUnpinComment
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @param {number} [length] Message length if known beforehand
+     * @returns {PinOrUnpinComment} PinOrUnpinComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    PinOrUnpinComment.decode = function decode(reader, length) {
+        if (!(reader instanceof $Reader))
+            reader = $Reader.create(reader);
+        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PinOrUnpinComment();
+        while (reader.pos < end) {
+            var tag = reader.uint32();
+            switch (tag >>> 3) {
+            case 1:
+                message.videoId = reader.uint64();
+                break;
+            case 2:
+                message.commentId = reader.string();
+                break;
+            case 3:
+                message.option = reader.int32();
+                break;
+            default:
+                reader.skipType(tag & 7);
+                break;
+            }
+        }
+        if (!message.hasOwnProperty("videoId"))
+            throw $util.ProtocolError("missing required 'videoId'", { instance: message });
+        if (!message.hasOwnProperty("commentId"))
+            throw $util.ProtocolError("missing required 'commentId'", { instance: message });
+        if (!message.hasOwnProperty("option"))
+            throw $util.ProtocolError("missing required 'option'", { instance: message });
+        return message;
+    };
+
+    /**
+     * Decodes a PinOrUnpinComment message from the specified reader or buffer, length delimited.
+     * @function decodeDelimited
+     * @memberof PinOrUnpinComment
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @returns {PinOrUnpinComment} PinOrUnpinComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    PinOrUnpinComment.decodeDelimited = function decodeDelimited(reader) {
+        if (!(reader instanceof $Reader))
+            reader = new $Reader(reader);
+        return this.decode(reader, reader.uint32());
+    };
+
+    /**
+     * Verifies a PinOrUnpinComment message.
+     * @function verify
+     * @memberof PinOrUnpinComment
+     * @static
+     * @param {Object.<string,*>} message Plain object to verify
+     * @returns {string|null} `null` if valid, otherwise the reason why it is not
+     */
+    PinOrUnpinComment.verify = function verify(message) {
+        if (typeof message !== "object" || message === null)
+            return "object expected";
+        if (!$util.isInteger(message.videoId) && !(message.videoId && $util.isInteger(message.videoId.low) && $util.isInteger(message.videoId.high)))
+            return "videoId: integer|Long expected";
+        if (!$util.isString(message.commentId))
+            return "commentId: string expected";
+        switch (message.option) {
+        default:
+            return "option: enum value expected";
+        case 0:
+        case 1:
+            break;
+        }
+        return null;
+    };
+
+    /**
+     * Creates a PinOrUnpinComment message from a plain object. Also converts values to their respective internal types.
+     * @function fromObject
+     * @memberof PinOrUnpinComment
+     * @static
+     * @param {Object.<string,*>} object Plain object
+     * @returns {PinOrUnpinComment} PinOrUnpinComment
+     */
+    PinOrUnpinComment.fromObject = function fromObject(object) {
+        if (object instanceof $root.PinOrUnpinComment)
+            return object;
+        var message = new $root.PinOrUnpinComment();
+        if (object.videoId != null)
+            if ($util.Long)
+                (message.videoId = $util.Long.fromValue(object.videoId)).unsigned = true;
+            else if (typeof object.videoId === "string")
+                message.videoId = parseInt(object.videoId, 10);
+            else if (typeof object.videoId === "number")
+                message.videoId = object.videoId;
+            else if (typeof object.videoId === "object")
+                message.videoId = new $util.LongBits(object.videoId.low >>> 0, object.videoId.high >>> 0).toNumber(true);
+        if (object.commentId != null)
+            message.commentId = String(object.commentId);
+        switch (object.option) {
+        case "PIN":
+        case 0:
+            message.option = 0;
+            break;
+        case "UNPIN":
+        case 1:
+            message.option = 1;
+            break;
+        }
+        return message;
+    };
+
+    /**
+     * Creates a plain object from a PinOrUnpinComment message. Also converts values to other types if specified.
+     * @function toObject
+     * @memberof PinOrUnpinComment
+     * @static
+     * @param {PinOrUnpinComment} message PinOrUnpinComment
+     * @param {$protobuf.IConversionOptions} [options] Conversion options
+     * @returns {Object.<string,*>} Plain object
+     */
+    PinOrUnpinComment.toObject = function toObject(message, options) {
+        if (!options)
+            options = {};
+        var object = {};
+        if (options.defaults) {
+            if ($util.Long) {
+                var long = new $util.Long(0, 0, true);
+                object.videoId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
+            } else
+                object.videoId = options.longs === String ? "0" : 0;
+            object.commentId = "";
+            object.option = options.enums === String ? "PIN" : 0;
+        }
+        if (message.videoId != null && message.hasOwnProperty("videoId"))
+            if (typeof message.videoId === "number")
+                object.videoId = options.longs === String ? String(message.videoId) : message.videoId;
+            else
+                object.videoId = options.longs === String ? $util.Long.prototype.toString.call(message.videoId) : options.longs === Number ? new $util.LongBits(message.videoId.low >>> 0, message.videoId.high >>> 0).toNumber(true) : message.videoId;
+        if (message.commentId != null && message.hasOwnProperty("commentId"))
+            object.commentId = message.commentId;
+        if (message.option != null && message.hasOwnProperty("option"))
+            object.option = options.enums === String ? $root.PinOrUnpinComment.Option[message.option] : message.option;
+        return object;
+    };
+
+    /**
+     * Converts this PinOrUnpinComment to JSON.
+     * @function toJSON
+     * @memberof PinOrUnpinComment
+     * @instance
+     * @returns {Object.<string,*>} JSON object
+     */
+    PinOrUnpinComment.prototype.toJSON = function toJSON() {
+        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
+    };
+
+    /**
+     * Option enum.
+     * @name PinOrUnpinComment.Option
+     * @enum {number}
+     * @property {number} PIN=0 PIN value
+     * @property {number} UNPIN=1 UNPIN value
+     */
+    PinOrUnpinComment.Option = (function() {
+        var valuesById = {}, values = Object.create(valuesById);
+        values[valuesById[0] = "PIN"] = 0;
+        values[valuesById[1] = "UNPIN"] = 1;
+        return values;
+    })();
+
+    return PinOrUnpinComment;
+})();
+
+$root.ModerateComment = (function() {
+
+    /**
+     * Properties of a ModerateComment.
+     * @exports IModerateComment
+     * @interface IModerateComment
+     * @property {string} commentId ModerateComment commentId
+     * @property {string} rationale ModerateComment rationale
+     */
+
+    /**
+     * Constructs a new ModerateComment.
+     * @exports ModerateComment
+     * @classdesc Represents a ModerateComment.
+     * @implements IModerateComment
+     * @constructor
+     * @param {IModerateComment=} [properties] Properties to set
+     */
+    function ModerateComment(properties) {
+        if (properties)
+            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
+                if (properties[keys[i]] != null)
+                    this[keys[i]] = properties[keys[i]];
+    }
+
+    /**
+     * ModerateComment commentId.
+     * @member {string} commentId
+     * @memberof ModerateComment
+     * @instance
+     */
+    ModerateComment.prototype.commentId = "";
+
+    /**
+     * ModerateComment rationale.
+     * @member {string} rationale
+     * @memberof ModerateComment
+     * @instance
+     */
+    ModerateComment.prototype.rationale = "";
+
+    /**
+     * Creates a new ModerateComment instance using the specified properties.
+     * @function create
+     * @memberof ModerateComment
+     * @static
+     * @param {IModerateComment=} [properties] Properties to set
+     * @returns {ModerateComment} ModerateComment instance
+     */
+    ModerateComment.create = function create(properties) {
+        return new ModerateComment(properties);
+    };
+
+    /**
+     * Encodes the specified ModerateComment message. Does not implicitly {@link ModerateComment.verify|verify} messages.
+     * @function encode
+     * @memberof ModerateComment
+     * @static
+     * @param {IModerateComment} message ModerateComment message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    ModerateComment.encode = function encode(message, writer) {
+        if (!writer)
+            writer = $Writer.create();
+        writer.uint32(/* id 1, wireType 2 =*/10).string(message.commentId);
+        writer.uint32(/* id 2, wireType 2 =*/18).string(message.rationale);
+        return writer;
+    };
+
+    /**
+     * Encodes the specified ModerateComment message, length delimited. Does not implicitly {@link ModerateComment.verify|verify} messages.
+     * @function encodeDelimited
+     * @memberof ModerateComment
+     * @static
+     * @param {IModerateComment} message ModerateComment message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    ModerateComment.encodeDelimited = function encodeDelimited(message, writer) {
+        return this.encode(message, writer).ldelim();
+    };
+
+    /**
+     * Decodes a ModerateComment message from the specified reader or buffer.
+     * @function decode
+     * @memberof ModerateComment
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @param {number} [length] Message length if known beforehand
+     * @returns {ModerateComment} ModerateComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    ModerateComment.decode = function decode(reader, length) {
+        if (!(reader instanceof $Reader))
+            reader = $Reader.create(reader);
+        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ModerateComment();
+        while (reader.pos < end) {
+            var tag = reader.uint32();
+            switch (tag >>> 3) {
+            case 1:
+                message.commentId = reader.string();
+                break;
+            case 2:
+                message.rationale = reader.string();
+                break;
+            default:
+                reader.skipType(tag & 7);
+                break;
+            }
+        }
+        if (!message.hasOwnProperty("commentId"))
+            throw $util.ProtocolError("missing required 'commentId'", { instance: message });
+        if (!message.hasOwnProperty("rationale"))
+            throw $util.ProtocolError("missing required 'rationale'", { instance: message });
+        return message;
+    };
+
+    /**
+     * Decodes a ModerateComment message from the specified reader or buffer, length delimited.
+     * @function decodeDelimited
+     * @memberof ModerateComment
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @returns {ModerateComment} ModerateComment
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    ModerateComment.decodeDelimited = function decodeDelimited(reader) {
+        if (!(reader instanceof $Reader))
+            reader = new $Reader(reader);
+        return this.decode(reader, reader.uint32());
+    };
+
+    /**
+     * Verifies a ModerateComment message.
+     * @function verify
+     * @memberof ModerateComment
+     * @static
+     * @param {Object.<string,*>} message Plain object to verify
+     * @returns {string|null} `null` if valid, otherwise the reason why it is not
+     */
+    ModerateComment.verify = function verify(message) {
+        if (typeof message !== "object" || message === null)
+            return "object expected";
+        if (!$util.isString(message.commentId))
+            return "commentId: string expected";
+        if (!$util.isString(message.rationale))
+            return "rationale: string expected";
+        return null;
+    };
+
+    /**
+     * Creates a ModerateComment message from a plain object. Also converts values to their respective internal types.
+     * @function fromObject
+     * @memberof ModerateComment
+     * @static
+     * @param {Object.<string,*>} object Plain object
+     * @returns {ModerateComment} ModerateComment
+     */
+    ModerateComment.fromObject = function fromObject(object) {
+        if (object instanceof $root.ModerateComment)
+            return object;
+        var message = new $root.ModerateComment();
+        if (object.commentId != null)
+            message.commentId = String(object.commentId);
+        if (object.rationale != null)
+            message.rationale = String(object.rationale);
+        return message;
+    };
+
+    /**
+     * Creates a plain object from a ModerateComment message. Also converts values to other types if specified.
+     * @function toObject
+     * @memberof ModerateComment
+     * @static
+     * @param {ModerateComment} message ModerateComment
+     * @param {$protobuf.IConversionOptions} [options] Conversion options
+     * @returns {Object.<string,*>} Plain object
+     */
+    ModerateComment.toObject = function toObject(message, options) {
+        if (!options)
+            options = {};
+        var object = {};
+        if (options.defaults) {
+            object.commentId = "";
+            object.rationale = "";
+        }
+        if (message.commentId != null && message.hasOwnProperty("commentId"))
+            object.commentId = message.commentId;
+        if (message.rationale != null && message.hasOwnProperty("rationale"))
+            object.rationale = message.rationale;
+        return object;
+    };
+
+    /**
+     * Converts this ModerateComment to JSON.
+     * @function toJSON
+     * @memberof ModerateComment
+     * @instance
+     * @returns {Object.<string,*>} JSON object
+     */
+    ModerateComment.prototype.toJSON = function toJSON() {
+        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
+    };
+
+    return ModerateComment;
+})();
+
+$root.BanOrUnbanMemberFromChannel = (function() {
+
+    /**
+     * Properties of a BanOrUnbanMemberFromChannel.
+     * @exports IBanOrUnbanMemberFromChannel
+     * @interface IBanOrUnbanMemberFromChannel
+     * @property {Long} memberId BanOrUnbanMemberFromChannel memberId
+     * @property {BanOrUnbanMemberFromChannel.Option} option BanOrUnbanMemberFromChannel option
+     */
+
+    /**
+     * Constructs a new BanOrUnbanMemberFromChannel.
+     * @exports BanOrUnbanMemberFromChannel
+     * @classdesc Represents a BanOrUnbanMemberFromChannel.
+     * @implements IBanOrUnbanMemberFromChannel
+     * @constructor
+     * @param {IBanOrUnbanMemberFromChannel=} [properties] Properties to set
+     */
+    function BanOrUnbanMemberFromChannel(properties) {
+        if (properties)
+            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
+                if (properties[keys[i]] != null)
+                    this[keys[i]] = properties[keys[i]];
+    }
+
+    /**
+     * BanOrUnbanMemberFromChannel memberId.
+     * @member {Long} memberId
+     * @memberof BanOrUnbanMemberFromChannel
+     * @instance
+     */
+    BanOrUnbanMemberFromChannel.prototype.memberId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
+
+    /**
+     * BanOrUnbanMemberFromChannel option.
+     * @member {BanOrUnbanMemberFromChannel.Option} option
+     * @memberof BanOrUnbanMemberFromChannel
+     * @instance
+     */
+    BanOrUnbanMemberFromChannel.prototype.option = 0;
+
+    /**
+     * Creates a new BanOrUnbanMemberFromChannel instance using the specified properties.
+     * @function create
+     * @memberof BanOrUnbanMemberFromChannel
+     * @static
+     * @param {IBanOrUnbanMemberFromChannel=} [properties] Properties to set
+     * @returns {BanOrUnbanMemberFromChannel} BanOrUnbanMemberFromChannel instance
+     */
+    BanOrUnbanMemberFromChannel.create = function create(properties) {
+        return new BanOrUnbanMemberFromChannel(properties);
+    };
+
+    /**
+     * Encodes the specified BanOrUnbanMemberFromChannel message. Does not implicitly {@link BanOrUnbanMemberFromChannel.verify|verify} messages.
+     * @function encode
+     * @memberof BanOrUnbanMemberFromChannel
+     * @static
+     * @param {IBanOrUnbanMemberFromChannel} message BanOrUnbanMemberFromChannel message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    BanOrUnbanMemberFromChannel.encode = function encode(message, writer) {
+        if (!writer)
+            writer = $Writer.create();
+        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.memberId);
+        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.option);
+        return writer;
+    };
+
+    /**
+     * Encodes the specified BanOrUnbanMemberFromChannel message, length delimited. Does not implicitly {@link BanOrUnbanMemberFromChannel.verify|verify} messages.
+     * @function encodeDelimited
+     * @memberof BanOrUnbanMemberFromChannel
+     * @static
+     * @param {IBanOrUnbanMemberFromChannel} message BanOrUnbanMemberFromChannel message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    BanOrUnbanMemberFromChannel.encodeDelimited = function encodeDelimited(message, writer) {
+        return this.encode(message, writer).ldelim();
+    };
+
+    /**
+     * Decodes a BanOrUnbanMemberFromChannel message from the specified reader or buffer.
+     * @function decode
+     * @memberof BanOrUnbanMemberFromChannel
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @param {number} [length] Message length if known beforehand
+     * @returns {BanOrUnbanMemberFromChannel} BanOrUnbanMemberFromChannel
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    BanOrUnbanMemberFromChannel.decode = function decode(reader, length) {
+        if (!(reader instanceof $Reader))
+            reader = $Reader.create(reader);
+        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BanOrUnbanMemberFromChannel();
+        while (reader.pos < end) {
+            var tag = reader.uint32();
+            switch (tag >>> 3) {
+            case 1:
+                message.memberId = reader.uint64();
+                break;
+            case 2:
+                message.option = reader.int32();
+                break;
+            default:
+                reader.skipType(tag & 7);
+                break;
+            }
+        }
+        if (!message.hasOwnProperty("memberId"))
+            throw $util.ProtocolError("missing required 'memberId'", { instance: message });
+        if (!message.hasOwnProperty("option"))
+            throw $util.ProtocolError("missing required 'option'", { instance: message });
+        return message;
+    };
+
+    /**
+     * Decodes a BanOrUnbanMemberFromChannel message from the specified reader or buffer, length delimited.
+     * @function decodeDelimited
+     * @memberof BanOrUnbanMemberFromChannel
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @returns {BanOrUnbanMemberFromChannel} BanOrUnbanMemberFromChannel
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    BanOrUnbanMemberFromChannel.decodeDelimited = function decodeDelimited(reader) {
+        if (!(reader instanceof $Reader))
+            reader = new $Reader(reader);
+        return this.decode(reader, reader.uint32());
+    };
+
+    /**
+     * Verifies a BanOrUnbanMemberFromChannel message.
+     * @function verify
+     * @memberof BanOrUnbanMemberFromChannel
+     * @static
+     * @param {Object.<string,*>} message Plain object to verify
+     * @returns {string|null} `null` if valid, otherwise the reason why it is not
+     */
+    BanOrUnbanMemberFromChannel.verify = function verify(message) {
+        if (typeof message !== "object" || message === null)
+            return "object expected";
+        if (!$util.isInteger(message.memberId) && !(message.memberId && $util.isInteger(message.memberId.low) && $util.isInteger(message.memberId.high)))
+            return "memberId: integer|Long expected";
+        switch (message.option) {
+        default:
+            return "option: enum value expected";
+        case 0:
+        case 1:
+            break;
+        }
+        return null;
+    };
+
+    /**
+     * Creates a BanOrUnbanMemberFromChannel message from a plain object. Also converts values to their respective internal types.
+     * @function fromObject
+     * @memberof BanOrUnbanMemberFromChannel
+     * @static
+     * @param {Object.<string,*>} object Plain object
+     * @returns {BanOrUnbanMemberFromChannel} BanOrUnbanMemberFromChannel
+     */
+    BanOrUnbanMemberFromChannel.fromObject = function fromObject(object) {
+        if (object instanceof $root.BanOrUnbanMemberFromChannel)
+            return object;
+        var message = new $root.BanOrUnbanMemberFromChannel();
+        if (object.memberId != null)
+            if ($util.Long)
+                (message.memberId = $util.Long.fromValue(object.memberId)).unsigned = true;
+            else if (typeof object.memberId === "string")
+                message.memberId = parseInt(object.memberId, 10);
+            else if (typeof object.memberId === "number")
+                message.memberId = object.memberId;
+            else if (typeof object.memberId === "object")
+                message.memberId = new $util.LongBits(object.memberId.low >>> 0, object.memberId.high >>> 0).toNumber(true);
+        switch (object.option) {
+        case "BAN":
+        case 0:
+            message.option = 0;
+            break;
+        case "UNBAN":
+        case 1:
+            message.option = 1;
+            break;
+        }
+        return message;
+    };
+
+    /**
+     * Creates a plain object from a BanOrUnbanMemberFromChannel message. Also converts values to other types if specified.
+     * @function toObject
+     * @memberof BanOrUnbanMemberFromChannel
+     * @static
+     * @param {BanOrUnbanMemberFromChannel} message BanOrUnbanMemberFromChannel
+     * @param {$protobuf.IConversionOptions} [options] Conversion options
+     * @returns {Object.<string,*>} Plain object
+     */
+    BanOrUnbanMemberFromChannel.toObject = function toObject(message, options) {
+        if (!options)
+            options = {};
+        var object = {};
+        if (options.defaults) {
+            if ($util.Long) {
+                var long = new $util.Long(0, 0, true);
+                object.memberId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
+            } else
+                object.memberId = options.longs === String ? "0" : 0;
+            object.option = options.enums === String ? "BAN" : 0;
+        }
+        if (message.memberId != null && message.hasOwnProperty("memberId"))
+            if (typeof message.memberId === "number")
+                object.memberId = options.longs === String ? String(message.memberId) : message.memberId;
+            else
+                object.memberId = options.longs === String ? $util.Long.prototype.toString.call(message.memberId) : options.longs === Number ? new $util.LongBits(message.memberId.low >>> 0, message.memberId.high >>> 0).toNumber(true) : message.memberId;
+        if (message.option != null && message.hasOwnProperty("option"))
+            object.option = options.enums === String ? $root.BanOrUnbanMemberFromChannel.Option[message.option] : message.option;
+        return object;
+    };
+
+    /**
+     * Converts this BanOrUnbanMemberFromChannel to JSON.
+     * @function toJSON
+     * @memberof BanOrUnbanMemberFromChannel
+     * @instance
+     * @returns {Object.<string,*>} JSON object
+     */
+    BanOrUnbanMemberFromChannel.prototype.toJSON = function toJSON() {
+        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
+    };
+
+    /**
+     * Option enum.
+     * @name BanOrUnbanMemberFromChannel.Option
+     * @enum {number}
+     * @property {number} BAN=0 BAN value
+     * @property {number} UNBAN=1 UNBAN value
+     */
+    BanOrUnbanMemberFromChannel.Option = (function() {
+        var valuesById = {}, values = Object.create(valuesById);
+        values[valuesById[0] = "BAN"] = 0;
+        values[valuesById[1] = "UNBAN"] = 1;
+        return values;
+    })();
+
+    return BanOrUnbanMemberFromChannel;
+})();
+
+$root.VideoReactionsPreference = (function() {
+
+    /**
+     * Properties of a VideoReactionsPreference.
+     * @exports IVideoReactionsPreference
+     * @interface IVideoReactionsPreference
+     * @property {Long} videoId VideoReactionsPreference videoId
+     * @property {VideoReactionsPreference.Option} option VideoReactionsPreference option
+     */
+
+    /**
+     * Constructs a new VideoReactionsPreference.
+     * @exports VideoReactionsPreference
+     * @classdesc Represents a VideoReactionsPreference.
+     * @implements IVideoReactionsPreference
+     * @constructor
+     * @param {IVideoReactionsPreference=} [properties] Properties to set
+     */
+    function VideoReactionsPreference(properties) {
+        if (properties)
+            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
+                if (properties[keys[i]] != null)
+                    this[keys[i]] = properties[keys[i]];
+    }
+
+    /**
+     * VideoReactionsPreference videoId.
+     * @member {Long} videoId
+     * @memberof VideoReactionsPreference
+     * @instance
+     */
+    VideoReactionsPreference.prototype.videoId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
+
+    /**
+     * VideoReactionsPreference option.
+     * @member {VideoReactionsPreference.Option} option
+     * @memberof VideoReactionsPreference
+     * @instance
+     */
+    VideoReactionsPreference.prototype.option = 0;
+
+    /**
+     * Creates a new VideoReactionsPreference instance using the specified properties.
+     * @function create
+     * @memberof VideoReactionsPreference
+     * @static
+     * @param {IVideoReactionsPreference=} [properties] Properties to set
+     * @returns {VideoReactionsPreference} VideoReactionsPreference instance
+     */
+    VideoReactionsPreference.create = function create(properties) {
+        return new VideoReactionsPreference(properties);
+    };
+
+    /**
+     * Encodes the specified VideoReactionsPreference message. Does not implicitly {@link VideoReactionsPreference.verify|verify} messages.
+     * @function encode
+     * @memberof VideoReactionsPreference
+     * @static
+     * @param {IVideoReactionsPreference} message VideoReactionsPreference message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    VideoReactionsPreference.encode = function encode(message, writer) {
+        if (!writer)
+            writer = $Writer.create();
+        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.videoId);
+        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.option);
+        return writer;
+    };
+
+    /**
+     * Encodes the specified VideoReactionsPreference message, length delimited. Does not implicitly {@link VideoReactionsPreference.verify|verify} messages.
+     * @function encodeDelimited
+     * @memberof VideoReactionsPreference
+     * @static
+     * @param {IVideoReactionsPreference} message VideoReactionsPreference message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    VideoReactionsPreference.encodeDelimited = function encodeDelimited(message, writer) {
+        return this.encode(message, writer).ldelim();
+    };
+
+    /**
+     * Decodes a VideoReactionsPreference message from the specified reader or buffer.
+     * @function decode
+     * @memberof VideoReactionsPreference
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @param {number} [length] Message length if known beforehand
+     * @returns {VideoReactionsPreference} VideoReactionsPreference
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    VideoReactionsPreference.decode = function decode(reader, length) {
+        if (!(reader instanceof $Reader))
+            reader = $Reader.create(reader);
+        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VideoReactionsPreference();
+        while (reader.pos < end) {
+            var tag = reader.uint32();
+            switch (tag >>> 3) {
+            case 1:
+                message.videoId = reader.uint64();
+                break;
+            case 2:
+                message.option = reader.int32();
+                break;
+            default:
+                reader.skipType(tag & 7);
+                break;
+            }
+        }
+        if (!message.hasOwnProperty("videoId"))
+            throw $util.ProtocolError("missing required 'videoId'", { instance: message });
+        if (!message.hasOwnProperty("option"))
+            throw $util.ProtocolError("missing required 'option'", { instance: message });
+        return message;
+    };
+
+    /**
+     * Decodes a VideoReactionsPreference message from the specified reader or buffer, length delimited.
+     * @function decodeDelimited
+     * @memberof VideoReactionsPreference
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @returns {VideoReactionsPreference} VideoReactionsPreference
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    VideoReactionsPreference.decodeDelimited = function decodeDelimited(reader) {
+        if (!(reader instanceof $Reader))
+            reader = new $Reader(reader);
+        return this.decode(reader, reader.uint32());
+    };
+
+    /**
+     * Verifies a VideoReactionsPreference message.
+     * @function verify
+     * @memberof VideoReactionsPreference
+     * @static
+     * @param {Object.<string,*>} message Plain object to verify
+     * @returns {string|null} `null` if valid, otherwise the reason why it is not
+     */
+    VideoReactionsPreference.verify = function verify(message) {
+        if (typeof message !== "object" || message === null)
+            return "object expected";
+        if (!$util.isInteger(message.videoId) && !(message.videoId && $util.isInteger(message.videoId.low) && $util.isInteger(message.videoId.high)))
+            return "videoId: integer|Long expected";
+        switch (message.option) {
+        default:
+            return "option: enum value expected";
+        case 0:
+        case 1:
+            break;
+        }
+        return null;
+    };
+
+    /**
+     * Creates a VideoReactionsPreference message from a plain object. Also converts values to their respective internal types.
+     * @function fromObject
+     * @memberof VideoReactionsPreference
+     * @static
+     * @param {Object.<string,*>} object Plain object
+     * @returns {VideoReactionsPreference} VideoReactionsPreference
+     */
+    VideoReactionsPreference.fromObject = function fromObject(object) {
+        if (object instanceof $root.VideoReactionsPreference)
+            return object;
+        var message = new $root.VideoReactionsPreference();
+        if (object.videoId != null)
+            if ($util.Long)
+                (message.videoId = $util.Long.fromValue(object.videoId)).unsigned = true;
+            else if (typeof object.videoId === "string")
+                message.videoId = parseInt(object.videoId, 10);
+            else if (typeof object.videoId === "number")
+                message.videoId = object.videoId;
+            else if (typeof object.videoId === "object")
+                message.videoId = new $util.LongBits(object.videoId.low >>> 0, object.videoId.high >>> 0).toNumber(true);
+        switch (object.option) {
+        case "ENABLE":
+        case 0:
+            message.option = 0;
+            break;
+        case "DISABLE":
+        case 1:
+            message.option = 1;
+            break;
+        }
+        return message;
+    };
+
+    /**
+     * Creates a plain object from a VideoReactionsPreference message. Also converts values to other types if specified.
+     * @function toObject
+     * @memberof VideoReactionsPreference
+     * @static
+     * @param {VideoReactionsPreference} message VideoReactionsPreference
+     * @param {$protobuf.IConversionOptions} [options] Conversion options
+     * @returns {Object.<string,*>} Plain object
+     */
+    VideoReactionsPreference.toObject = function toObject(message, options) {
+        if (!options)
+            options = {};
+        var object = {};
+        if (options.defaults) {
+            if ($util.Long) {
+                var long = new $util.Long(0, 0, true);
+                object.videoId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
+            } else
+                object.videoId = options.longs === String ? "0" : 0;
+            object.option = options.enums === String ? "ENABLE" : 0;
+        }
+        if (message.videoId != null && message.hasOwnProperty("videoId"))
+            if (typeof message.videoId === "number")
+                object.videoId = options.longs === String ? String(message.videoId) : message.videoId;
+            else
+                object.videoId = options.longs === String ? $util.Long.prototype.toString.call(message.videoId) : options.longs === Number ? new $util.LongBits(message.videoId.low >>> 0, message.videoId.high >>> 0).toNumber(true) : message.videoId;
+        if (message.option != null && message.hasOwnProperty("option"))
+            object.option = options.enums === String ? $root.VideoReactionsPreference.Option[message.option] : message.option;
+        return object;
+    };
+
+    /**
+     * Converts this VideoReactionsPreference to JSON.
+     * @function toJSON
+     * @memberof VideoReactionsPreference
+     * @instance
+     * @returns {Object.<string,*>} JSON object
+     */
+    VideoReactionsPreference.prototype.toJSON = function toJSON() {
+        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
+    };
+
+    /**
+     * Option enum.
+     * @name VideoReactionsPreference.Option
+     * @enum {number}
+     * @property {number} ENABLE=0 ENABLE value
+     * @property {number} DISABLE=1 DISABLE value
+     */
+    VideoReactionsPreference.Option = (function() {
+        var valuesById = {}, values = Object.create(valuesById);
+        values[valuesById[0] = "ENABLE"] = 0;
+        values[valuesById[1] = "DISABLE"] = 1;
+        return values;
+    })();
+
+    return VideoReactionsPreference;
+})();
+
+$root.MemberRemarked = (function() {
+
+    /**
+     * Properties of a MemberRemarked.
+     * @exports IMemberRemarked
+     * @interface IMemberRemarked
+     * @property {IReactVideo|null} [reactVideo] MemberRemarked reactVideo
+     * @property {IReactComment|null} [reactComment] MemberRemarked reactComment
+     * @property {ICreateComment|null} [createComment] MemberRemarked createComment
+     * @property {IEditComment|null} [editComment] MemberRemarked editComment
+     * @property {IDeleteComment|null} [deleteComment] MemberRemarked deleteComment
+     */
+
+    /**
+     * Constructs a new MemberRemarked.
+     * @exports MemberRemarked
+     * @classdesc Represents a MemberRemarked.
+     * @implements IMemberRemarked
+     * @constructor
+     * @param {IMemberRemarked=} [properties] Properties to set
+     */
+    function MemberRemarked(properties) {
+        if (properties)
+            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
+                if (properties[keys[i]] != null)
+                    this[keys[i]] = properties[keys[i]];
+    }
+
+    /**
+     * MemberRemarked reactVideo.
+     * @member {IReactVideo|null|undefined} reactVideo
+     * @memberof MemberRemarked
+     * @instance
+     */
+    MemberRemarked.prototype.reactVideo = null;
+
+    /**
+     * MemberRemarked reactComment.
+     * @member {IReactComment|null|undefined} reactComment
+     * @memberof MemberRemarked
+     * @instance
+     */
+    MemberRemarked.prototype.reactComment = null;
+
+    /**
+     * MemberRemarked createComment.
+     * @member {ICreateComment|null|undefined} createComment
+     * @memberof MemberRemarked
+     * @instance
+     */
+    MemberRemarked.prototype.createComment = null;
+
+    /**
+     * MemberRemarked editComment.
+     * @member {IEditComment|null|undefined} editComment
+     * @memberof MemberRemarked
+     * @instance
+     */
+    MemberRemarked.prototype.editComment = null;
+
+    /**
+     * MemberRemarked deleteComment.
+     * @member {IDeleteComment|null|undefined} deleteComment
+     * @memberof MemberRemarked
+     * @instance
+     */
+    MemberRemarked.prototype.deleteComment = null;
+
+    // OneOf field names bound to virtual getters and setters
+    var $oneOfFields;
+
+    /**
+     * MemberRemarked memberRemarked.
+     * @member {"reactVideo"|"reactComment"|"createComment"|"editComment"|"deleteComment"|undefined} memberRemarked
+     * @memberof MemberRemarked
+     * @instance
+     */
+    Object.defineProperty(MemberRemarked.prototype, "memberRemarked", {
+        get: $util.oneOfGetter($oneOfFields = ["reactVideo", "reactComment", "createComment", "editComment", "deleteComment"]),
+        set: $util.oneOfSetter($oneOfFields)
+    });
+
+    /**
+     * Creates a new MemberRemarked instance using the specified properties.
+     * @function create
+     * @memberof MemberRemarked
+     * @static
+     * @param {IMemberRemarked=} [properties] Properties to set
+     * @returns {MemberRemarked} MemberRemarked instance
+     */
+    MemberRemarked.create = function create(properties) {
+        return new MemberRemarked(properties);
+    };
+
+    /**
+     * Encodes the specified MemberRemarked message. Does not implicitly {@link MemberRemarked.verify|verify} messages.
+     * @function encode
+     * @memberof MemberRemarked
+     * @static
+     * @param {IMemberRemarked} message MemberRemarked message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    MemberRemarked.encode = function encode(message, writer) {
+        if (!writer)
+            writer = $Writer.create();
+        if (message.reactVideo != null && Object.hasOwnProperty.call(message, "reactVideo"))
+            $root.ReactVideo.encode(message.reactVideo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
+        if (message.reactComment != null && Object.hasOwnProperty.call(message, "reactComment"))
+            $root.ReactComment.encode(message.reactComment, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
+        if (message.createComment != null && Object.hasOwnProperty.call(message, "createComment"))
+            $root.CreateComment.encode(message.createComment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
+        if (message.editComment != null && Object.hasOwnProperty.call(message, "editComment"))
+            $root.EditComment.encode(message.editComment, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
+        if (message.deleteComment != null && Object.hasOwnProperty.call(message, "deleteComment"))
+            $root.DeleteComment.encode(message.deleteComment, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
+        return writer;
+    };
+
+    /**
+     * Encodes the specified MemberRemarked message, length delimited. Does not implicitly {@link MemberRemarked.verify|verify} messages.
+     * @function encodeDelimited
+     * @memberof MemberRemarked
+     * @static
+     * @param {IMemberRemarked} message MemberRemarked message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    MemberRemarked.encodeDelimited = function encodeDelimited(message, writer) {
+        return this.encode(message, writer).ldelim();
+    };
+
+    /**
+     * Decodes a MemberRemarked message from the specified reader or buffer.
+     * @function decode
+     * @memberof MemberRemarked
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @param {number} [length] Message length if known beforehand
+     * @returns {MemberRemarked} MemberRemarked
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    MemberRemarked.decode = function decode(reader, length) {
+        if (!(reader instanceof $Reader))
+            reader = $Reader.create(reader);
+        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MemberRemarked();
+        while (reader.pos < end) {
+            var tag = reader.uint32();
+            switch (tag >>> 3) {
+            case 1:
+                message.reactVideo = $root.ReactVideo.decode(reader, reader.uint32());
+                break;
+            case 2:
+                message.reactComment = $root.ReactComment.decode(reader, reader.uint32());
+                break;
+            case 3:
+                message.createComment = $root.CreateComment.decode(reader, reader.uint32());
+                break;
+            case 4:
+                message.editComment = $root.EditComment.decode(reader, reader.uint32());
+                break;
+            case 5:
+                message.deleteComment = $root.DeleteComment.decode(reader, reader.uint32());
+                break;
+            default:
+                reader.skipType(tag & 7);
+                break;
+            }
+        }
+        return message;
+    };
+
+    /**
+     * Decodes a MemberRemarked message from the specified reader or buffer, length delimited.
+     * @function decodeDelimited
+     * @memberof MemberRemarked
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @returns {MemberRemarked} MemberRemarked
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    MemberRemarked.decodeDelimited = function decodeDelimited(reader) {
+        if (!(reader instanceof $Reader))
+            reader = new $Reader(reader);
+        return this.decode(reader, reader.uint32());
+    };
+
+    /**
+     * Verifies a MemberRemarked message.
+     * @function verify
+     * @memberof MemberRemarked
+     * @static
+     * @param {Object.<string,*>} message Plain object to verify
+     * @returns {string|null} `null` if valid, otherwise the reason why it is not
+     */
+    MemberRemarked.verify = function verify(message) {
+        if (typeof message !== "object" || message === null)
+            return "object expected";
+        var properties = {};
+        if (message.reactVideo != null && message.hasOwnProperty("reactVideo")) {
+            properties.memberRemarked = 1;
+            {
+                var error = $root.ReactVideo.verify(message.reactVideo);
+                if (error)
+                    return "reactVideo." + error;
+            }
+        }
+        if (message.reactComment != null && message.hasOwnProperty("reactComment")) {
+            if (properties.memberRemarked === 1)
+                return "memberRemarked: multiple values";
+            properties.memberRemarked = 1;
+            {
+                var error = $root.ReactComment.verify(message.reactComment);
+                if (error)
+                    return "reactComment." + error;
+            }
+        }
+        if (message.createComment != null && message.hasOwnProperty("createComment")) {
+            if (properties.memberRemarked === 1)
+                return "memberRemarked: multiple values";
+            properties.memberRemarked = 1;
+            {
+                var error = $root.CreateComment.verify(message.createComment);
+                if (error)
+                    return "createComment." + error;
+            }
+        }
+        if (message.editComment != null && message.hasOwnProperty("editComment")) {
+            if (properties.memberRemarked === 1)
+                return "memberRemarked: multiple values";
+            properties.memberRemarked = 1;
+            {
+                var error = $root.EditComment.verify(message.editComment);
+                if (error)
+                    return "editComment." + error;
+            }
+        }
+        if (message.deleteComment != null && message.hasOwnProperty("deleteComment")) {
+            if (properties.memberRemarked === 1)
+                return "memberRemarked: multiple values";
+            properties.memberRemarked = 1;
+            {
+                var error = $root.DeleteComment.verify(message.deleteComment);
+                if (error)
+                    return "deleteComment." + error;
+            }
+        }
+        return null;
+    };
+
+    /**
+     * Creates a MemberRemarked message from a plain object. Also converts values to their respective internal types.
+     * @function fromObject
+     * @memberof MemberRemarked
+     * @static
+     * @param {Object.<string,*>} object Plain object
+     * @returns {MemberRemarked} MemberRemarked
+     */
+    MemberRemarked.fromObject = function fromObject(object) {
+        if (object instanceof $root.MemberRemarked)
+            return object;
+        var message = new $root.MemberRemarked();
+        if (object.reactVideo != null) {
+            if (typeof object.reactVideo !== "object")
+                throw TypeError(".MemberRemarked.reactVideo: object expected");
+            message.reactVideo = $root.ReactVideo.fromObject(object.reactVideo);
+        }
+        if (object.reactComment != null) {
+            if (typeof object.reactComment !== "object")
+                throw TypeError(".MemberRemarked.reactComment: object expected");
+            message.reactComment = $root.ReactComment.fromObject(object.reactComment);
+        }
+        if (object.createComment != null) {
+            if (typeof object.createComment !== "object")
+                throw TypeError(".MemberRemarked.createComment: object expected");
+            message.createComment = $root.CreateComment.fromObject(object.createComment);
+        }
+        if (object.editComment != null) {
+            if (typeof object.editComment !== "object")
+                throw TypeError(".MemberRemarked.editComment: object expected");
+            message.editComment = $root.EditComment.fromObject(object.editComment);
+        }
+        if (object.deleteComment != null) {
+            if (typeof object.deleteComment !== "object")
+                throw TypeError(".MemberRemarked.deleteComment: object expected");
+            message.deleteComment = $root.DeleteComment.fromObject(object.deleteComment);
+        }
+        return message;
+    };
+
+    /**
+     * Creates a plain object from a MemberRemarked message. Also converts values to other types if specified.
+     * @function toObject
+     * @memberof MemberRemarked
+     * @static
+     * @param {MemberRemarked} message MemberRemarked
+     * @param {$protobuf.IConversionOptions} [options] Conversion options
+     * @returns {Object.<string,*>} Plain object
+     */
+    MemberRemarked.toObject = function toObject(message, options) {
+        if (!options)
+            options = {};
+        var object = {};
+        if (message.reactVideo != null && message.hasOwnProperty("reactVideo")) {
+            object.reactVideo = $root.ReactVideo.toObject(message.reactVideo, options);
+            if (options.oneofs)
+                object.memberRemarked = "reactVideo";
+        }
+        if (message.reactComment != null && message.hasOwnProperty("reactComment")) {
+            object.reactComment = $root.ReactComment.toObject(message.reactComment, options);
+            if (options.oneofs)
+                object.memberRemarked = "reactComment";
+        }
+        if (message.createComment != null && message.hasOwnProperty("createComment")) {
+            object.createComment = $root.CreateComment.toObject(message.createComment, options);
+            if (options.oneofs)
+                object.memberRemarked = "createComment";
+        }
+        if (message.editComment != null && message.hasOwnProperty("editComment")) {
+            object.editComment = $root.EditComment.toObject(message.editComment, options);
+            if (options.oneofs)
+                object.memberRemarked = "editComment";
+        }
+        if (message.deleteComment != null && message.hasOwnProperty("deleteComment")) {
+            object.deleteComment = $root.DeleteComment.toObject(message.deleteComment, options);
+            if (options.oneofs)
+                object.memberRemarked = "deleteComment";
+        }
+        return object;
+    };
+
+    /**
+     * Converts this MemberRemarked to JSON.
+     * @function toJSON
+     * @memberof MemberRemarked
+     * @instance
+     * @returns {Object.<string,*>} JSON object
+     */
+    MemberRemarked.prototype.toJSON = function toJSON() {
+        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
+    };
+
+    return MemberRemarked;
+})();
+
+$root.ChannelModeratorRemarked = (function() {
+
+    /**
+     * Properties of a ChannelModeratorRemarked.
+     * @exports IChannelModeratorRemarked
+     * @interface IChannelModeratorRemarked
+     * @property {IModerateComment|null} [moderateComment] ChannelModeratorRemarked moderateComment
+     */
+
+    /**
+     * Constructs a new ChannelModeratorRemarked.
+     * @exports ChannelModeratorRemarked
+     * @classdesc Represents a ChannelModeratorRemarked.
+     * @implements IChannelModeratorRemarked
+     * @constructor
+     * @param {IChannelModeratorRemarked=} [properties] Properties to set
+     */
+    function ChannelModeratorRemarked(properties) {
+        if (properties)
+            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
+                if (properties[keys[i]] != null)
+                    this[keys[i]] = properties[keys[i]];
+    }
+
+    /**
+     * ChannelModeratorRemarked moderateComment.
+     * @member {IModerateComment|null|undefined} moderateComment
+     * @memberof ChannelModeratorRemarked
+     * @instance
+     */
+    ChannelModeratorRemarked.prototype.moderateComment = null;
+
+    // OneOf field names bound to virtual getters and setters
+    var $oneOfFields;
+
+    /**
+     * ChannelModeratorRemarked channelModeratorRemarked.
+     * @member {"moderateComment"|undefined} channelModeratorRemarked
+     * @memberof ChannelModeratorRemarked
+     * @instance
+     */
+    Object.defineProperty(ChannelModeratorRemarked.prototype, "channelModeratorRemarked", {
+        get: $util.oneOfGetter($oneOfFields = ["moderateComment"]),
+        set: $util.oneOfSetter($oneOfFields)
+    });
+
+    /**
+     * Creates a new ChannelModeratorRemarked instance using the specified properties.
+     * @function create
+     * @memberof ChannelModeratorRemarked
+     * @static
+     * @param {IChannelModeratorRemarked=} [properties] Properties to set
+     * @returns {ChannelModeratorRemarked} ChannelModeratorRemarked instance
+     */
+    ChannelModeratorRemarked.create = function create(properties) {
+        return new ChannelModeratorRemarked(properties);
+    };
+
+    /**
+     * Encodes the specified ChannelModeratorRemarked message. Does not implicitly {@link ChannelModeratorRemarked.verify|verify} messages.
+     * @function encode
+     * @memberof ChannelModeratorRemarked
+     * @static
+     * @param {IChannelModeratorRemarked} message ChannelModeratorRemarked message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    ChannelModeratorRemarked.encode = function encode(message, writer) {
+        if (!writer)
+            writer = $Writer.create();
+        if (message.moderateComment != null && Object.hasOwnProperty.call(message, "moderateComment"))
+            $root.ModerateComment.encode(message.moderateComment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
+        return writer;
+    };
+
+    /**
+     * Encodes the specified ChannelModeratorRemarked message, length delimited. Does not implicitly {@link ChannelModeratorRemarked.verify|verify} messages.
+     * @function encodeDelimited
+     * @memberof ChannelModeratorRemarked
+     * @static
+     * @param {IChannelModeratorRemarked} message ChannelModeratorRemarked message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    ChannelModeratorRemarked.encodeDelimited = function encodeDelimited(message, writer) {
+        return this.encode(message, writer).ldelim();
+    };
+
+    /**
+     * Decodes a ChannelModeratorRemarked message from the specified reader or buffer.
+     * @function decode
+     * @memberof ChannelModeratorRemarked
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @param {number} [length] Message length if known beforehand
+     * @returns {ChannelModeratorRemarked} ChannelModeratorRemarked
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    ChannelModeratorRemarked.decode = function decode(reader, length) {
+        if (!(reader instanceof $Reader))
+            reader = $Reader.create(reader);
+        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ChannelModeratorRemarked();
+        while (reader.pos < end) {
+            var tag = reader.uint32();
+            switch (tag >>> 3) {
+            case 1:
+                message.moderateComment = $root.ModerateComment.decode(reader, reader.uint32());
+                break;
+            default:
+                reader.skipType(tag & 7);
+                break;
+            }
+        }
+        return message;
+    };
+
+    /**
+     * Decodes a ChannelModeratorRemarked message from the specified reader or buffer, length delimited.
+     * @function decodeDelimited
+     * @memberof ChannelModeratorRemarked
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @returns {ChannelModeratorRemarked} ChannelModeratorRemarked
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    ChannelModeratorRemarked.decodeDelimited = function decodeDelimited(reader) {
+        if (!(reader instanceof $Reader))
+            reader = new $Reader(reader);
+        return this.decode(reader, reader.uint32());
+    };
+
+    /**
+     * Verifies a ChannelModeratorRemarked message.
+     * @function verify
+     * @memberof ChannelModeratorRemarked
+     * @static
+     * @param {Object.<string,*>} message Plain object to verify
+     * @returns {string|null} `null` if valid, otherwise the reason why it is not
+     */
+    ChannelModeratorRemarked.verify = function verify(message) {
+        if (typeof message !== "object" || message === null)
+            return "object expected";
+        var properties = {};
+        if (message.moderateComment != null && message.hasOwnProperty("moderateComment")) {
+            properties.channelModeratorRemarked = 1;
+            {
+                var error = $root.ModerateComment.verify(message.moderateComment);
+                if (error)
+                    return "moderateComment." + error;
+            }
+        }
+        return null;
+    };
+
+    /**
+     * Creates a ChannelModeratorRemarked message from a plain object. Also converts values to their respective internal types.
+     * @function fromObject
+     * @memberof ChannelModeratorRemarked
+     * @static
+     * @param {Object.<string,*>} object Plain object
+     * @returns {ChannelModeratorRemarked} ChannelModeratorRemarked
+     */
+    ChannelModeratorRemarked.fromObject = function fromObject(object) {
+        if (object instanceof $root.ChannelModeratorRemarked)
+            return object;
+        var message = new $root.ChannelModeratorRemarked();
+        if (object.moderateComment != null) {
+            if (typeof object.moderateComment !== "object")
+                throw TypeError(".ChannelModeratorRemarked.moderateComment: object expected");
+            message.moderateComment = $root.ModerateComment.fromObject(object.moderateComment);
+        }
+        return message;
+    };
+
+    /**
+     * Creates a plain object from a ChannelModeratorRemarked message. Also converts values to other types if specified.
+     * @function toObject
+     * @memberof ChannelModeratorRemarked
+     * @static
+     * @param {ChannelModeratorRemarked} message ChannelModeratorRemarked
+     * @param {$protobuf.IConversionOptions} [options] Conversion options
+     * @returns {Object.<string,*>} Plain object
+     */
+    ChannelModeratorRemarked.toObject = function toObject(message, options) {
+        if (!options)
+            options = {};
+        var object = {};
+        if (message.moderateComment != null && message.hasOwnProperty("moderateComment")) {
+            object.moderateComment = $root.ModerateComment.toObject(message.moderateComment, options);
+            if (options.oneofs)
+                object.channelModeratorRemarked = "moderateComment";
+        }
+        return object;
+    };
+
+    /**
+     * Converts this ChannelModeratorRemarked to JSON.
+     * @function toJSON
+     * @memberof ChannelModeratorRemarked
+     * @instance
+     * @returns {Object.<string,*>} JSON object
+     */
+    ChannelModeratorRemarked.prototype.toJSON = function toJSON() {
+        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
+    };
+
+    return ChannelModeratorRemarked;
+})();
+
+$root.ChannelOwnerRemarked = (function() {
+
+    /**
+     * Properties of a ChannelOwnerRemarked.
+     * @exports IChannelOwnerRemarked
+     * @interface IChannelOwnerRemarked
+     * @property {IPinOrUnpinComment|null} [pinOrUnpinComment] ChannelOwnerRemarked pinOrUnpinComment
+     * @property {IBanOrUnbanMemberFromChannel|null} [banOrUnbanMemberFromChannel] ChannelOwnerRemarked banOrUnbanMemberFromChannel
+     * @property {IVideoReactionsPreference|null} [videoReactionsPreference] ChannelOwnerRemarked videoReactionsPreference
+     * @property {IModerateComment|null} [moderateComment] ChannelOwnerRemarked moderateComment
+     */
+
+    /**
+     * Constructs a new ChannelOwnerRemarked.
+     * @exports ChannelOwnerRemarked
+     * @classdesc Represents a ChannelOwnerRemarked.
+     * @implements IChannelOwnerRemarked
+     * @constructor
+     * @param {IChannelOwnerRemarked=} [properties] Properties to set
+     */
+    function ChannelOwnerRemarked(properties) {
+        if (properties)
+            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
+                if (properties[keys[i]] != null)
+                    this[keys[i]] = properties[keys[i]];
+    }
+
+    /**
+     * ChannelOwnerRemarked pinOrUnpinComment.
+     * @member {IPinOrUnpinComment|null|undefined} pinOrUnpinComment
+     * @memberof ChannelOwnerRemarked
+     * @instance
+     */
+    ChannelOwnerRemarked.prototype.pinOrUnpinComment = null;
+
+    /**
+     * ChannelOwnerRemarked banOrUnbanMemberFromChannel.
+     * @member {IBanOrUnbanMemberFromChannel|null|undefined} banOrUnbanMemberFromChannel
+     * @memberof ChannelOwnerRemarked
+     * @instance
+     */
+    ChannelOwnerRemarked.prototype.banOrUnbanMemberFromChannel = null;
+
+    /**
+     * ChannelOwnerRemarked videoReactionsPreference.
+     * @member {IVideoReactionsPreference|null|undefined} videoReactionsPreference
+     * @memberof ChannelOwnerRemarked
+     * @instance
+     */
+    ChannelOwnerRemarked.prototype.videoReactionsPreference = null;
+
+    /**
+     * ChannelOwnerRemarked moderateComment.
+     * @member {IModerateComment|null|undefined} moderateComment
+     * @memberof ChannelOwnerRemarked
+     * @instance
+     */
+    ChannelOwnerRemarked.prototype.moderateComment = null;
+
+    // OneOf field names bound to virtual getters and setters
+    var $oneOfFields;
+
+    /**
+     * ChannelOwnerRemarked channelOwnerRemarked.
+     * @member {"pinOrUnpinComment"|"banOrUnbanMemberFromChannel"|"videoReactionsPreference"|"moderateComment"|undefined} channelOwnerRemarked
+     * @memberof ChannelOwnerRemarked
+     * @instance
+     */
+    Object.defineProperty(ChannelOwnerRemarked.prototype, "channelOwnerRemarked", {
+        get: $util.oneOfGetter($oneOfFields = ["pinOrUnpinComment", "banOrUnbanMemberFromChannel", "videoReactionsPreference", "moderateComment"]),
+        set: $util.oneOfSetter($oneOfFields)
+    });
+
+    /**
+     * Creates a new ChannelOwnerRemarked instance using the specified properties.
+     * @function create
+     * @memberof ChannelOwnerRemarked
+     * @static
+     * @param {IChannelOwnerRemarked=} [properties] Properties to set
+     * @returns {ChannelOwnerRemarked} ChannelOwnerRemarked instance
+     */
+    ChannelOwnerRemarked.create = function create(properties) {
+        return new ChannelOwnerRemarked(properties);
+    };
+
+    /**
+     * Encodes the specified ChannelOwnerRemarked message. Does not implicitly {@link ChannelOwnerRemarked.verify|verify} messages.
+     * @function encode
+     * @memberof ChannelOwnerRemarked
+     * @static
+     * @param {IChannelOwnerRemarked} message ChannelOwnerRemarked message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    ChannelOwnerRemarked.encode = function encode(message, writer) {
+        if (!writer)
+            writer = $Writer.create();
+        if (message.pinOrUnpinComment != null && Object.hasOwnProperty.call(message, "pinOrUnpinComment"))
+            $root.PinOrUnpinComment.encode(message.pinOrUnpinComment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
+        if (message.banOrUnbanMemberFromChannel != null && Object.hasOwnProperty.call(message, "banOrUnbanMemberFromChannel"))
+            $root.BanOrUnbanMemberFromChannel.encode(message.banOrUnbanMemberFromChannel, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
+        if (message.videoReactionsPreference != null && Object.hasOwnProperty.call(message, "videoReactionsPreference"))
+            $root.VideoReactionsPreference.encode(message.videoReactionsPreference, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
+        if (message.moderateComment != null && Object.hasOwnProperty.call(message, "moderateComment"))
+            $root.ModerateComment.encode(message.moderateComment, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
+        return writer;
+    };
+
+    /**
+     * Encodes the specified ChannelOwnerRemarked message, length delimited. Does not implicitly {@link ChannelOwnerRemarked.verify|verify} messages.
+     * @function encodeDelimited
+     * @memberof ChannelOwnerRemarked
+     * @static
+     * @param {IChannelOwnerRemarked} message ChannelOwnerRemarked message or plain object to encode
+     * @param {$protobuf.Writer} [writer] Writer to encode to
+     * @returns {$protobuf.Writer} Writer
+     */
+    ChannelOwnerRemarked.encodeDelimited = function encodeDelimited(message, writer) {
+        return this.encode(message, writer).ldelim();
+    };
+
+    /**
+     * Decodes a ChannelOwnerRemarked message from the specified reader or buffer.
+     * @function decode
+     * @memberof ChannelOwnerRemarked
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @param {number} [length] Message length if known beforehand
+     * @returns {ChannelOwnerRemarked} ChannelOwnerRemarked
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    ChannelOwnerRemarked.decode = function decode(reader, length) {
+        if (!(reader instanceof $Reader))
+            reader = $Reader.create(reader);
+        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ChannelOwnerRemarked();
+        while (reader.pos < end) {
+            var tag = reader.uint32();
+            switch (tag >>> 3) {
+            case 1:
+                message.pinOrUnpinComment = $root.PinOrUnpinComment.decode(reader, reader.uint32());
+                break;
+            case 2:
+                message.banOrUnbanMemberFromChannel = $root.BanOrUnbanMemberFromChannel.decode(reader, reader.uint32());
+                break;
+            case 3:
+                message.videoReactionsPreference = $root.VideoReactionsPreference.decode(reader, reader.uint32());
+                break;
+            case 5:
+                message.moderateComment = $root.ModerateComment.decode(reader, reader.uint32());
+                break;
+            default:
+                reader.skipType(tag & 7);
+                break;
+            }
+        }
+        return message;
+    };
+
+    /**
+     * Decodes a ChannelOwnerRemarked message from the specified reader or buffer, length delimited.
+     * @function decodeDelimited
+     * @memberof ChannelOwnerRemarked
+     * @static
+     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
+     * @returns {ChannelOwnerRemarked} ChannelOwnerRemarked
+     * @throws {Error} If the payload is not a reader or valid buffer
+     * @throws {$protobuf.util.ProtocolError} If required fields are missing
+     */
+    ChannelOwnerRemarked.decodeDelimited = function decodeDelimited(reader) {
+        if (!(reader instanceof $Reader))
+            reader = new $Reader(reader);
+        return this.decode(reader, reader.uint32());
+    };
+
+    /**
+     * Verifies a ChannelOwnerRemarked message.
+     * @function verify
+     * @memberof ChannelOwnerRemarked
+     * @static
+     * @param {Object.<string,*>} message Plain object to verify
+     * @returns {string|null} `null` if valid, otherwise the reason why it is not
+     */
+    ChannelOwnerRemarked.verify = function verify(message) {
+        if (typeof message !== "object" || message === null)
+            return "object expected";
+        var properties = {};
+        if (message.pinOrUnpinComment != null && message.hasOwnProperty("pinOrUnpinComment")) {
+            properties.channelOwnerRemarked = 1;
+            {
+                var error = $root.PinOrUnpinComment.verify(message.pinOrUnpinComment);
+                if (error)
+                    return "pinOrUnpinComment." + error;
+            }
+        }
+        if (message.banOrUnbanMemberFromChannel != null && message.hasOwnProperty("banOrUnbanMemberFromChannel")) {
+            if (properties.channelOwnerRemarked === 1)
+                return "channelOwnerRemarked: multiple values";
+            properties.channelOwnerRemarked = 1;
+            {
+                var error = $root.BanOrUnbanMemberFromChannel.verify(message.banOrUnbanMemberFromChannel);
+                if (error)
+                    return "banOrUnbanMemberFromChannel." + error;
+            }
+        }
+        if (message.videoReactionsPreference != null && message.hasOwnProperty("videoReactionsPreference")) {
+            if (properties.channelOwnerRemarked === 1)
+                return "channelOwnerRemarked: multiple values";
+            properties.channelOwnerRemarked = 1;
+            {
+                var error = $root.VideoReactionsPreference.verify(message.videoReactionsPreference);
+                if (error)
+                    return "videoReactionsPreference." + error;
+            }
+        }
+        if (message.moderateComment != null && message.hasOwnProperty("moderateComment")) {
+            if (properties.channelOwnerRemarked === 1)
+                return "channelOwnerRemarked: multiple values";
+            properties.channelOwnerRemarked = 1;
+            {
+                var error = $root.ModerateComment.verify(message.moderateComment);
+                if (error)
+                    return "moderateComment." + error;
+            }
+        }
+        return null;
+    };
+
+    /**
+     * Creates a ChannelOwnerRemarked message from a plain object. Also converts values to their respective internal types.
+     * @function fromObject
+     * @memberof ChannelOwnerRemarked
+     * @static
+     * @param {Object.<string,*>} object Plain object
+     * @returns {ChannelOwnerRemarked} ChannelOwnerRemarked
+     */
+    ChannelOwnerRemarked.fromObject = function fromObject(object) {
+        if (object instanceof $root.ChannelOwnerRemarked)
+            return object;
+        var message = new $root.ChannelOwnerRemarked();
+        if (object.pinOrUnpinComment != null) {
+            if (typeof object.pinOrUnpinComment !== "object")
+                throw TypeError(".ChannelOwnerRemarked.pinOrUnpinComment: object expected");
+            message.pinOrUnpinComment = $root.PinOrUnpinComment.fromObject(object.pinOrUnpinComment);
+        }
+        if (object.banOrUnbanMemberFromChannel != null) {
+            if (typeof object.banOrUnbanMemberFromChannel !== "object")
+                throw TypeError(".ChannelOwnerRemarked.banOrUnbanMemberFromChannel: object expected");
+            message.banOrUnbanMemberFromChannel = $root.BanOrUnbanMemberFromChannel.fromObject(object.banOrUnbanMemberFromChannel);
+        }
+        if (object.videoReactionsPreference != null) {
+            if (typeof object.videoReactionsPreference !== "object")
+                throw TypeError(".ChannelOwnerRemarked.videoReactionsPreference: object expected");
+            message.videoReactionsPreference = $root.VideoReactionsPreference.fromObject(object.videoReactionsPreference);
+        }
+        if (object.moderateComment != null) {
+            if (typeof object.moderateComment !== "object")
+                throw TypeError(".ChannelOwnerRemarked.moderateComment: object expected");
+            message.moderateComment = $root.ModerateComment.fromObject(object.moderateComment);
+        }
+        return message;
+    };
+
+    /**
+     * Creates a plain object from a ChannelOwnerRemarked message. Also converts values to other types if specified.
+     * @function toObject
+     * @memberof ChannelOwnerRemarked
+     * @static
+     * @param {ChannelOwnerRemarked} message ChannelOwnerRemarked
+     * @param {$protobuf.IConversionOptions} [options] Conversion options
+     * @returns {Object.<string,*>} Plain object
+     */
+    ChannelOwnerRemarked.toObject = function toObject(message, options) {
+        if (!options)
+            options = {};
+        var object = {};
+        if (message.pinOrUnpinComment != null && message.hasOwnProperty("pinOrUnpinComment")) {
+            object.pinOrUnpinComment = $root.PinOrUnpinComment.toObject(message.pinOrUnpinComment, options);
+            if (options.oneofs)
+                object.channelOwnerRemarked = "pinOrUnpinComment";
+        }
+        if (message.banOrUnbanMemberFromChannel != null && message.hasOwnProperty("banOrUnbanMemberFromChannel")) {
+            object.banOrUnbanMemberFromChannel = $root.BanOrUnbanMemberFromChannel.toObject(message.banOrUnbanMemberFromChannel, options);
+            if (options.oneofs)
+                object.channelOwnerRemarked = "banOrUnbanMemberFromChannel";
+        }
+        if (message.videoReactionsPreference != null && message.hasOwnProperty("videoReactionsPreference")) {
+            object.videoReactionsPreference = $root.VideoReactionsPreference.toObject(message.videoReactionsPreference, options);
+            if (options.oneofs)
+                object.channelOwnerRemarked = "videoReactionsPreference";
+        }
+        if (message.moderateComment != null && message.hasOwnProperty("moderateComment")) {
+            object.moderateComment = $root.ModerateComment.toObject(message.moderateComment, options);
+            if (options.oneofs)
+                object.channelOwnerRemarked = "moderateComment";
+        }
+        return object;
+    };
+
+    /**
+     * Converts this ChannelOwnerRemarked to JSON.
+     * @function toJSON
+     * @memberof ChannelOwnerRemarked
+     * @instance
+     * @returns {Object.<string,*>} JSON object
+     */
+    ChannelOwnerRemarked.prototype.toJSON = function toJSON() {
+        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
+    };
+
+    return ChannelOwnerRemarked;
+})();
+
 $root.PersonMetadata = (function() {
 
     /**
@@ -5728,6 +8688,7 @@ $root.VideoMetadata = (function() {
      * @property {boolean|null} [isExplicit] VideoMetadata isExplicit
      * @property {Array.<Long>|null} [persons] VideoMetadata persons
      * @property {Long|null} [category] VideoMetadata category
+     * @property {boolean|null} [enableComments] VideoMetadata enableComments
      */
 
     /**
@@ -5874,6 +8835,14 @@ $root.VideoMetadata = (function() {
      */
     VideoMetadata.prototype.category = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
 
+    /**
+     * VideoMetadata enableComments.
+     * @member {boolean} enableComments
+     * @memberof VideoMetadata
+     * @instance
+     */
+    VideoMetadata.prototype.enableComments = false;
+
     /**
      * Creates a new VideoMetadata instance using the specified properties.
      * @function create
@@ -5934,6 +8903,8 @@ $root.VideoMetadata = (function() {
         }
         if (message.category != null && Object.hasOwnProperty.call(message, "category"))
             writer.uint32(/* id 16, wireType 0 =*/128).uint64(message.category);
+        if (message.enableComments != null && Object.hasOwnProperty.call(message, "enableComments"))
+            writer.uint32(/* id 18, wireType 0 =*/144).bool(message.enableComments);
         return writer;
     };
 
@@ -6023,6 +8994,9 @@ $root.VideoMetadata = (function() {
             case 16:
                 message.category = reader.uint64();
                 break;
+            case 18:
+                message.enableComments = reader.bool();
+                break;
             default:
                 reader.skipType(tag & 7);
                 break;
@@ -6116,6 +9090,9 @@ $root.VideoMetadata = (function() {
         if (message.category != null && message.hasOwnProperty("category"))
             if (!$util.isInteger(message.category) && !(message.category && $util.isInteger(message.category.low) && $util.isInteger(message.category.high)))
                 return "category: integer|Long expected";
+        if (message.enableComments != null && message.hasOwnProperty("enableComments"))
+            if (typeof message.enableComments !== "boolean")
+                return "enableComments: boolean expected";
         return null;
     };
 
@@ -6191,6 +9168,8 @@ $root.VideoMetadata = (function() {
                 message.category = object.category;
             else if (typeof object.category === "object")
                 message.category = new $util.LongBits(object.category.low >>> 0, object.category.high >>> 0).toNumber(true);
+        if (object.enableComments != null)
+            message.enableComments = Boolean(object.enableComments);
         return message;
     };
 
@@ -6229,6 +9208,7 @@ $root.VideoMetadata = (function() {
                 object.category = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
             } else
                 object.category = options.longs === String ? "0" : 0;
+            object.enableComments = false;
         }
         if (message.title != null && message.hasOwnProperty("title"))
             object.title = message.title;
@@ -6271,6 +9251,8 @@ $root.VideoMetadata = (function() {
                 object.category = options.longs === String ? String(message.category) : message.category;
             else
                 object.category = options.longs === String ? $util.Long.prototype.toString.call(message.category) : options.longs === Number ? new $util.LongBits(message.category.low >>> 0, message.category.high >>> 0).toNumber(true) : message.category;
+        if (message.enableComments != null && message.hasOwnProperty("enableComments"))
+            object.enableComments = message.enableComments;
         return object;
     };
 
diff --git a/doc/index.md b/doc/index.md
index ebac00504dbb92d46a3276ccc82f37867f20fb08..bde98121842487253849af6575ebe08fdf4de3cd 100644
--- a/doc/index.md
+++ b/doc/index.md
@@ -3,6 +3,10 @@
 
 ## Table of Contents
 
+- [proto/Bounty.proto](#proto/Bounty.proto)
+    - [BountyMetadata](#.BountyMetadata)
+    - [BountyWorkData](#.BountyWorkData)
+  
 - [proto/Channel.proto](#proto/Channel.proto)
     - [ChannelCategoryMetadata](#.ChannelCategoryMetadata)
     - [ChannelMetadata](#.ChannelMetadata)
@@ -20,12 +24,36 @@
 - [proto/Membership.proto](#proto/Membership.proto)
     - [MembershipMetadata](#.MembershipMetadata)
   
+- [proto/Metaprotocol.proto](#proto/Metaprotocol.proto)
+    - [BanOrUnbanMemberFromChannel](#.BanOrUnbanMemberFromChannel)
+    - [ChannelModeratorRemarked](#.ChannelModeratorRemarked)
+    - [ChannelOwnerRemarked](#.ChannelOwnerRemarked)
+    - [CommentSectionPreference](#.CommentSectionPreference)
+    - [CreateComment](#.CreateComment)
+    - [DeleteComment](#.DeleteComment)
+    - [EditComment](#.EditComment)
+    - [MemberRemarked](#.MemberRemarked)
+    - [ModerateComment](#.ModerateComment)
+    - [PinOrUnpinComment](#.PinOrUnpinComment)
+    - [ReactComment](#.ReactComment)
+    - [ReactVideo](#.ReactVideo)
+    - [VideoReactionsPreference](#.VideoReactionsPreference)
+  
+    - [BanOrUnbanMemberFromChannel.Option](#.BanOrUnbanMemberFromChannel.Option)
+    - [CommentSectionPreference.Option](#.CommentSectionPreference.Option)
+    - [PinOrUnpinComment.Option](#.PinOrUnpinComment.Option)
+    - [ReactVideo.Reaction](#.ReactVideo.Reaction)
+    - [VideoReactionsPreference.Option](#.VideoReactionsPreference.Option)
+  
 - [proto/Person.proto](#proto/Person.proto)
     - [PersonMetadata](#.PersonMetadata)
   
 - [proto/Playlist.proto](#proto/Playlist.proto)
     - [PlaylistMetadata](#.PlaylistMetadata)
   
+- [proto/ProposalsDiscussion.proto](#proto/ProposalsDiscussion.proto)
+    - [ProposalsDiscussionPostMetadata](#.ProposalsDiscussionPostMetadata)
+  
 - [proto/Series.proto](#proto/Series.proto)
     - [SeasonMetadata](#.SeasonMetadata)
     - [SeriesMetadata](#.SeriesMetadata)
@@ -64,6 +92,56 @@
 
 
 
+<a name="proto/Bounty.proto"></a>
+<p align="right"><a href="#top">Top</a></p>
+
+## proto/Bounty.proto
+
+
+
+<a name=".BountyMetadata"></a>
+
+### BountyMetadata
+
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| title | [string](#string) | optional | Bounty title |
+| description | [string](#string) | optional | Bounty description |
+| discussionThread | [uint64](#uint64) | optional | Id of the forum thread used to discuss the bounty |
+| banner_image_uri | [string](#string) | optional | Image uri of the bounty&#39;s banner |
+
+
+
+
+
+
+<a name=".BountyWorkData"></a>
+
+### BountyWorkData
+
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| title | [string](#string) | optional | Title of the work |
+| description | [string](#string) | optional | Description which contains the work itself as a URL, a BLOB, or just text |
+
+
+
+
+
+ 
+
+ 
+
+ 
+
+ 
+
+
+
 <a name="proto/Channel.proto"></a>
 <p align="right"><a href="#top">Top</a></p>
 
@@ -236,7 +314,8 @@ The enum must be wrapped inside &#34;message&#34;, otherwide it breaks protobufj
 | Field | Type | Label | Description |
 | ----- | ---- | ----- | ----------- |
 | name | [string](#string) | optional | Member&#39;s real name |
-| avatar | [uint32](#uint32) | optional | Member&#39;s avatar - index into external [assets array](#.Assets) |
+| avatar_object | [uint32](#uint32) | optional | Member&#39;s avatar - index into external [assets array](#.Assets) |
+| avatar_uri | [string](#string) | optional | Url to member&#39;s avatar |
 | about | [string](#string) | optional | Member&#39;s md-formatted about text |
 
 
@@ -253,6 +332,297 @@ The enum must be wrapped inside &#34;message&#34;, otherwide it breaks protobufj
 
 
 
+<a name="proto/Metaprotocol.proto"></a>
+<p align="right"><a href="#top">Top</a></p>
+
+## proto/Metaprotocol.proto
+
+
+
+<a name=".BanOrUnbanMemberFromChannel"></a>
+
+### BanOrUnbanMemberFromChannel
+
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| member_id | [uint64](#uint64) | required | ID of the member that channel owner wants to ban from participating on any video. |
+| option | [BanOrUnbanMemberFromChannel.Option](#BanOrUnbanMemberFromChannel.Option) | required | Selected option to ban or unban member from the channel |
+
+
+
+
+
+
+<a name=".ChannelModeratorRemarked"></a>
+
+### ChannelModeratorRemarked
+
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| moderate_comment | [ModerateComment](#ModerateComment) | optional |  |
+
+
+
+
+
+
+<a name=".ChannelOwnerRemarked"></a>
+
+### ChannelOwnerRemarked
+
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| pin_or_unpin_comment | [PinOrUnpinComment](#PinOrUnpinComment) | optional |  |
+| ban_or_unban_member_from_channel | [BanOrUnbanMemberFromChannel](#BanOrUnbanMemberFromChannel) | optional |  |
+| video_reactions_preference | [VideoReactionsPreference](#VideoReactionsPreference) | optional |  |
+| comment_section_preference | [CommentSectionPreference](#CommentSectionPreference) | optional |  |
+| moderate_comment | [ModerateComment](#ModerateComment) | optional |  |
+
+
+
+
+
+
+<a name=".CommentSectionPreference"></a>
+
+### CommentSectionPreference
+Enable or disable comment section for a single video
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| video_id | [uint64](#uint64) | required | ID of the video |
+| option | [CommentSectionPreference.Option](#CommentSectionPreference.Option) | required | Selected option to enable or disable comment section |
+
+
+
+
+
+
+<a name=".CreateComment"></a>
+
+### CreateComment
+create comment
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| video_id | [uint64](#uint64) | required | ID of the video |
+| parent_comment_id | [string](#string) | optional | ID of comment member wants to reply (empty if new comment is parent comment) |
+| body | [string](#string) | required | Comment text |
+
+
+
+
+
+
+<a name=".DeleteComment"></a>
+
+### DeleteComment
+delete comment by author
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| comment_id | [string](#string) | required | ID of the comment which will be deleted |
+
+
+
+
+
+
+<a name=".EditComment"></a>
+
+### EditComment
+edit comment by author
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| comment_id | [string](#string) | required | ID of the comment whose text is being edited |
+| new_body | [string](#string) | required | New comment body |
+
+
+
+
+
+
+<a name=".MemberRemarked"></a>
+
+### MemberRemarked
+
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| react_video | [ReactVideo](#ReactVideo) | optional |  |
+| react_comment | [ReactComment](#ReactComment) | optional |  |
+| create_comment | [CreateComment](#CreateComment) | optional |  |
+| edit_comment | [EditComment](#EditComment) | optional |  |
+| delete_comment | [DeleteComment](#DeleteComment) | optional |  |
+
+
+
+
+
+
+<a name=".ModerateComment"></a>
+
+### ModerateComment
+delete comment by moderator or channel owner;
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| comment_id | [string](#string) | required | ID of comment that will be deleted by moderator |
+| rationale | [string](#string) | required | why moderator wants to delete this comment |
+
+
+
+
+
+
+<a name=".PinOrUnpinComment"></a>
+
+### PinOrUnpinComment
+pin comment on a video by channel owner
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| video_id | [uint64](#uint64) | required | ID of the video |
+| comment_id | [string](#string) | required | ID of the comment which will be pinned |
+| option | [PinOrUnpinComment.Option](#PinOrUnpinComment.Option) | required | Selected option to pin or unpin comment from channel |
+
+
+
+
+
+
+<a name=".ReactComment"></a>
+
+### ReactComment
+reacting, unreacting to a comment
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| comment_id | [string](#string) | required | ID of the comment to react |
+| reaction_id | [uint32](#uint32) | required | ID of the selected reaction |
+
+
+
+
+
+
+<a name=".ReactVideo"></a>
+
+### ReactVideo
+reacting, unreacting, and changing reaction to video
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| video_id | [uint64](#uint64) | required | ID of the video to react |
+| reaction | [ReactVideo.Reaction](#ReactVideo.Reaction) | required | Selected reaction |
+
+
+
+
+
+
+<a name=".VideoReactionsPreference"></a>
+
+### VideoReactionsPreference
+Enable or disable reactions on a single video
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| video_id | [uint64](#uint64) | required | ID of the video |
+| option | [VideoReactionsPreference.Option](#VideoReactionsPreference.Option) | required | Selected option to enable or disable comment section |
+
+
+
+
+
+ 
+
+
+<a name=".BanOrUnbanMemberFromChannel.Option"></a>
+
+### BanOrUnbanMemberFromChannel.Option
+
+
+| Name | Number | Description |
+| ---- | ------ | ----------- |
+| BAN | 0 | Ban member (nothing happens if member is already banned) |
+| UNBAN | 1 | Unban member (nothing happens if member is already unbanned) |
+
+
+
+<a name=".CommentSectionPreference.Option"></a>
+
+### CommentSectionPreference.Option
+
+
+| Name | Number | Description |
+| ---- | ------ | ----------- |
+| ENABLE | 0 | Enable comment section (nothing happens if it is already enabled) |
+| DISABLE | 1 | Disable comment section (nothing happens if it is already disabled) |
+
+
+
+<a name=".PinOrUnpinComment.Option"></a>
+
+### PinOrUnpinComment.Option
+
+
+| Name | Number | Description |
+| ---- | ------ | ----------- |
+| PIN | 0 | Pin comment on video (nothing happens if comment is already pinned) |
+| UNPIN | 1 | Unpin comment from video (nothing happens if comment is already unpinned) |
+
+
+
+<a name=".ReactVideo.Reaction"></a>
+
+### ReactVideo.Reaction
+The enum must be wrapped inside &#34;message&#34;, otherwide it breaks protobufjs
+Reacting again with the same message option will cancel the previous reaction
+
+| Name | Number | Description |
+| ---- | ------ | ----------- |
+| LIKE | 0 |  |
+| UNLIKE | 1 |  |
+
+
+
+<a name=".VideoReactionsPreference.Option"></a>
+
+### VideoReactionsPreference.Option
+
+
+| Name | Number | Description |
+| ---- | ------ | ----------- |
+| ENABLE | 0 | Enable reactions (nothing happens if they are already enabled) |
+| DISABLE | 1 | Disable reactions (nothing happens if they are already disabled) |
+
+
+ 
+
+ 
+
+ 
+
+
+
 <a name="proto/Person.proto"></a>
 <p align="right"><a href="#top">Top</a></p>
 
@@ -321,6 +691,38 @@ The enum must be wrapped inside &#34;message&#34;, otherwide it breaks protobufj
 
 
 
+<a name="proto/ProposalsDiscussion.proto"></a>
+<p align="right"><a href="#top">Top</a></p>
+
+## proto/ProposalsDiscussion.proto
+
+
+
+<a name=".ProposalsDiscussionPostMetadata"></a>
+
+### ProposalsDiscussionPostMetadata
+
+
+
+| Field | Type | Label | Description |
+| ----- | ---- | ----- | ----------- |
+| text | [string](#string) | optional | Post text content (md-formatted) |
+| repliesTo | [uint32](#uint32) | optional | Id of the post that given post replies to (if any) |
+
+
+
+
+
+ 
+
+ 
+
+ 
+
+ 
+
+
+
 <a name="proto/Series.proto"></a>
 <p align="right"><a href="#top">Top</a></p>
 
@@ -670,6 +1072,7 @@ Publication status before joystream
 | expected_ending_timestamp | [uint32](#uint32) | optional | Expected time when the opening will close (Unix timestamp) |
 | application_details | [string](#string) | optional | Md-formatted text explaining the application process |
 | application_form_questions | [OpeningMetadata.ApplicationFormQuestion](#OpeningMetadata.ApplicationFormQuestion) | repeated | List of questions that should be answered during application |
+| title | [string](#string) | optional |  |
 
 
 
diff --git a/proto/Metaprotocol.proto b/proto/Metaprotocol.proto
new file mode 100644
index 0000000000000000000000000000000000000000..61d13c875a316d896b16a4ca0dae74d9afa861a9
--- /dev/null
+++ b/proto/Metaprotocol.proto
@@ -0,0 +1,139 @@
+syntax = "proto2";
+
+// reacting, unreacting, and changing reaction to video
+message ReactVideo {
+    // ID of the video to react
+    required uint64 video_id = 1;
+
+    // The enum must be wrapped inside "message", otherwide it breaks protobufjs
+    // Reacting again with the same message option will cancel the previous reaction
+    enum Reaction {
+        LIKE = 0;
+        UNLIKE = 1;
+    }
+
+    // Selected reaction
+    required Reaction reaction = 2;
+}
+
+// reacting, unreacting to a comment
+message ReactComment {
+    // ID of the comment to react
+    required string comment_id = 1;
+
+    // ID of the selected reaction
+    required uint32 reaction_id = 2;
+}
+
+// create comment
+message CreateComment {
+    // ID of the video
+    required uint64 video_id = 1;
+
+    // ID of comment member wants to reply (empty if new comment is parent comment)
+    optional string parent_comment_id = 2;
+
+    // Comment text
+    required string body = 3;
+}
+
+// edit comment by author
+message EditComment {
+    // ID of the comment whose text is being edited
+    required string comment_id = 1;
+
+    // New comment body
+    required string new_body = 2;
+}
+
+// delete comment by author 
+message DeleteComment {
+    // ID of the comment which will be deleted
+    required string comment_id = 1;
+}
+
+// pin comment on a video by channel owner
+message PinOrUnpinComment {
+    // ID of the video
+    required uint64 video_id = 1;
+
+    // ID of the comment which will be pinned
+    required string comment_id = 2;
+
+    enum Option {
+        PIN = 0; // Pin comment on video (nothing happens if comment is already pinned)
+        UNPIN = 1; // Unpin comment from video (nothing happens if comment is already unpinned)
+    }
+
+    // Selected option to pin or unpin comment from channel
+    required Option option = 3;
+}
+
+
+// delete comment by moderator or channel owner;
+message ModerateComment {
+    // ID of comment that will be deleted by moderator
+    required string comment_id = 1;
+
+    // why moderator wants to delete this comment
+    required string rationale = 2;
+}
+
+message BanOrUnbanMemberFromChannel { 
+    // ID of the member that channel owner wants to ban from participating on any video.
+    required uint64 member_id = 1;
+
+    enum Option {
+        BAN = 0; // Ban member (nothing happens if member is already banned)
+        UNBAN = 1; // Unban member (nothing happens if member is already unbanned)
+    }
+
+    // Selected option to ban or unban member from the channel
+    required Option option = 2;
+}
+
+// Enable or disable reactions on a single video
+message VideoReactionsPreference {
+    // ID of the video
+    required uint64 video_id = 1;
+
+
+    enum Option {
+        ENABLE = 0; // Enable reactions (nothing happens if they are already enabled)
+        DISABLE = 1; // Disable reactions (nothing happens if they are already disabled)
+    }
+
+    // Selected option to enable or disable comment section
+    required Option option = 2;
+}
+
+message MemberRemarked {
+    // member_remark extrinsic would emit event containing 
+    // any one of the following serialized messages
+    oneof member_remarked {
+     ReactVideo react_video = 1;
+     ReactComment react_comment = 2;
+     CreateComment create_comment = 3;
+     EditComment edit_comment = 4;
+     DeleteComment delete_comment = 5;
+    }
+}
+
+message ChannelModeratorRemarked {
+    // channel_moderator_remark extrinsic would emit event containing 
+    // any one of the following serialized messages
+    oneof channel_moderator_remarked {
+        ModerateComment moderate_comment = 1;
+    }
+}
+
+message ChannelOwnerRemarked {
+    // channel_owner_remark extrinsic would emit event containing 
+    // any one of the following serialized messages
+    oneof channel_owner_remarked {
+        PinOrUnpinComment pin_or_unpin_comment = 1;
+        BanOrUnbanMemberFromChannel ban_or_unban_member_from_channel = 2;
+        VideoReactionsPreference video_reactions_preference = 3;
+        ModerateComment moderate_comment = 5;
+    }
+}
\ No newline at end of file
diff --git a/proto/Video.proto b/proto/Video.proto
index 893854f01ec1018e92df8c26cadc26c7df3d7b39..bc49033a143f65e510f31791cc0091e13af5d8e9 100644
--- a/proto/Video.proto
+++ b/proto/Video.proto
@@ -80,6 +80,9 @@ message VideoMetadata {
 
     // Video Category Id
     optional uint64 category = 16;
+
+    // Enable/Disable the comment section
+    optional bool enable_comments = 18;
 }
 
 message VideoCategoryMetadata {
