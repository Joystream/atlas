diff --git a/augment/augment-api-consts.d.ts b/augment/augment-api-consts.d.ts
index aa128c3cafc8c60de55482afd57570a12ab9f248..21d504796277a4e771b16ff5153fbaa7f0ee8e6c 100644
--- a/augment/augment-api-consts.d.ts
+++ b/augment/augment-api-consts.d.ts
@@ -95,6 +95,24 @@ declare module '@polkadot/api-base/types/consts' {
              **/
             maxReserves: u32 & AugmentedConst<ApiType>;
         };
+        bounty: {
+            /**
+             * Exports const - max work entry number for a closed assurance type contract bounty.
+             **/
+            closedContractSizeLimit: u32 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - creator state bloat bond amount for a bounty.
+             **/
+            creatorStateBloatBondAmount: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - funder state bloat bond amount for a bounty.
+             **/
+            funderStateBloatBondAmount: u128 & AugmentedConst<ApiType>;
+            /**
+             * Exports const - min work entrant stake for a bounty.
+             **/
+            minWorkEntrantStake: u128 & AugmentedConst<ApiType>;
+        };
         content: {
             /**
              * Exports const - default channel daily NFT limit.
@@ -434,6 +452,27 @@ declare module '@polkadot/api-base/types/consts' {
              **/
             stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
         };
+        multisig: {
+            /**
+             * The base amount of currency needed to reserve for creating a multisig execution or to
+             * store a dispatch call for later.
+             *
+             * This is held for an additional storage item whose value size is
+             * `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is
+             * `32 + sizeof(AccountId)` bytes.
+             **/
+            depositBase: u128 & AugmentedConst<ApiType>;
+            /**
+             * The amount of currency needed per unit threshold when creating a multisig execution.
+             *
+             * This is held for adding 32 bytes more into a pre-existing storage value.
+             **/
+            depositFactor: u128 & AugmentedConst<ApiType>;
+            /**
+             * The maximum amount of signatories allowed in the multisig.
+             **/
+            maxSignatories: u16 & AugmentedConst<ApiType>;
+        };
         operationsWorkingGroupAlpha: {
             /**
              * Stake needed to create an opening.
@@ -536,6 +575,14 @@ declare module '@polkadot/api-base/types/consts' {
              * Exports 'Fill Working Group Lead Opening' proposal parameters.
              **/
             fillWorkingGroupOpeningProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Max number of accounts per funding request proposal
+             **/
+            fundingRequestProposalMaxAccounts: u32 & AugmentedConst<ApiType>;
+            /**
+             * Max amount in funding request proposal (per account)
+             **/
+            fundingRequestProposalMaxAmount: u128 & AugmentedConst<ApiType>;
             /**
              * Exports 'Funding Request' proposal parameters.
              **/
@@ -557,6 +604,10 @@ declare module '@polkadot/api-base/types/consts' {
              **/
             setInitialInvitationBalanceProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
             setInvitationCountProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+            /**
+             * Max allowed number of validators in set max validator count proposal
+             **/
+            setMaxValidatorCountProposalMaxValidators: u32 & AugmentedConst<ApiType>;
             /**
              * Exports 'Set Max Validator Count' proposal parameters.
              **/
diff --git a/augment/augment-api-consts.js b/augment/augment-api-consts.js
index c60e7efae22fec89b226cf35ae0a509eda081cbc..ff6fef04a2b798bc3a4fa8f4438e18ee1c5786c0 100644
--- a/augment/augment-api-consts.js
+++ b/augment/augment-api-consts.js
@@ -1,4 +1,3 @@
-"use strict";
 // Auto-generated via `yarn polkadot-types-from-chain`, do not edit
 /* eslint-disable */
-Object.defineProperty(exports, "__esModule", { value: true });
+export {};
diff --git a/augment/augment-api-errors.d.ts b/augment/augment-api-errors.d.ts
index 5a44a4e6f7970f548c27fc0a4fecd8f4804b48ed..fccbce242b937bc4ea16344ad993b669a97faa08 100644
--- a/augment/augment-api-errors.d.ts
+++ b/augment/augment-api-errors.d.ts
@@ -89,6 +89,146 @@ declare module '@polkadot/api-base/types/errors' {
              **/
             VestingBalance: AugmentedError<ApiType>;
         };
+        bounty: {
+            /**
+             * Bounty doesnt exist.
+             **/
+            BountyDoesntExist: AugmentedError<ApiType>;
+            /**
+             * Incompatible assurance contract type for a member: cannot submit work to the 'closed
+             * assurance' bounty contract.
+             **/
+            CannotSubmitWorkToClosedContractBounty: AugmentedError<ApiType>;
+            /**
+             * Cherry less than minimum allowed.
+             **/
+            CherryLessThenMinimumAllowed: AugmentedError<ApiType>;
+            /**
+             * Cannot create a 'closed assurance contract' bounty with empty member list.
+             **/
+            ClosedContractMemberListIsEmpty: AugmentedError<ApiType>;
+            /**
+             * Cannot create a 'closed assurance contract' bounty with member list larger
+             * than allowed max work entry limit.
+             **/
+            ClosedContractMemberListIsTooLarge: AugmentedError<ApiType>;
+            /**
+             * 'closed assurance contract' bounty member list can only include existing members
+             **/
+            ClosedContractMemberNotFound: AugmentedError<ApiType>;
+            /**
+             * The conflicting stake discovered. Cannot stake.
+             **/
+            ConflictingStakes: AugmentedError<ApiType>;
+            /**
+             * Cannot create a bounty with an entrant stake is less than required minimum.
+             **/
+            EntrantStakeIsLessThanMininum: AugmentedError<ApiType>;
+            /**
+             * Cannot create a bounty with zero funding amount parameter.
+             **/
+            FundingAmountCannotBeZero: AugmentedError<ApiType>;
+            /**
+             * Cannot create a bounty with zero funding period parameter.
+             **/
+            FundingPeriodCannotBeZero: AugmentedError<ApiType>;
+            /**
+             * Insufficient balance for a bounty cherry.
+             **/
+            InsufficientBalanceForBounty: AugmentedError<ApiType>;
+            /**
+             * There is not enough balance for a stake.
+             **/
+            InsufficientBalanceForStake: AugmentedError<ApiType>;
+            /**
+             * Bounty contributor not found
+             **/
+            InvalidContributorActorSpecified: AugmentedError<ApiType>;
+            /**
+             * Invalid Creator Actor for Bounty specified
+             **/
+            InvalidCreatorActorSpecified: AugmentedError<ApiType>;
+            /**
+             * Member specified is not an entrant worker
+             **/
+            InvalidEntrantWorkerSpecified: AugmentedError<ApiType>;
+            /**
+             * Bounty oracle not found
+             **/
+            InvalidOracleActorSpecified: AugmentedError<ApiType>;
+            /**
+             * Provided oracle member id does not belong to an existing member
+             **/
+            InvalidOracleMemberId: AugmentedError<ApiType>;
+            /**
+             * Unexpected bounty stage for an operation: Cancelled.
+             **/
+            InvalidStageUnexpectedCancelled: AugmentedError<ApiType>;
+            /**
+             * Unexpected bounty stage for an operation: FailedBountyWithdrawal.
+             **/
+            InvalidStageUnexpectedFailedBountyWithdrawal: AugmentedError<ApiType>;
+            /**
+             * Unexpected bounty stage for an operation: Funding.
+             **/
+            InvalidStageUnexpectedFunding: AugmentedError<ApiType>;
+            /**
+             * Unexpected bounty stage for an operation: Judgment.
+             **/
+            InvalidStageUnexpectedJudgment: AugmentedError<ApiType>;
+            /**
+             * Unexpected bounty stage for an operation: NoFundingContributed.
+             **/
+            InvalidStageUnexpectedNoFundingContributed: AugmentedError<ApiType>;
+            /**
+             * Unexpected bounty stage for an operation: SuccessfulBountyWithdrawal.
+             **/
+            InvalidStageUnexpectedSuccessfulBountyWithdrawal: AugmentedError<ApiType>;
+            /**
+             * Unexpected bounty stage for an operation: WorkSubmission.
+             **/
+            InvalidStageUnexpectedWorkSubmission: AugmentedError<ApiType>;
+            /**
+             * Staking account doesn't belong to a member.
+             **/
+            InvalidStakingAccountForMember: AugmentedError<ApiType>;
+            /**
+             * Min funding amount cannot be greater than max amount.
+             **/
+            MinFundingAmountCannotBeGreaterThanMaxAmount: AugmentedError<ApiType>;
+            /**
+             * Cannot found bounty contribution.
+             **/
+            NoBountyContributionFound: AugmentedError<ApiType>;
+            /**
+             * Oracle have already been withdrawn
+             **/
+            OracleRewardAlreadyWithdrawn: AugmentedError<ApiType>;
+            /**
+             * Origin is root, so switching oracle is not allowed in this extrinsic. (call switch_oracle_as_root)
+             **/
+            SwitchOracleOriginIsRoot: AugmentedError<ApiType>;
+            /**
+             * The total reward for winners should be equal to total bounty funding.
+             **/
+            TotalRewardShouldBeEqualToTotalFunding: AugmentedError<ApiType>;
+            /**
+             * Invalid judgment - all winners should have work submissions.
+             **/
+            WinnerShouldHasWorkSubmission: AugmentedError<ApiType>;
+            /**
+             * Worker tried to access a work entry that doesn't belong to him
+             **/
+            WorkEntryDoesntBelongToWorker: AugmentedError<ApiType>;
+            /**
+             * Work entry doesnt exist.
+             **/
+            WorkEntryDoesntExist: AugmentedError<ApiType>;
+            /**
+             * Cannot set zero reward for winners.
+             **/
+            ZeroWinnerReward: AugmentedError<ApiType>;
+        };
         content: {
             /**
              * Already active auction cannot be cancelled
@@ -173,7 +313,7 @@ declare module '@polkadot/api-base/types/errors' {
             /**
              * Auction buy now is less then starting price
              **/
-            BuyNowIsLessThenStartingPrice: AugmentedError<ApiType>;
+            BuyNowMustBeGreaterThanStartingPrice: AugmentedError<ApiType>;
             /**
              * Cannot directly withdraw funds from a channel account when the channel has
              * a creator token issued
@@ -218,6 +358,19 @@ declare module '@polkadot/api-base/types/errors' {
             ChannelFeaturePaused: AugmentedError<ApiType>;
             ChannelNftDailyLimitExceeded: AugmentedError<ApiType>;
             ChannelNftWeeklyLimitExceeded: AugmentedError<ApiType>;
+            /**
+             * Provided channel owner (curator group) does not exist
+             **/
+            ChannelOwnerCuratorGroupDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Provided channel owner (member) does not exist
+             **/
+            ChannelOwnerMemberDoesNotExist: AugmentedError<ApiType>;
+            /**
+             * Channel state bloat bond cannot be lower than existential deposit,
+             * because it must secure the channel module account against dusting
+             **/
+            ChannelStateBloatBondBelowExistentialDeposit: AugmentedError<ApiType>;
             /**
              * Invalid extrinsic call: Channel state bloat bond changed.
              **/
@@ -298,7 +451,7 @@ declare module '@polkadot/api-base/types/errors' {
             InsufficientBalance: AugmentedError<ApiType>;
             /**
              * Cannot create the channel: channel creator has insufficient balance
-             * (budget for channel state bloat bond + channel data objs state bloat bonds + data objs storage fees)
+             * (budget for channel state bloat bond + channel data objs state bloat bonds + data objs storage fees + existential deposit)
              **/
             InsufficientBalanceForChannelCreation: AugmentedError<ApiType>;
             /**
@@ -307,7 +460,7 @@ declare module '@polkadot/api-base/types/errors' {
             InsufficientBalanceForTransfer: AugmentedError<ApiType>;
             /**
              * Cannot create the video: video creator has insufficient balance
-             * (budget for video state bloat bond + video data objs state bloat bonds + data objs storage fees)
+             * (budget for video state bloat bond + video data objs state bloat bonds + data objs storage fees + existential deposit)
              **/
             InsufficientBalanceForVideoCreation: AugmentedError<ApiType>;
             InsufficientCouncilBudget: AugmentedError<ApiType>;
@@ -331,6 +484,10 @@ declare module '@polkadot/api-base/types/errors' {
              * `witness_price` provided to `buy_now` extrinsic does not match the current sell price
              **/
             InvalidBuyNowWitnessPriceProvided: AugmentedError<ApiType>;
+            /**
+             * Channel bag witness parameters don't match the current runtime state
+             **/
+            InvalidChannelBagWitnessProvided: AugmentedError<ApiType>;
             /**
              * Incorrect channel owner for an operation.
              **/
@@ -356,6 +513,10 @@ declare module '@polkadot/api-base/types/errors' {
              * Current nft offer price does not match the provided `witness_price`
              **/
             InvalidNftOfferWitnessPriceProvided: AugmentedError<ApiType>;
+            /**
+             * Storage buckets number witness parameter does not match the current runtime state
+             **/
+            InvalidStorageBucketsNumWitnessProvided: AugmentedError<ApiType>;
             /**
              * Invalid number of objects to delete provided for delete_video
              **/
@@ -380,6 +541,18 @@ declare module '@polkadot/api-base/types/errors' {
              * Attempt to set minimum cashout allowed above the limit
              **/
             MaxCashoutValueTooHigh: AugmentedError<ApiType>;
+            /**
+             * Number of channel assets exceeds MaxNumberOfAssetsPerChannel
+             **/
+            MaxNumberOfChannelAssetsExceeded: AugmentedError<ApiType>;
+            /**
+             * Number of channel collaborators exceeds MaxNumberOfCollaboratorsPerChannel
+             **/
+            MaxNumberOfChannelCollaboratorsExceeded: AugmentedError<ApiType>;
+            /**
+             * Number of video assets exceeds MaxMaxNumberOfAssetsPerVideo
+             **/
+            MaxNumberOfVideoAssetsExceeded: AugmentedError<ApiType>;
             /**
              * Member authentication failed
              **/
@@ -409,10 +582,19 @@ declare module '@polkadot/api-base/types/errors' {
              * Attempt to set minimum cashout allowed below the limit
              **/
             MinCashoutValueTooLow: AugmentedError<ApiType>;
+            /**
+             * Storage buckets number witness parameter must be provided when channel/video assets
+             * are being updated.
+             **/
+            MissingStorageBucketsNumWitness: AugmentedError<ApiType>;
             /**
              * Nft for given video id already exists
              **/
             NftAlreadyExists: AugmentedError<ApiType>;
+            /**
+             * Attempt to sling back a channel owned nft
+             **/
+            NftAlreadyOwnedByChannel: AugmentedError<ApiType>;
             /**
              * Nft auction is already expired
              **/
@@ -425,6 +607,10 @@ declare module '@polkadot/api-base/types/errors' {
              * Can not create auction for Nft, if auction have been already started or nft is locked for the transfer
              **/
             NftIsNotIdle: AugmentedError<ApiType>;
+            /**
+             * Non-channel owner specified during nft issuance does not exist
+             **/
+            NftNonChannelOwnerDoesNotExist: AugmentedError<ApiType>;
             /**
              * Given video nft is not in buy now state
              **/
@@ -437,6 +623,10 @@ declare module '@polkadot/api-base/types/errors' {
              * Nft is not in auction state
              **/
             NotInAuctionState: AugmentedError<ApiType>;
+            /**
+             * Delete channel and assets and delete video assets must have a number of assets to remove greater than zero
+             **/
+            NumberOfAssetsToRemoveIsZero: AugmentedError<ApiType>;
             /**
              * Overflow or underflow error happened
              **/
@@ -509,15 +699,19 @@ declare module '@polkadot/api-base/types/errors' {
              * Invalid extrinsic call: video state bloat bond changed.
              **/
             VideoStateBloatBondChanged: AugmentedError<ApiType>;
+            /**
+             * At least one of the whitelisted members does not exist
+             **/
+            WhitelistedMemberDoesNotExist: AugmentedError<ApiType>;
             /**
              * Auction whitelist has only one member
              **/
             WhitelistHasOnlyOneMember: AugmentedError<ApiType>;
             /**
              * An attempt to withdraw funds from channel account failed, because the specified amount
-             * exceeds the account's balance minus ExistantialDeposit
+             * exceeds the withdrawable amount (channel account balance minus channel bloat bond)
              **/
-            WithdrawFromChannelAmountExceedsBalanceMinusExistentialDeposit: AugmentedError<ApiType>;
+            WithdrawalAmountExceedsChannelAccountWithdrawableBalance: AugmentedError<ApiType>;
             /**
              * An attempt to withdraw funds from channel account failed, because the specified amount
              * is zero
@@ -963,10 +1157,6 @@ declare module '@polkadot/api-base/types/errors' {
              * Category still contains some threads.
              **/
             CategoryNotEmptyThreads: AugmentedError<ApiType>;
-            /**
-             * data migration not done yet.
-             **/
-            DataMigrationNotDone: AugmentedError<ApiType>;
             /**
              * Forum user id not match its account.
              **/
@@ -1557,6 +1747,64 @@ declare module '@polkadot/api-base/types/errors' {
              **/
             ZeroTokensFunding: AugmentedError<ApiType>;
         };
+        multisig: {
+            /**
+             * Call is already approved by this signatory.
+             **/
+            AlreadyApproved: AugmentedError<ApiType>;
+            /**
+             * The data to be stored is already stored.
+             **/
+            AlreadyStored: AugmentedError<ApiType>;
+            /**
+             * The maximum weight information provided was too low.
+             **/
+            MaxWeightTooLow: AugmentedError<ApiType>;
+            /**
+             * Threshold must be 2 or greater.
+             **/
+            MinimumThreshold: AugmentedError<ApiType>;
+            /**
+             * Call doesn't need any (more) approvals.
+             **/
+            NoApprovalsNeeded: AugmentedError<ApiType>;
+            /**
+             * Multisig operation not found when attempting to cancel.
+             **/
+            NotFound: AugmentedError<ApiType>;
+            /**
+             * No timepoint was given, yet the multisig operation is already underway.
+             **/
+            NoTimepoint: AugmentedError<ApiType>;
+            /**
+             * Only the account that originally created the multisig is able to cancel it.
+             **/
+            NotOwner: AugmentedError<ApiType>;
+            /**
+             * The sender was contained in the other signatories; it shouldn't be.
+             **/
+            SenderInSignatories: AugmentedError<ApiType>;
+            /**
+             * The signatories were provided out of order; they should be ordered.
+             **/
+            SignatoriesOutOfOrder: AugmentedError<ApiType>;
+            /**
+             * There are too few signatories in the list.
+             **/
+            TooFewSignatories: AugmentedError<ApiType>;
+            /**
+             * There are too many signatories in the list.
+             **/
+            TooManySignatories: AugmentedError<ApiType>;
+            /**
+             * A timepoint was given, yet no multisig operation is underway.
+             **/
+            UnexpectedTimepoint: AugmentedError<ApiType>;
+            /**
+             * A different timepoint was given to the multisig operation that is underway.
+             **/
+            WrongTimepoint: AugmentedError<ApiType>;
+        };
         operationsWorkingGroupAlpha: {
             /**
              * Trying to fill opening with an application for other opening
@@ -1980,6 +2228,10 @@ declare module '@polkadot/api-base/types/errors' {
              * Attempt to participate in a split with zero token to stake
              **/
             CannotParticipateInSplitWithZeroAmount: AugmentedError<ApiType>;
+            /**
+             * At least one of the members provided as part of InitialAllocation does not exist
+             **/
+            InitialAllocationToNonExistingMember: AugmentedError<ApiType>;
             /**
              * User does not posses enough balance to participate in the revenue split
              **/
@@ -2137,6 +2389,9 @@ declare module '@polkadot/api-base/types/errors' {
              * Insufficient funds for 'Update Working Group Budget' proposal execution
              **/
             InsufficientFundsForBudgetUpdate: AugmentedError<ApiType>;
+            /**
+             * The specified min channel cashout is greater than the specified max channel cashout in `Update Channel Payouts` proposal.
+             **/
             InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout: AugmentedError<ApiType>;
             /**
              * Invalid council election parameter - announcing_period
@@ -2182,6 +2437,22 @@ declare module '@polkadot/api-base/types/errors' {
              * Repeated account in 'Funding Request' proposal.
              **/
             InvalidFundingRequestProposalRepeatedAccount: AugmentedError<ApiType>;
+            /**
+             * Provided lead application id is not valid
+             **/
+            InvalidLeadApplicationId: AugmentedError<ApiType>;
+            /**
+             * Provided lead opening id is not valid
+             **/
+            InvalidLeadOpeningId: AugmentedError<ApiType>;
+            /**
+             * Provided lead worker id is not valid
+             **/
+            InvalidLeadWorkerId: AugmentedError<ApiType>;
+            /**
+             * Provided proposal id is not valid
+             **/
+            InvalidProposalId: AugmentedError<ApiType>;
             /**
              * Invalid 'set lead proposal' parameter - proposed lead cannot be a councilor
              **/
@@ -2244,6 +2515,11 @@ declare module '@polkadot/api-base/types/errors' {
              * Thread doesn't exist
              **/
             ThreadDoesntExist: AugmentedError<ApiType>;
+            /**
+             * At least one of the member ids provided as part of closed thread whitelist belongs
+             * to a non-existing member.
+             **/
+            WhitelistedMemberDoesNotExist: AugmentedError<ApiType>;
         };
         proposalsEngine: {
             /**
@@ -2428,6 +2704,10 @@ declare module '@polkadot/api-base/types/errors' {
              * A nomination target was supplied that was blocked or otherwise not a validator.
              **/
             BadTarget: AugmentedError<ApiType>;
+            /**
+             * External restriction prevents bonding with given account
+             **/
+            BondingRestricted: AugmentedError<ApiType>;
             /**
              * The user has enough bond and thus cannot be chilled forcefully by an external person.
              **/
@@ -2518,6 +2798,10 @@ declare module '@polkadot/api-base/types/errors' {
              * Blacklist size limit exceeded.
              **/
             BlacklistSizeLimitExceeded: AugmentedError<ApiType>;
+            /**
+             * Call Disabled
+             **/
+            CallDisabled: AugmentedError<ApiType>;
             /**
              * Cannot delete non empty dynamic bag.
              **/
diff --git a/augment/augment-api-errors.js b/augment/augment-api-errors.js
index c60e7efae22fec89b226cf35ae0a509eda081cbc..ff6fef04a2b798bc3a4fa8f4438e18ee1c5786c0 100644
--- a/augment/augment-api-errors.js
+++ b/augment/augment-api-errors.js
@@ -1,4 +1,3 @@
-"use strict";
 // Auto-generated via `yarn polkadot-types-from-chain`, do not edit
 /* eslint-disable */
-Object.defineProperty(exports, "__esModule", { value: true });
+export {};
diff --git a/augment/augment-api-events.d.ts b/augment/augment-api-events.d.ts
index eb7fe5b5fae29e3cea927128eff79ffd343c141d..818bccce5c4ff3c0b6155dfe38ca981783efe52a 100644
--- a/augment/augment-api-events.d.ts
+++ b/augment/augment-api-events.d.ts
@@ -2,7 +2,7 @@ import type { ApiTypes } from '@polkadot/api-base/types';
 import type { BTreeMap, BTreeSet, Bytes, Null, Option, Result, U8aFixed, Vec, bool, u128, u32, u64, u8 } from '@polkadot/types-codec';
 import type { ITuple } from '@polkadot/types-codec/types';
 import type { AccountId32, H256, Perquintill } from '@polkadot/types/interfaces/runtime';
-import type { FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchInfo, PalletCommonBalanceKind, PalletCommonWorkingGroup, PalletContentChannelActionPermission, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelRecord, PalletContentChannelUpdateParametersRecord, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupContentModerationAction, PalletContentPermissionsCuratorGroupPausableChannelFeature, PalletContentTransferCommitmentParameters, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseElectionCompute, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineSr25519AppSr25519Public, PalletMembershipBuyMembershipParameters, PalletMembershipCreateFoundingMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTransferPolicy, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadMode, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineVoteKind, PalletReferendumOptionResult, PalletStakingExposure, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakePolicy, SpFinalityGrandpaAppPublic, SpRuntimeDispatchError } from '@polkadot/types/lookup';
+import type { FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchInfo, PalletBountyBountyActor, PalletBountyBountyParameters, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonWorkingGroup, PalletContentChannelActionPermission, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelRecord, PalletContentChannelUpdateParametersRecord, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupContentModerationAction, PalletContentPermissionsCuratorGroupPausableChannelFeature, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseElectionCompute, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineSr25519AppSr25519Public, PalletMembershipBuyMembershipParameters, PalletMembershipCreateFoundingMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTransferPolicy, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadMode, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineVoteKind, PalletReferendumOptionResult, PalletStakingExposure, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakePolicy, SpFinalityGrandpaAppPublic, SpRuntimeDispatchError } from '@polkadot/types/lookup';
 declare module '@polkadot/api-base/types/events' {
     interface AugmentedEvents<ApiType extends ApiTypes> {
         bagsList: {
@@ -100,6 +100,192 @@ declare module '@polkadot/api-base/types/events' {
                 amount: u128;
             }>;
         };
+        bounty: {
+            /**
+             * Bounty contributor made a message remark
+             * Params:
+             * - contributor
+             * - bounty id
+             * - message
+             **/
+            BountyContributorRemarked: AugmentedEvent<ApiType, [PalletBountyBountyActor, u64, Bytes]>;
+            /**
+             * A bounty was created.
+             * Params:
+             * - bounty ID
+             * - creation parameters
+             * - bounty metadata
+             **/
+            BountyCreated: AugmentedEvent<ApiType, [u64, PalletBountyBountyParameters, Bytes]>;
+            /**
+             * A bounty creator has withdrawn the cherry (member or council).
+             * Params:
+             * - bounty ID
+             * - bounty creator
+             **/
+            BountyCreatorCherryWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+            /**
+             * A bounty creator has withdrawn the oracle reward (member or council).
+             * Params:
+             * - bounty ID
+             * - bounty creator
+             **/
+            BountyCreatorOracleRewardWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+            /**
+             * Bounty creator made a message remark
+             * Params:
+             * - creator
+             * - bounty id
+             * - message
+             **/
+            BountyCreatorRemarked: AugmentedEvent<ApiType, [PalletBountyBountyActor, u64, Bytes]>;
+            /**
+             * Bounty entrant made a message remark
+             * Params:
+             * - entrant_id
+             * - bounty id
+             * - entry id
+             * - message
+             **/
+            BountyEntrantRemarked: AugmentedEvent<ApiType, [u64, u64, u64, Bytes]>;
+            /**
+             * A bounty was funded by a member or a council.
+             * Params:
+             * - bounty ID
+             * - bounty funder
+             * - funding amount
+             **/
+            BountyFunded: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+            /**
+             * A member or a council has withdrawn the funding.
+             * Params:
+             * - bounty ID
+             * - bounty funder
+             **/
+            BountyFundingWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+            /**
+             * A bounty has reached its target funding amount.
+             * Params:
+             * - bounty ID
+             **/
+            BountyMaxFundingReached: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * Bounty oracle made a message remark
+             * Params:
+             * - oracle
+             * - bounty id
+             * - message
+             **/
+            BountyOracleRemarked: AugmentedEvent<ApiType, [PalletBountyBountyActor, u64, Bytes]>;
+            /**
+             * A Oracle has withdrawn the oracle reward (member or council).
+             * Params:
+             * - bounty ID
+             * - bounty creator
+             * - Oracle Reward
+             **/
+            BountyOracleRewardWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+            /**
+             * Bounty Oracle Switched by current oracle or council.
+             * Params:
+             * - bounty ID
+             * - switcher
+             * - current_oracle,
+             * - new oracle
+             **/
+            BountyOracleSwitched: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+            /**
+             * A bounty was removed.
+             * Params:
+             * - bounty ID
+             **/
+            BountyRemoved: AugmentedEvent<ApiType, [u64]>;
+            /**
+             * A bounty was terminated by council.
+             * Params:
+             * - bounty ID
+             * - bounty terminator
+             * - bounty creator
+             * - bounty oracle
+             **/
+            BountyTerminated: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+            /**
+             * A member or a council creator has withdrawn the creator state bloat bond.
+             * Params:
+             * - bounty ID
+             * - bounty creator
+             * - Creator State bloat bond amount
+             **/
+            CreatorStateBloatBondWithdrawn: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+            /**
+             * A member or a council funder has withdrawn the funder state bloat bond.
+             * Params:
+             * - bounty ID
+             * - bounty funder
+             * - funder State bloat bond amount
+             **/
+            FunderStateBloatBondWithdrawn: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+            /**
+             * Submit oracle judgment.
+             * Params:
+             * - bounty ID
+             * - oracle
+             * - judgment data
+             * - rationale
+             **/
+            OracleJudgmentSubmitted: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, Bytes]>;
+            /**
+             * Work entry was slashed.
+             * Params:
+             * - bounty ID
+             * - entry ID
+             * - entrant member ID
+             **/
+            WorkEntrantFundsWithdrawn: AugmentedEvent<ApiType, [u64, u64, u64]>;
+            /**
+             * Work entry stake slashed.
+             * Params:
+             * - bounty ID
+             * - entry ID
+             * - stake account
+             * - slashed amount
+             **/
+            WorkEntrantStakeSlashed: AugmentedEvent<ApiType, [u64, u64, AccountId32, u128]>;
+            /**
+             * Work entry stake unlocked.
+             * Params:
+             * - bounty ID
+             * - entry ID
+             * - stake account
+             **/
+            WorkEntrantStakeUnlocked: AugmentedEvent<ApiType, [u64, u64, AccountId32]>;
+            /**
+             * Work entry was announced.
+             * Params:
+             * - bounty ID
+             * - created entry ID
+             * - entrant member ID
+             * - staking account ID
+             * - work description
+             **/
+            WorkEntryAnnounced: AugmentedEvent<ApiType, [u64, u64, u64, AccountId32, Bytes]>;
+            /**
+             * Work entry was slashed.
+             * Params:
+             * - bounty ID
+             * - oracle (caller)
+             **/
+            WorkSubmissionPeriodEnded: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+            /**
+             * Submit work.
+             * Params:
+             * - bounty ID
+             * - created entry ID
+             * - entrant member ID
+             * - work data (description, URL, BLOB, etc.)
+             **/
+            WorkSubmitted: AugmentedEvent<ApiType, [u64, u64, u64, Bytes]>;
+        };
         constitution: {
             /**
              * Emits on constitution amendment.
@@ -135,7 +321,7 @@ declare module '@polkadot/api-base/types/events' {
             ChannelRewardClaimedAndWithdrawn: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u128, PalletContentChannelFundsDestination]>;
             ChannelRewardUpdated: AugmentedEvent<ApiType, [u128, u64]>;
             ChannelStateBloatBondValueUpdated: AugmentedEvent<ApiType, [u128]>;
-            ChannelTransferAccepted: AugmentedEvent<ApiType, [u64, PalletContentTransferCommitmentParameters]>;
+            ChannelTransferAccepted: AugmentedEvent<ApiType, [u64, PalletContentTransferCommitmentParametersBTreeMap]>;
             ChannelUpdated: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord, BTreeSet<u64>]>;
             ChannelVisibilitySetByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
             CouncilRewardClaimed: AugmentedEvent<ApiType, [u64, u128]>;
@@ -361,7 +547,7 @@ declare module '@polkadot/api-base/types/events' {
             /**
              * New council was elected
              **/
-            AnnouncingPeriodStarted: AugmentedEvent<ApiType, []>;
+            AnnouncingPeriodStarted: AugmentedEvent<ApiType, [u32]>;
             /**
              * Budget balance was changed by the root.
              **/
@@ -417,15 +603,15 @@ declare module '@polkadot/api-base/types/events' {
             /**
              * New council was elected and appointed
              **/
-            NewCouncilElected: AugmentedEvent<ApiType, [Vec<u64>]>;
+            NewCouncilElected: AugmentedEvent<ApiType, [Vec<u64>, u32]>;
             /**
              * New council was not elected
              **/
-            NewCouncilNotElected: AugmentedEvent<ApiType, []>;
+            NewCouncilNotElected: AugmentedEvent<ApiType, [u32]>;
             /**
              * Announcing period can't finish because of insufficient candidtate count
              **/
-            NotEnoughCandidates: AugmentedEvent<ApiType, []>;
+            NotEnoughCandidates: AugmentedEvent<ApiType, [u32]>;
             /**
              * Request has been funded
              **/
@@ -718,10 +904,6 @@ declare module '@polkadot/api-base/types/events' {
              * Post with givne id was moderated.
              **/
             PostModerated: AugmentedEvent<ApiType, [u64, Bytes, PalletForumPrivilegedActor, u64, u64]>;
-            /**
-             * Thumb up post
-             **/
-            PostReacted: AugmentedEvent<ApiType, [u64, u64, u64, u64, u64]>;
             /**
              * Post with given id had its text updated.
              * The second argument reflects the number of total edits when the text update occurs.
@@ -1195,7 +1377,7 @@ declare module '@polkadot/api-base/types/events' {
             UpdatedWorkingGroupBudget: AugmentedEvent<ApiType, [PalletCommonWorkingGroup, u128, PalletCommonBalanceKind]>;
         };
         members: {
-            FoundingMemberCreated: AugmentedEvent<ApiType, [u64, PalletMembershipCreateFoundingMemberParameters]>;
+            FoundingMemberCreated: AugmentedEvent<ApiType, [u64, PalletMembershipCreateFoundingMemberParameters, u32]>;
             InitialInvitationBalanceUpdated: AugmentedEvent<ApiType, [u128]>;
             InitialInvitationCountUpdated: AugmentedEvent<ApiType, [u32]>;
             InvitesTransferred: AugmentedEvent<ApiType, [u64, u64, u32]>;
@@ -1204,7 +1386,7 @@ declare module '@polkadot/api-base/types/events' {
             MemberInvited: AugmentedEvent<ApiType, [u64, PalletMembershipInviteMembershipParameters]>;
             MemberProfileUpdated: AugmentedEvent<ApiType, [u64, Option<Bytes>, Option<Bytes>]>;
             MemberRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
-            MembershipBought: AugmentedEvent<ApiType, [u64, PalletMembershipBuyMembershipParameters]>;
+            MembershipBought: AugmentedEvent<ApiType, [u64, PalletMembershipBuyMembershipParameters, u32]>;
             MembershipGifted: AugmentedEvent<ApiType, [u64, PalletMembershipGiftMembershipParameters]>;
             MembershipPriceUpdated: AugmentedEvent<ApiType, [u128]>;
             MemberVerificationStatusUpdated: AugmentedEvent<ApiType, [u64, bool, u64]>;
@@ -1401,6 +1583,44 @@ declare module '@polkadot/api-base/types/events' {
              **/
             WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
         };
+        multisig: {
+            /**
+             * A multisig operation has been approved by someone.
+             **/
+            MultisigApproval: AugmentedEvent<ApiType, [approving: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed], {
+                approving: AccountId32;
+                timepoint: PalletMultisigTimepoint;
+                multisig: AccountId32;
+                callHash: U8aFixed;
+            }>;
+            /**
+             * A multisig operation has been cancelled.
+             **/
+            MultisigCancelled: AugmentedEvent<ApiType, [cancelling: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed], {
+                cancelling: AccountId32;
+                timepoint: PalletMultisigTimepoint;
+                multisig: AccountId32;
+                callHash: U8aFixed;
+            }>;
+            /**
+             * A multisig operation has been executed.
+             **/
+            MultisigExecuted: AugmentedEvent<ApiType, [approving: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed, result: Result<Null, SpRuntimeDispatchError>], {
+                approving: AccountId32;
+                timepoint: PalletMultisigTimepoint;
+                multisig: AccountId32;
+                callHash: U8aFixed;
+                result: Result<Null, SpRuntimeDispatchError>;
+            }>;
+            /**
+             * A new multisig operation has begun.
+             **/
+            NewMultisig: AugmentedEvent<ApiType, [approving: AccountId32, multisig: AccountId32, callHash: U8aFixed], {
+                approving: AccountId32;
+                multisig: AccountId32;
+                callHash: U8aFixed;
+            }>;
+        };
         offences: {
             /**
              * There is an offence reported of the given `kind` happened at the `session_index` and
@@ -2039,20 +2259,21 @@ declare module '@polkadot/api-base/types/events' {
              * Params:
              * - token identifier
              * - source member id
-             * - map containing validated outputs (amount, remark) data indexed by
-             * (member_id + account existance)
+             * - map containing validated outputs (amount indexed by (member_id + account existance))
+             * - transfer's metadata
              **/
-            TokenAmountTransferred: AugmentedEvent<ApiType, [u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>]>;
+            TokenAmountTransferred: AugmentedEvent<ApiType, [u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
             /**
              * Token amount transferred by issuer
              * Params:
              * - token identifier
              * - source (issuer) member id
              * - map containing validated outputs
-             * (amount, opt. vesting schedule, opt. vesting cleanup key, remark) data indexed by
+             * (amount, opt. vesting schedule, opt. vesting cleanup key) data indexed by
              * (account_id + account existance)
+             * - transfer's metadata
              **/
-            TokenAmountTransferredByIssuer: AugmentedEvent<ApiType, [u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>]>;
+            TokenAmountTransferredByIssuer: AugmentedEvent<ApiType, [u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
             /**
              * Token Deissued
              * Params:
@@ -2214,15 +2435,15 @@ declare module '@polkadot/api-base/types/events' {
             /**
              * Referendum started
              **/
-            ReferendumStarted: AugmentedEvent<ApiType, [u64]>;
+            ReferendumStarted: AugmentedEvent<ApiType, [u64, u32]>;
             /**
              * Referendum started
              **/
-            ReferendumStartedForcefully: AugmentedEvent<ApiType, [u64]>;
+            ReferendumStartedForcefully: AugmentedEvent<ApiType, [u64, u32]>;
             /**
              * Revealing phase has begun
              **/
-            RevealingStageStarted: AugmentedEvent<ApiType, []>;
+            RevealingStageStarted: AugmentedEvent<ApiType, [u32]>;
             /**
              * User released his stake
              **/
@@ -2309,14 +2530,6 @@ declare module '@polkadot/api-base/types/events' {
             Withdrawn: AugmentedEvent<ApiType, [AccountId32, u128]>;
         };
         storage: {
-            /**
-             * Bag objects changed.
-             * Params
-             * - bag id
-             * - new total objects size
-             * - new total objects number
-             **/
-            BagObjectsChanged: AugmentedEvent<ApiType, [PalletStorageBagIdType, u64, u64]>;
             /**
              * Emits on changing the size-based pricing of new objects uploaded.
              * Params
@@ -2349,9 +2562,10 @@ declare module '@polkadot/api-base/types/events' {
              * Emits on storage assets being uploaded and deleted at the same time
              * Params
              * - UploadParameters
-             * - Objects Id of assets to be removed
+             * - Ids of the uploaded objects
+             * - Ids of the removed objects
              **/
-            DataObjectsUpdated: AugmentedEvent<ApiType, [PalletStorageUploadParametersRecord, BTreeSet<u64>]>;
+            DataObjectsUpdated: AugmentedEvent<ApiType, [PalletStorageUploadParametersRecord, BTreeSet<u64>, BTreeSet<u64>]>;
             /**
              * Emits on uploading data objects.
              * Params
@@ -2359,7 +2573,7 @@ declare module '@polkadot/api-base/types/events' {
              * - initial uploading parameters
              * - state bloat bond for objects
              **/
-            DataObjectsUploaded: AugmentedEvent<ApiType, [Vec<u64>, PalletStorageUploadParametersRecord, u128]>;
+            DataObjectsUploaded: AugmentedEvent<ApiType, [BTreeSet<u64>, PalletStorageUploadParametersRecord, u128]>;
             /**
              * Emits on creating distribution bucket.
              * Params
@@ -2468,18 +2682,16 @@ declare module '@polkadot/api-base/types/events' {
             /**
              * Emits on creating a dynamic bag.
              * Params
-             * - dynamic bag ID
-             * - assigned storage buckets' IDs
-             * - assigned distribution buckets' IDs
+             * - dynamic bag creation parameters
+             * - uploaded data objects ids
              **/
-            DynamicBagCreated: AugmentedEvent<ApiType, [PalletStorageDynamicBagIdType, BTreeSet<u64>, BTreeSet<PalletStorageDistributionBucketIdRecord>]>;
+            DynamicBagCreated: AugmentedEvent<ApiType, [PalletStorageDynBagCreationParametersRecord, BTreeSet<u64>]>;
             /**
              * Emits on deleting a dynamic bag.
              * Params
-             * - account ID for the state bloat bond
              * - dynamic bag ID
              **/
-            DynamicBagDeleted: AugmentedEvent<ApiType, [AccountId32, PalletStorageDynamicBagIdType]>;
+            DynamicBagDeleted: AugmentedEvent<ApiType, [PalletStorageDynamicBagIdType]>;
             /**
              * Emits on dynamic bag creation policy update (distribution bucket families).
              * Params
diff --git a/augment/augment-api-events.js b/augment/augment-api-events.js
index c60e7efae22fec89b226cf35ae0a509eda081cbc..ff6fef04a2b798bc3a4fa8f4438e18ee1c5786c0 100644
--- a/augment/augment-api-events.js
+++ b/augment/augment-api-events.js
@@ -1,4 +1,3 @@
-"use strict";
 // Auto-generated via `yarn polkadot-types-from-chain`, do not edit
 /* eslint-disable */
-Object.defineProperty(exports, "__esModule", { value: true });
+export {};
diff --git a/augment/augment-api-query.d.ts b/augment/augment-api-query.d.ts
index 155bbd05f943f0aaa26a9d10f331ab78e59f3781..479291622c4a845d08ce380911d60ead17050855 100644
--- a/augment/augment-api-query.d.ts
+++ b/augment/augment-api-query.d.ts
@@ -1,8 +1,8 @@
 import type { ApiTypes } from '@polkadot/api-base/types';
-import type { BTreeMap, Bytes, Null, Option, U8aFixed, Vec, WrapperOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+import type { BTreeMap, Bytes, Null, Option, U8aFixed, Vec, WrapperKeepOpaque, WrapperOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
 import type { AnyNumber, ITuple } from '@polkadot/types-codec/types';
-import type { AccountId32, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
-import type { FrameSupportWeightsPerDispatchClassU64, FrameSystemAccountInfo, FrameSystemEventRecord, FrameSystemLastRuntimeUpgradeInfo, FrameSystemPhase, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipUncleEntryItem, PalletBagsListListBag, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesReleases, PalletBalancesReserveData, PalletConstitutionConstitutionInfo, PalletContentChannelRecord, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftTypesOpenAuctionBidRecord, PalletContentPermissionsCuratorGroup, PalletContentVideoRecord, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStageUpdate, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCategory, PalletForumPost, PalletForumThread, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineSr25519AppSr25519Public, PalletMembershipMembershipObject, PalletMembershipStakingAccountMemberBinding, PalletProjectTokenAccountData, PalletProjectTokenTokenData, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsEngineProposal, PalletProposalsEngineVoteKind, PalletReferendumCastVote, PalletReferendumReferendumStage, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingNominations, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageDataObject, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagType, PalletStorageStorageBucketRecord, PalletTransactionPaymentReleases, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupGroupWorker, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpCoreCryptoKeyTypeId, SpNposElectionsElectionScore, SpRuntimeDigest, SpStakingOffenceOffenceDetails } from '@polkadot/types/lookup';
+import type { AccountId32, Call, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
+import type { FrameSupportWeightsPerDispatchClassU64, FrameSystemAccountInfo, FrameSystemEventRecord, FrameSystemLastRuntimeUpgradeInfo, FrameSystemPhase, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipUncleEntryItem, PalletBagsListListBag, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyBountyActor, PalletBountyBountyRecord, PalletBountyContribution, PalletBountyEntryRecord, PalletConstitutionConstitutionInfo, PalletContentChannelRecord, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftTypesOpenAuctionBidRecord, PalletContentPermissionsCuratorGroup, PalletContentVideoRecord, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStageUpdate, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCategory, PalletForumPost, PalletForumThread, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineSr25519AppSr25519Public, PalletMembershipMembershipObject, PalletMembershipStakingAccountMemberBinding, PalletMultisigMultisig, PalletProjectTokenAccountData, PalletProjectTokenTokenData, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsEngineProposal, PalletProposalsEngineVoteKind, PalletReferendumCastVote, PalletReferendumReferendumStage, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingNominations, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageDataObject, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagType, PalletStorageStorageBucketRecord, PalletTransactionPaymentReleases, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupGroupWorker, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpCoreCryptoKeyTypeId, SpNposElectionsElectionScore, SpRuntimeDigest, SpStakingOffenceOffenceDetails } from '@polkadot/types/lookup';
 import type { Observable } from '@polkadot/types/types';
 declare module '@polkadot/api-base/types/storage' {
     interface AugmentedQueries<ApiType extends ApiTypes> {
@@ -194,6 +194,32 @@ declare module '@polkadot/api-base/types/storage' {
              **/
             totalIssuance: AugmentedQuery<ApiType, () => Observable<u128>, []>;
         };
+        bounty: {
+            /**
+             * Bounty storage.
+             **/
+            bounties: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletBountyBountyRecord>, [u64]>;
+            /**
+             * Double map for bounty funding. It stores a member or council funding for bounties.
+             **/
+            bountyContributions: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: PalletBountyBountyActor | {
+                Council: any;
+            } | {
+                Member: any;
+            } | string | Uint8Array) => Observable<PalletBountyContribution>, [u64, PalletBountyBountyActor]>;
+            /**
+             * Count of all bounties that have been created.
+             **/
+            bountyCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+            /**
+             * Work entry storage map.
+             **/
+            entries: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletBountyEntryRecord>>, [u64, u64]>;
+            /**
+             * Count of all work entries that have been created.
+             **/
+            entryCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+        };
         constitution: {
             constitution: AugmentedQuery<ApiType, () => Observable<PalletConstitutionConstitutionInfo>, []>;
         };
@@ -530,10 +556,6 @@ declare module '@polkadot/api-base/types/storage' {
              * Counter for all existing categories.
              **/
             categoryCounter: AugmentedQuery<ApiType, () => Observable<u64>, []>;
-            /**
-             * If data migration is done, set as configible for unit test purpose
-             **/
-            dataMigrationDone: AugmentedQuery<ApiType, () => Observable<bool>, []>;
             /**
              * Category identifier value to be used for the next Category created.
              **/
@@ -810,6 +832,13 @@ declare module '@polkadot/api-base/types/storage' {
              **/
             workerStorageSize: AugmentedQuery<ApiType, () => Observable<u16>, []>;
         };
+        multisig: {
+            calls: AugmentedQuery<ApiType, (arg: U8aFixed | string | Uint8Array) => Observable<Option<ITuple<[WrapperKeepOpaque<Call>, AccountId32, u128]>>>, [U8aFixed]>;
+            /**
+             * The set of open multisig operations.
+             **/
+            multisigs: AugmentedQuery<ApiType, (arg1: AccountId32 | string | Uint8Array, arg2: U8aFixed | string | Uint8Array) => Observable<Option<PalletMultisigMultisig>>, [AccountId32, U8aFixed]>;
+        };
         offences: {
             /**
              * A vector of reports of the same kind that happened at the same time slot.
diff --git a/augment/augment-api-query.js b/augment/augment-api-query.js
index c60e7efae22fec89b226cf35ae0a509eda081cbc..ff6fef04a2b798bc3a4fa8f4438e18ee1c5786c0 100644
--- a/augment/augment-api-query.js
+++ b/augment/augment-api-query.js
@@ -1,4 +1,3 @@
-"use strict";
 // Auto-generated via `yarn polkadot-types-from-chain`, do not edit
 /* eslint-disable */
-Object.defineProperty(exports, "__esModule", { value: true });
+export {};
diff --git a/augment/augment-api-rpc.js b/augment/augment-api-rpc.js
index c60e7efae22fec89b226cf35ae0a509eda081cbc..ff6fef04a2b798bc3a4fa8f4438e18ee1c5786c0 100644
--- a/augment/augment-api-rpc.js
+++ b/augment/augment-api-rpc.js
@@ -1,4 +1,3 @@
-"use strict";
 // Auto-generated via `yarn polkadot-types-from-chain`, do not edit
 /* eslint-disable */
-Object.defineProperty(exports, "__esModule", { value: true });
+export {};
diff --git a/augment/augment-api-tx.d.ts b/augment/augment-api-tx.d.ts
index fc2409b620e5b5edd8096cdb3a916ad1bc9eff7f..5e413691c56eb4e2b4563417111fb9d04befbfef 100644
--- a/augment/augment-api-tx.d.ts
+++ b/augment/augment-api-tx.d.ts
@@ -1,8 +1,8 @@
 import type { ApiTypes } from '@polkadot/api-base/types';
-import type { BTreeMap, BTreeSet, Bytes, Compact, Option, Vec, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+import type { BTreeMap, BTreeSet, Bytes, Compact, Option, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
 import type { AnyNumber, IMethod, ITuple } from '@polkadot/types-codec/types';
 import type { AccountId32, Call, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
-import type { JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeSessionKeys, PalletCommonBalanceKind, PalletCommonFundingRequestParameters, PalletCommonWorkingGroup, PalletContentChannelActionPermission, PalletContentChannelCreationParametersRecord, PalletContentChannelOwner, PalletContentChannelUpdateParametersRecord, PalletContentInitTransferParameters, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupContentModerationAction, PalletContentPermissionsCuratorGroupPausableChannelFeature, PalletContentProofElementRecord, PalletContentPullPaymentElement, PalletContentTransferCommitmentParameters, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCreateFoundingMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletProjectTokenMerkleProof, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadMode, PalletProposalsEngineVoteKind, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingRewardDestination, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusSlotsEquivocationProof, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeHeader, SpSessionMembershipProof } from '@polkadot/types/lookup';
+import type { JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeSessionKeys, PalletBountyBountyActor, PalletBountyBountyParameters, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonFundingRequestParameters, PalletCommonProofElementRecord, PalletCommonWorkingGroup, PalletContentChannelActionPermission, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelOwner, PalletContentChannelUpdateParametersRecord, PalletContentInitTransferParameters, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupContentModerationAction, PalletContentPermissionsCuratorGroupPausableChannelFeature, PalletContentPullPaymentElement, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCreateFoundingMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenMerkleProof, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadMode, PalletProposalsEngineVoteKind, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingRewardDestination, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusSlotsEquivocationProof, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeHeader, SpSessionMembershipProof } from '@polkadot/types/lookup';
 declare module '@polkadot/api-base/types/submittable' {
     interface AugmentedSubmittables<ApiType extends ApiTypes> {
         authorship: {
@@ -175,6 +175,230 @@ declare module '@polkadot/api-base/types/submittable' {
              **/
             transferKeepAlive: AugmentedSubmittable<(dest: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Compact<u128>]>;
         };
+        bounty: {
+            /**
+             * Announce work entry for a successful bounty.
+             * # <weight>
+             *
+             * ## weight
+             * `O (W + M)` where:
+             * - `W` is the work_description length.
+             * - `M` is closed contract member list length.
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            announceWorkEntry: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, stakingAccountId: AccountId32 | string | Uint8Array, workDescription: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, AccountId32, Bytes]>;
+            /**
+             * Bounty Contributor made a remark
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (N)`
+             * - `N` is msg length
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            contributorRemark: AugmentedSubmittable<(contributor: PalletBountyBountyActor | {
+                Council: any;
+            } | {
+                Member: any;
+            } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, Bytes]>;
+            /**
+             * Creates a bounty. Metadata stored in the transaction log but discarded after that.
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - `W` is the _metadata length.
+             * - `M` is closed contract member list length.
+             * - DB:
+             * - O(M) (O(1) on open contract)
+             * # </weight>
+             **/
+            createBounty: AugmentedSubmittable<(params: PalletBountyBountyParameters | {
+                oracle?: any;
+                contractType?: any;
+                creator?: any;
+                cherry?: any;
+                oracleReward?: any;
+                entrantStake?: any;
+                fundingType?: any;
+            } | string | Uint8Array, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyParameters, Bytes]>;
+            /**
+             * Bounty Oracle made a remark
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (N)`
+             * - `N` is msg length
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            creatorRemark: AugmentedSubmittable<(creator: PalletBountyBountyActor | {
+                Council: any;
+            } | {
+                Member: any;
+            } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, Bytes]>;
+            /**
+             * end bounty working period.
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            endWorkingPeriod: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Bounty Entrant Worker made a remark
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (N)`
+             * - `N` is msg length
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            entrantRemark: AugmentedSubmittable<(entrantId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, entryId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, Bytes]>;
+            /**
+             * Provides bounty funding.
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            fundBounty: AugmentedSubmittable<(funder: PalletBountyBountyActor | {
+                Council: any;
+            } | {
+                Member: any;
+            } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, u128]>;
+            /**
+             * Bounty Oracle made a remark
+             *
+             * # <weight>
+             *
+             * ## weight
+             * `O (N)`
+             * - `N` is msg length
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            oracleRemark: AugmentedSubmittable<(oracle: PalletBountyBountyActor | {
+                Council: any;
+            } | {
+                Member: any;
+            } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, Bytes]>;
+            /**
+             * Submits an oracle judgment for a bounty, slashing the entries rejected
+             * by an arbitrary percentage and rewarding the winners by an arbitrary amount
+             * (not surpassing the total fund amount)
+             * # <weight>
+             *
+             * ## weight
+             * `O (J + K + W + R)`
+             * - `J` is rationale length,
+             * - `K` is the sum of all action_justification lengths (inside OracleJudgment),
+             * - `W` is number of winner judgment entries,
+             * - `R` is number of rejected judgment entries,
+             * - db:
+             * - `O(W + R)`
+             * # </weight>
+             **/
+            submitOracleJudgment: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array, judgment: BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, Bytes]>;
+            /**
+             * Submit work for a bounty.
+             * # <weight>
+             *
+             * ## weight
+             * `O (N)`
+             * - `N` is the work_data length,
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            submitWork: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, entryId: u64 | AnyNumber | Uint8Array, workData: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, Bytes]>;
+            /**
+             * Oracle switches himself to a new one
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             *
+             **/
+            switchOracle: AugmentedSubmittable<(newOracle: PalletBountyBountyActor | {
+                Council: any;
+            } | {
+                Member: any;
+            } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64]>;
+            /**
+             * Terminates a bounty in funding, funding expired,
+             * worksubmission, judging period.
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            terminateBounty: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Unlocks the stake related to a work entry
+             * After the oracle makes the judgment or the council terminates the bounty by calling terminate_bounty(...),
+             * each worker whose entry has not been judged, can unlock the totality of their stake.
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawEntrantStake: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, entryId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64]>;
+            /**
+             * Withdraw bounty funding by a member or a council.
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawFunding: AugmentedSubmittable<(funder: PalletBountyBountyActor | {
+                Council: any;
+            } | {
+                Member: any;
+            } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64]>;
+            /**
+             * Withraws the oracle reward to oracle
+             * If bounty is successfully, Failed or Cancelled oracle must call this
+             * extrinsic to withdraw the oracle reward,
+             * # <weight>
+             *
+             * ## weight
+             * `O (1)`
+             * - db:
+             * - `O(1)` doesn't depend on the state or parameters
+             * # </weight>
+             **/
+            withdrawOracleReward: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+        };
         constitution: {
             /**
              * Sets the current constitution hash. Requires root origin.
@@ -190,26 +414,67 @@ declare module '@polkadot/api-base/types/submittable' {
             /**
              * Accepts channel transfer.
              * `commitment_params` is required to prevent changing the transfer conditions.
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the number of entries in `commitment_params.new_collaborators` map
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
-            acceptChannelTransfer: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, commitmentParams: PalletContentTransferCommitmentParameters | {
+            acceptChannelTransfer: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, commitmentParams: PalletContentTransferCommitmentParametersBTreeMap | {
                 newCollaborators?: any;
                 price?: any;
                 transferId?: any;
-            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentTransferCommitmentParameters]>;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentTransferCommitmentParametersBTreeMap]>;
             /**
              * Accept incoming Nft offer
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             acceptIncomingOffer: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, witnessPrice: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
             /**
              * Add curator to curator group under given `curator_group_id`
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             addCuratorToGroup: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, curatorId: u64 | AnyNumber | Uint8Array, permissions: BTreeSet<PalletContentChannelActionPermission>) => SubmittableExtrinsic<ApiType>, [u64, u64, BTreeSet<PalletContentChannelActionPermission>]>;
             /**
              * Buy Nft
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             buyNft: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, participantId: u64 | AnyNumber | Uint8Array, witnessPrice: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
             /**
              * Cancel Nft sell order
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * </weight>
              **/
             cancelBuyNow: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -220,6 +485,14 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
             /**
              * cancel channel transfer
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             cancelChannelTransfer: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -228,6 +501,16 @@ declare module '@polkadot/api-base/types/submittable' {
             } | {
                 Lead: any;
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor]>;
+            /**
+             * Cancel video nft english auction
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
             cancelEnglishAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
@@ -237,6 +520,14 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
             /**
              * Cancel Nft offer
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             cancelOffer: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -245,6 +536,16 @@ declare module '@polkadot/api-base/types/submittable' {
             } | {
                 Lead: any;
             } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+            /**
+             * Cancel video nft open auction
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
             cancelOpenAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
@@ -254,10 +555,26 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
             /**
              * Cancel open auction bid
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             cancelOpenAuctionBid: AugmentedSubmittable<(participantId: u64 | AnyNumber | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
             /**
              * Channel collaborator remark
+             * <weight>
+             *
+             * ## Weight
+             * `O (B)`
+             * - DB:
+             * - O(1)
+             * where:
+             * - B is the byte lenght of `msg`
+             * # </weight>
              **/
             channelAgentRemark: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -268,38 +585,79 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Bytes]>;
             /**
              * Channel owner remark
+             * <weight>
+             *
+             * ## Weight
+             * `O (B)`
+             * - DB:
+             * - O(1)
+             * where:
+             * - B is the byte lenght of `msg`
+             * # </weight>
              **/
             channelOwnerRemark: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
+            /**
+             * Claim and withdraw reward in JOY from channel account
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (H)` where:
+             * - `H` is the lenght of the provided merkle `proof`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
             claimAndWithdrawChannelReward: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
                 Member: any;
             } | {
                 Lead: any;
-            } | string | Uint8Array, proof: Vec<PalletContentProofElementRecord> | (PalletContentProofElementRecord | {
+            } | string | Uint8Array, proof: Vec<PalletCommonProofElementRecord> | (PalletCommonProofElementRecord | {
                 hash_?: any;
                 side?: any;
             } | string | Uint8Array)[], item: PalletContentPullPaymentElement | {
                 channelId?: any;
                 cumulativeRewardEarned?: any;
                 reason?: any;
-            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, Vec<PalletContentProofElementRecord>, PalletContentPullPaymentElement]>;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, Vec<PalletCommonProofElementRecord>, PalletContentPullPaymentElement]>;
+            /**
+             * Claim reward in JOY from channel account
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (H)` where:
+             * - `H` is the lenght of the provided merkle `proof`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
             claimChannelReward: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
                 Member: any;
             } | {
                 Lead: any;
-            } | string | Uint8Array, proof: Vec<PalletContentProofElementRecord> | (PalletContentProofElementRecord | {
+            } | string | Uint8Array, proof: Vec<PalletCommonProofElementRecord> | (PalletCommonProofElementRecord | {
                 hash_?: any;
                 side?: any;
             } | string | Uint8Array)[], item: PalletContentPullPaymentElement | {
                 channelId?: any;
                 cumulativeRewardEarned?: any;
                 reason?: any;
-            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, Vec<PalletContentProofElementRecord>, PalletContentPullPaymentElement]>;
+            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, Vec<PalletCommonProofElementRecord>, PalletContentPullPaymentElement]>;
             /**
              * Claim channel's creator token patronage credit
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             claimCreatorTokenPatronageCredit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -308,6 +666,20 @@ declare module '@polkadot/api-base/types/submittable' {
             } | {
                 Lead: any;
             } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C + D + E)` where:
+             * - `A` is the number of entries in `params.collaborators`
+             * - `B` is the number of items in `params.storage_buckets`
+             * - `C` is the number of items in `params.distribution_buckets`
+             * - `D` is the number of items in `params.assets.object_creation_list`
+             * - `E` is the length of  `params.meta`
+             * - DB:
+             * - `O(A + B + C + D)` - from the the generated weights
+             * # </weight>
+             **/
             createChannel: AugmentedSubmittable<(channelOwner: PalletContentChannelOwner | {
                 Member: any;
             } | {
@@ -323,8 +695,30 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentChannelOwner, PalletContentChannelCreationParametersRecord]>;
             /**
              * Add new curator group to runtime storage
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the number of entries in `permissions_by_level` map
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             createCuratorGroup: AugmentedSubmittable<(isActive: bool | boolean | Uint8Array, permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupContentModerationAction>>) => SubmittableExtrinsic<ApiType>, [bool, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupContentModerationAction>>]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C + D)` where:
+             * - `A` is the number of items in `params.assets.object_creation_list`
+             * - `B` is `params.storage_buckets_num_witness`
+             * - `C` is the length of open auction / english auction whitelist (if provided)
+             * - `D` is the length of `params.meta` (if provided)
+             * - DB:
+             * - `O(A + B + C)` - from the the generated weights
+             * # </weight>
+             **/
             createVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
@@ -337,9 +731,20 @@ declare module '@polkadot/api-base/types/submittable' {
                 autoIssueNft?: any;
                 expectedVideoStateBloatBond?: any;
                 expectedDataObjectStateBloatBond?: any;
+                storageBucketsNumWitness?: any;
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentVideoCreationParametersRecord]>;
             /**
              * Perform transfer of tokens as creator token issuer
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B)` where:
+             * - `A` is the number of entries in `outputs`
+             * - `B` is the length of the `metadata`
+             * - DB:
+             * - `O(A)` - from the the generated weights
+             * # </weight>
              **/
             creatorTokenIssuerTransfer: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -347,9 +752,17 @@ declare module '@polkadot/api-base/types/submittable' {
                 Member: any;
             } | {
                 Lead: any;
-            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, outputs: PalletProjectTokenTransfersPaymentWithVesting) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTransfersPaymentWithVesting]>;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, outputs: PalletProjectTokenTransfersPaymentWithVesting, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTransfersPaymentWithVesting, Bytes]>;
             /**
              * Deissue channel's creator token
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             deissueCreatorToken: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -358,50 +771,123 @@ declare module '@polkadot/api-base/types/submittable' {
             } | {
                 Lead: any;
             } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C)` where:
+             * - `A` is `num_objects_to_delete`
+             * - `B` is `channel_bag_witness.storage_buckets_num`
+             * - `C` is `channel_bag_witness.distribution_buckets_num`
+             * - DB:
+             * - `O(A + B + C)` - from the the generated weights
+             * # </weight>
+             **/
             deleteChannel: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
                 Member: any;
             } | {
                 Lead: any;
-            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64]>;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, channelBagWitness: PalletContentChannelBagWitness | {
+                storageBucketsNum?: any;
+                distributionBucketsNum?: any;
+            } | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelBagWitness, u64]>;
             deleteChannelAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
                 Member: any;
             } | {
                 Lead: any;
-            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64, Bytes]>;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, channelBagWitness: PalletContentChannelBagWitness | {
+                storageBucketsNum?: any;
+                distributionBucketsNum?: any;
+            } | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelBagWitness, u64, Bytes]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C)` where:
+             * - `A` is the length of `assets_to_remove`
+             * - `B` is the value of `storage_buckets_num_witness`
+             * - `C` is the length of `rationale`
+             * - DB:
+             * - `O(A + B)` - from the the generated weights
+             * # </weight>
+             **/
             deleteChannelAssetsAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
                 Member: any;
             } | {
                 Lead: any;
-            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, assetsToRemove: BTreeSet<u64>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, BTreeSet<u64>, Bytes]>;
+            } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, assetsToRemove: BTreeSet<u64>, storageBucketsNumWitness: u32 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, BTreeSet<u64>, u32, Bytes]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B)` where:
+             * - `A` is num_objects_to_delete
+             * - `B` is `params.storage_buckets_num_witness` (if provided)
+             * - DB:
+             * - `O(A + B)` - from the the generated weights
+             * # </weight>
+             **/
             deleteVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
                 Member: any;
             } | {
                 Lead: any;
-            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64]>;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: Option<u32> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64, Option<u32>]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C)` where:
+             * - `A` is the value of `num_objects_to_delete`
+             * - `B` is the value of `storage_buckets_num_witness`
+             * - `C` is the length of `rationale`
+             * - DB:
+             * - `O(A + B)` - from the the generated weights
+             * # </weight>
+             **/
             deleteVideoAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
                 Member: any;
             } | {
                 Lead: any;
-            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64, Bytes]>;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: Option<u32> | null | object | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Option<u32>, u64, Bytes]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C)` where:
+             * - `A` is the length of `assets_to_remove`
+             * - `B` is the value of `storage_buckets_num_witness`
+             * - `C` is the length of `rationale`
+             * - DB:
+             * - `O(A + B)` - from the the generated weights
+             * # </weight>
+             **/
             deleteVideoAssetsAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
                 Member: any;
             } | {
                 Lead: any;
-            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, assetsToRemove: BTreeSet<u64>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, BTreeSet<u64>, Bytes]>;
+            } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: u32 | AnyNumber | Uint8Array, assetsToRemove: BTreeSet<u64>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u32, BTreeSet<u64>, Bytes]>;
             /**
              * Destroy NFT
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             destroyNft: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -412,6 +898,14 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
             /**
              * Finalize an ended creator token sale
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             finalizeCreatorTokenSale: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -422,6 +916,14 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
             /**
              * Finalize an ended revenue split
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             finalizeRevenueSplit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -432,6 +934,15 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
             /**
              * Initialize creator token sale
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the length of `params.metadata` (or 0 if not provided)
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             initCreatorTokenSale: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -450,6 +961,15 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTokenSaleParams]>;
             /**
              * Start a channel transfer with specified characteristics
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the number of entries in `transfer_params.new_collaborators` map
+             * - DB:
+             * - O(A) - from the the generated weights
+             * # </weight>
              **/
             initializeChannelTransfer: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -464,6 +984,15 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor, PalletContentInitTransferParameters]>;
             /**
              * Issue creator token
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the number of entries in `params.initial_allocation` map
+             * - DB:
+             * - `O(A)` - from the the generated weights
+             * # </weight>
              **/
             issueCreatorToken: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -480,6 +1009,17 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTokenIssuanceParameters]>;
             /**
              * Issue NFT
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (W + B)`
+             * - DB:
+             * - O(W)
+             * where:
+             * - W : member whitelist length in case nft initial status is auction
+             * - B : bytelength of metadata parameter
+             * # </weight>
              **/
             issueNft: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -495,6 +1035,14 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesNftIssuanceParametersRecord]>;
             /**
              * Issue revenue split for a channel
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             issueRevenueSplit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -505,6 +1053,14 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, start: Option<u32> | null | object | string | Uint8Array, duration: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Option<u32>, u32]>;
             /**
              * Make channel's creator token permissionless
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             makeCreatorTokenPermissionless: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -514,15 +1070,38 @@ declare module '@polkadot/api-base/types/submittable' {
                 Lead: any;
             } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
             /**
-             * Make auction bid
+             * Make english auction bid
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             makeEnglishAuctionBid: AugmentedSubmittable<(participantId: u64 | AnyNumber | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, bidAmount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
             /**
              * Make auction bid
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             makeOpenAuctionBid: AugmentedSubmittable<(participantId: u64 | AnyNumber | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, bidAmount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
             /**
              * NFT owner remark
+             * <weight>
+             *
+             * ## Weight
+             * `O (B)`
+             * - DB:
+             * - O(1)
+             * where:
+             * - B is the byte lenght of `msg`
+             * # </weight>
              **/
             nftOwnerRemark: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -533,6 +1112,14 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Bytes]>;
             /**
              * Offer Nft
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             offerNft: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, ownerId: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -544,6 +1131,13 @@ declare module '@polkadot/api-base/types/submittable' {
             /**
              * Accept open auction bid
              * Should only be called by auctioneer
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             pickOpenAuctionWinner: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -554,6 +1148,14 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, winnerId: u64 | AnyNumber | Uint8Array, commit: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64, u128]>;
             /**
              * Reduce channel's creator token patronage rate to given value
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             reduceCreatorTokenPatronageRateTo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -564,10 +1166,25 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, targetRate: Permill | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Permill]>;
             /**
              * Remove curator from a given curator group
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             removeCuratorFromGroup: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, curatorId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
             /**
              * Sell Nft
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             sellNft: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, ownerId: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -576,6 +1193,18 @@ declare module '@polkadot/api-base/types/submittable' {
             } | {
                 Lead: any;
             } | string | Uint8Array, price: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor, u128]>;
+            /**
+             * Extrinsic for pausing/re-enabling channel features
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the length of `rationale`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
             setChannelPausedFeaturesAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
@@ -583,6 +1212,18 @@ declare module '@polkadot/api-base/types/submittable' {
             } | {
                 Lead: any;
             } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, newPausedFeatures: BTreeSet<PalletContentPermissionsCuratorGroupPausableChannelFeature>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, BTreeSet<PalletContentPermissionsCuratorGroupPausableChannelFeature>, Bytes]>;
+            /**
+             * Extrinsic for setting channel visibility status (hidden/visible) by moderator
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the length of `rationale`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
             setChannelVisibilityAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
@@ -592,13 +1233,40 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, isHidden: bool | boolean | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
             /**
              * Set `is_active` status for curator group under given `curator_group_id`
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             setCuratorGroupStatus: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, isActive: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, bool]>;
             /**
              * Claim won english auction
              * Can be called by anyone
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             settleEnglishAuction: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+            /**
+             * Extrinsic for video visibility status (hidden/visible) setting by moderator
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the length of `rationale`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
             setVideoVisibilityAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
@@ -608,6 +1276,14 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, isHidden: bool | boolean | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
             /**
              * Return Nft back to the original artist at no cost
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             slingNftBack: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, ownerId: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -618,6 +1294,14 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor]>;
             /**
              * Start video nft english auction
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - W : whitelist member list length
+             * - DB:
+             * - O(W)
+             * # </weight>
              **/
             startEnglishAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -636,6 +1320,14 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesEnglishAuctionParamsRecord]>;
             /**
              * Start video nft open auction
+             * <weight>
+             *
+             * ## Weight
+             * `O (W)` where:
+             * - W : member whitelist length
+             * - DB:
+             * - O(W)
+             * # </weight>
              **/
             startOpenAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -652,10 +1344,25 @@ declare module '@polkadot/api-base/types/submittable' {
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesOpenAuctionParamsRecord]>;
             /**
              * Only Council can toggle nft issuance limits constraints
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             toggleNftLimits: AugmentedSubmittable<(enabled: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [bool]>;
             /**
              * Update Buy now nft price
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             updateBuyNowPrice: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -664,6 +1371,20 @@ declare module '@polkadot/api-base/types/submittable' {
             } | {
                 Lead: any;
             } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, newPrice: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u128]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C + D + E)` where:
+             * - `A` is the number of entries in `params.collaborators`
+             * - `B` is the number of items in `params.assets_to_upload.object_creation_list` (if provided)
+             * - `C` is the number of items in `params.assets_to_remove`
+             * - `D` is the length `params.new_meta`
+             * - `E` is `params.storage_buckets_num_witness` (if provided)
+             * - DB:
+             * - `O(A + B + C + E)` - from the the generated weights
+             * # </weight>
+             **/
             updateChannel: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
@@ -676,9 +1397,17 @@ declare module '@polkadot/api-base/types/submittable' {
                 assetsToRemove?: any;
                 collaborators?: any;
                 expectedDataObjectStateBloatBond?: any;
+                storageBucketsNumWitness?: any;
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord]>;
             /**
              * Updates channel's NFT limit.
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             updateChannelNftLimit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -687,6 +1416,17 @@ declare module '@polkadot/api-base/types/submittable' {
             } | {
                 Lead: any;
             } | string | Uint8Array, nftLimitPeriod: PalletContentNftLimitPeriod | 'Daily' | 'Weekly' | number | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, limit: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, PalletContentNftLimitPeriod, u64, u64]>;
+            /**
+             * Update channel payouts
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)` where:
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
             updateChannelPayouts: AugmentedSubmittable<(params: PalletContentUpdateChannelPayoutsParametersRecord | {
                 commitment?: any;
                 payload?: any;
@@ -694,22 +1434,65 @@ declare module '@polkadot/api-base/types/submittable' {
                 maxCashoutAllowed?: any;
                 channelCashoutsEnabled?: any;
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentUpdateChannelPayoutsParametersRecord]>;
+            /**
+             * Extrinsic for updating channel privilege level (requires lead access)
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
+             **/
             updateChannelPrivilegeLevel: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, newPrivilegeLevel: u8 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u8]>;
             /**
              * Updates channel state bloat bond value.
              * Only lead can upload this value
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             updateChannelStateBloatBond: AugmentedSubmittable<(newChannelStateBloatBond: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
             /**
              * Update existing curator group's permissions
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (A)` where:
+             * - `A` is the number of entries in `permissions_by_level` map
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             updateCuratorGroupPermissions: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupContentModerationAction>>) => SubmittableExtrinsic<ApiType>, [u64, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupContentModerationAction>>]>;
             /**
-             * Updates global NFT limit.
+             * Updates global NFT limit
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             updateGlobalNftLimit: AugmentedSubmittable<(nftLimitPeriod: PalletContentNftLimitPeriod | 'Daily' | 'Weekly' | number | Uint8Array, limit: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentNftLimitPeriod, u64]>;
             /**
              * Update upcoming creator token sale
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1) doesn't depend on the state or parameters
+             * # </weight>
              **/
             updateUpcomingCreatorTokenSale: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
@@ -718,6 +1501,20 @@ declare module '@polkadot/api-base/types/submittable' {
             } | {
                 Lead: any;
             } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, newStartBlock: Option<u32> | null | object | string | Uint8Array, newDuration: Option<u32> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Option<u32>, Option<u32>]>;
+            /**
+             * <weight>
+             *
+             * ## Weight
+             * `O (A + B + C + D + E)` where:
+             * - `A` is params.assets_to_upload.object_creation_list.len() (if provided)
+             * - `B` is params.assets_to_remove.len()
+             * - `C` is `params.storage_buckets_num_witness` (if provided)
+             * - `D` is the length of open auction / english auction whitelist (if provided)
+             * - `E` is the length of `params.new_meta` (if provided)
+             * - DB:
+             * - `O(A + B + C + D)` - from the the generated weights
+             * # </weight>
+             **/
             updateVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
@@ -730,12 +1527,32 @@ declare module '@polkadot/api-base/types/submittable' {
                 assetsToRemove?: any;
                 autoIssueNft?: any;
                 expectedDataObjectStateBloatBond?: any;
+                storageBucketsNumWitness?: any;
             } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentVideoUpdateParametersRecord]>;
             /**
              * Updates video state bloat bond value.
              * Only lead can upload this value
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
              **/
             updateVideoStateBloatBond: AugmentedSubmittable<(newVideoStateBloatBond: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+            /**
+             * Withdraw JOY from channel account
+             *
+             * <weight>
+             *
+             * ## Weight
+             * `O (1)`
+             * - DB:
+             * - O(1)
+             * # </weight>
+             **/
             withdrawFromChannelBalance: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | {
                 Curator: any;
             } | {
@@ -1658,19 +2475,6 @@ declare module '@polkadot/api-base/types/submittable' {
             } | {
                 Moderator: any;
             } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, newCategoryId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, u64, u64]>;
-            /**
-             * Like or unlike a post.
-             *
-             * <weight>
-             *
-             * ## Weight
-             * `O (W)` where:
-             * - `W` is the category depth,
-             * - DB:
-             * - O(W)
-             * # </weight>
-             **/
-            reactPost: AugmentedSubmittable<(forumUserId: u64 | AnyNumber | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, postId: u64 | AnyNumber | Uint8Array, react: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, u64, u64]>;
             /**
              * Set stickied threads for category
              *
@@ -2891,6 +3695,145 @@ declare module '@polkadot/api-base/types/submittable' {
              **/
             workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
         };
+        multisig: {
+            /**
+             * Register approval for a dispatch to be made from a deterministic composite account if
+             * approved by a total of `threshold - 1` of `other_signatories`.
+             *
+             * Payment: `DepositBase` will be reserved if this is the first approval, plus
+             * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
+             * is cancelled.
+             *
+             * The dispatch origin for this call must be _Signed_.
+             *
+             * - `threshold`: The total number of approvals for this dispatch before it is executed.
+             * - `other_signatories`: The accounts (other than the sender) who can approve this
+             * dispatch. May not be empty.
+             * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
+             * not the first approval, then it must be `Some`, with the timepoint (block number and
+             * transaction index) of the first approval transaction.
+             * - `call_hash`: The hash of the call to be executed.
+             *
+             * NOTE: If this is the final approval, you will want to use `as_multi` instead.
+             *
+             * # <weight>
+             * - `O(S)`.
+             * - Up to one balance-reserve or unreserve operation.
+             * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
+             * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
+             * - One encode & hash, both of complexity `O(S)`.
+             * - Up to one binary search and insert (`O(logS + S)`).
+             * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
+             * - One event.
+             * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
+             * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
+             * ----------------------------------
+             * - DB Weight:
+             * - Read: Multisig Storage, [Caller Account]
+             * - Write: Multisig Storage, [Caller Account]
+             * # </weight>
+             **/
+            approveAsMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, callHash: U8aFixed | string | Uint8Array, maxWeight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, U8aFixed, u64]>;
+            /**
+             * Register approval for a dispatch to be made from a deterministic composite account if
+             * approved by a total of `threshold - 1` of `other_signatories`.
+             *
+             * If there are enough, then dispatch the call.
+             *
+             * Payment: `DepositBase` will be reserved if this is the first approval, plus
+             * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
+             * is cancelled.
+             *
+             * The dispatch origin for this call must be _Signed_.
+             *
+             * - `threshold`: The total number of approvals for this dispatch before it is executed.
+             * - `other_signatories`: The accounts (other than the sender) who can approve this
+             * dispatch. May not be empty.
+             * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
+             * not the first approval, then it must be `Some`, with the timepoint (block number and
+             * transaction index) of the first approval transaction.
+             * - `call`: The call to be executed.
+             *
+             * NOTE: Unless this is the final approval, you will generally want to use
+             * `approve_as_multi` instead, since it only requires a hash of the call.
+             *
+             * Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
+             * on success, result is `Ok` and the result from the interior call, if it was executed,
+             * may be found in the deposited `MultisigExecuted` event.
+             *
+             * # <weight>
+             * - `O(S + Z + Call)`.
+             * - Up to one balance-reserve or unreserve operation.
+             * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
+             * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
+             * - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
+             * - One encode & hash, both of complexity `O(S)`.
+             * - Up to one binary search and insert (`O(logS + S)`).
+             * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
+             * - One event.
+             * - The weight of the `call`.
+             * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
+             * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
+             * -------------------------------
+             * - DB Weight:
+             * - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)
+             * - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)
+             * - Plus Call Weight
+             * # </weight>
+             **/
+            asMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, call: WrapperKeepOpaque<Call> | object | string | Uint8Array, storeCall: bool | boolean | Uint8Array, maxWeight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, WrapperKeepOpaque<Call>, bool, u64]>;
+            /**
+             * Immediately dispatch a multi-signature call using a single approval from the caller.
+             *
+             * The dispatch origin for this call must be _Signed_.
+             *
+             * - `other_signatories`: The accounts (other than the sender) who are part of the
+             * multi-signature, but do not participate in the approval process.
+             * - `call`: The call to be executed.
+             *
+             * Result is equivalent to the dispatched result.
+             *
+             * # <weight>
+             * O(Z + C) where Z is the length of the call and C its execution weight.
+             * -------------------------------
+             * - DB Weight: None
+             * - Plus Call Weight
+             * # </weight>
+             **/
+            asMultiThreshold1: AugmentedSubmittable<(otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>, Call]>;
+            /**
+             * Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
+             * for this operation will be unreserved on success.
+             *
+             * The dispatch origin for this call must be _Signed_.
+             *
+             * - `threshold`: The total number of approvals for this dispatch before it is executed.
+             * - `other_signatories`: The accounts (other than the sender) who can approve this
+             * dispatch. May not be empty.
+             * - `timepoint`: The timepoint (block number and transaction index) of the first approval
+             * transaction for this dispatch.
+             * - `call_hash`: The hash of the call to be executed.
+             *
+             * # <weight>
+             * - `O(S)`.
+             * - Up to one balance-reserve or unreserve operation.
+             * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
+             * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
+             * - One encode & hash, both of complexity `O(S)`.
+             * - One event.
+             * - I/O: 1 read `O(S)`, one remove.
+             * - Storage: removes one item.
+             * ----------------------------------
+             * - DB Weight:
+             * - Read: Multisig Storage, [Caller Account], Refund Account, Calls
+             * - Write: Multisig Storage, [Caller Account], Refund Account, Calls
+             * # </weight>
+             **/
+            cancelAsMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], timepoint: PalletMultisigTimepoint | {
+                height?: any;
+                index?: any;
+            } | string | Uint8Array, callHash: U8aFixed | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, PalletMultisigTimepoint, U8aFixed]>;
+        };
         operationsWorkingGroupAlpha: {
             /**
              * Add a job opening for a regular worker/lead role.
@@ -3718,6 +4661,7 @@ declare module '@polkadot/api-base/types/submittable' {
              * Postconditions:
              * - Account information for `token_id` x `member_id` removed from storage
              * - bloat bond refunded to `member_id` controller account
+             * (or `bloat_bond.repayment_restricted_to` account)
              *
              * <weight>
              *
@@ -3883,13 +4827,14 @@ declare module '@polkadot/api-base/types/submittable' {
              * <weight>
              *
              * ## Weight
-             * `O (T)` where:
+             * `O (T + M)` where:
              * - `T` is the length of `outputs`
+             * - `M` is the length of `metadata`
              * - DB:
              * - `O(T)` - from the the generated weights
              * # </weight>
              **/
-            transfer: AugmentedSubmittable<(srcMemberId: u64 | AnyNumber | Uint8Array, tokenId: u64 | AnyNumber | Uint8Array, outputs: PalletProjectTokenTransfersPayment) => SubmittableExtrinsic<ApiType>, [u64, u64, PalletProjectTokenTransfersPayment]>;
+            transfer: AugmentedSubmittable<(srcMemberId: u64 | AnyNumber | Uint8Array, tokenId: u64 | AnyNumber | Uint8Array, outputs: PalletProjectTokenTransfersPayment, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, PalletProjectTokenTransfersPayment, Bytes]>;
         };
         proposalsCodex: {
             /**
@@ -4875,18 +5820,6 @@ declare module '@polkadot/api-base/types/submittable' {
              * # </weight>
              **/
             storageOperatorRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
-            /**
-             * Create a dynamic bag. Development mode.
-             **/
-            sudoCreateDynamicBag: AugmentedSubmittable<(params: PalletStorageDynBagCreationParametersRecord | {
-                bagId?: any;
-                objectCreationList?: any;
-                stateBloatBondSourceAccountId?: any;
-                expectedDataSizeFee?: any;
-                expectedDataObjectStateBloatBond?: any;
-                storageBuckets?: any;
-                distributionBuckets?: any;
-            } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDynBagCreationParametersRecord]>;
             /**
              * Upload new data objects. Development mode.
              **/
diff --git a/augment/augment-api-tx.js b/augment/augment-api-tx.js
index c60e7efae22fec89b226cf35ae0a509eda081cbc..ff6fef04a2b798bc3a4fa8f4438e18ee1c5786c0 100644
--- a/augment/augment-api-tx.js
+++ b/augment/augment-api-tx.js
@@ -1,4 +1,3 @@
-"use strict";
 // Auto-generated via `yarn polkadot-types-from-chain`, do not edit
 /* eslint-disable */
-Object.defineProperty(exports, "__esModule", { value: true });
+export {};
diff --git a/augment/augment-api.js b/augment/augment-api.js
index e18ffa2c8be55d7a2694cabdd90be23bfd52d14b..1109edb05f107b9c9916599f376efb57cf81c91b 100644
--- a/augment/augment-api.js
+++ b/augment/augment-api.js
@@ -1,10 +1,8 @@
-"use strict";
 // Auto-generated via `yarn polkadot-types-from-chain`, do not edit
 /* eslint-disable */
-Object.defineProperty(exports, "__esModule", { value: true });
-require("./augment-api-consts");
-require("./augment-api-errors");
-require("./augment-api-events");
-require("./augment-api-query");
-require("./augment-api-tx");
-require("./augment-api-rpc");
+import './augment-api-consts';
+import './augment-api-errors';
+import './augment-api-events';
+import './augment-api-query';
+import './augment-api-tx';
+import './augment-api-rpc';
diff --git a/augment/augment-types.js b/augment/augment-types.js
index c56161d96a47321e024185a89aca087b6af4585f..e27d37b2ff1bfd30fa2bbc0cbb38eed6013870cc 100644
--- a/augment/augment-types.js
+++ b/augment/augment-types.js
@@ -1,4 +1,3 @@
-"use strict";
 // Auto-generated via `yarn polkadot-types-from-defs`, do not edit
 /* eslint-disable */
-Object.defineProperty(exports, "__esModule", { value: true });
+export {};
diff --git a/augment/lookup.d.ts b/augment/lookup.d.ts
index d966fd97bd719f498f07933dfd3d658db494af50..b8a8cc83b992e793e99f5fb8bd829f39f0edba4a 100644
--- a/augment/lookup.d.ts
+++ b/augment/lookup.d.ts
@@ -409,7 +409,45 @@ declare const _default: {
         };
     };
     /**
-     * Lookup61: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+     * Lookup61: pallet_multisig::pallet::Event<T>
+     **/
+    PalletMultisigEvent: {
+        _enum: {
+            NewMultisig: {
+                approving: string;
+                multisig: string;
+                callHash: string;
+            };
+            MultisigApproval: {
+                approving: string;
+                timepoint: string;
+                multisig: string;
+                callHash: string;
+            };
+            MultisigExecuted: {
+                approving: string;
+                timepoint: string;
+                multisig: string;
+                callHash: string;
+                result: string;
+            };
+            MultisigCancelled: {
+                cancelling: string;
+                timepoint: string;
+                multisig: string;
+                callHash: string;
+            };
+        };
+    };
+    /**
+     * Lookup62: pallet_multisig::Timepoint<BlockNumber>
+     **/
+    PalletMultisigTimepoint: {
+        height: string;
+        index: string;
+    };
+    /**
+     * Lookup63: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletCouncilRawEvent: {
         _enum: {
@@ -435,7 +473,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup63: pallet_referendum::RawEvent<Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+     * Lookup65: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
      **/
     PalletReferendumRawEvent: {
         _enum: {
@@ -449,18 +487,18 @@ declare const _default: {
         };
     };
     /**
-     * Lookup64: pallet_referendum::Instance1
+     * Lookup66: pallet_referendum::Instance1
      **/
     PalletReferendumInstance1: string;
     /**
-     * Lookup66: pallet_referendum::OptionResult<MemberId, VotePower>
+     * Lookup68: pallet_referendum::OptionResult<MemberId, VotePower>
      **/
     PalletReferendumOptionResult: {
         optionId: string;
         votePower: string;
     };
     /**
-     * Lookup67: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateFoundingMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+     * Lookup69: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateFoundingMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletMembershipRawEvent: {
         _enum: {
@@ -484,7 +522,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup68: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup70: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipBuyMembershipParameters: {
         rootAccount: string;
@@ -494,7 +532,7 @@ declare const _default: {
         referrerId: string;
     };
     /**
-     * Lookup71: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup73: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipInviteMembershipParameters: {
         invitingMemberId: string;
@@ -504,7 +542,7 @@ declare const _default: {
         metadata: string;
     };
     /**
-     * Lookup72: pallet_membership::CreateFoundingMemberParameters<sp_core::crypto::AccountId32>
+     * Lookup74: pallet_membership::CreateFoundingMemberParameters<sp_core::crypto::AccountId32>
      **/
     PalletMembershipCreateFoundingMemberParameters: {
         rootAccount: string;
@@ -513,7 +551,7 @@ declare const _default: {
         metadata: string;
     };
     /**
-     * Lookup73: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup75: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletMembershipGiftMembershipParameters: {
         rootAccount: string;
@@ -526,7 +564,7 @@ declare const _default: {
         applyRootAccountInvitationLock: string;
     };
     /**
-     * Lookup75: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, PostReactionId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+     * Lookup77: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
      **/
     PalletForumRawEvent: {
         _enum: {
@@ -545,13 +583,12 @@ declare const _default: {
             PostModerated: string;
             PostDeleted: string;
             PostTextUpdated: string;
-            PostReacted: string;
             CategoryStickyThreadUpdate: string;
             CategoryMembershipOfModeratorUpdated: string;
         };
     };
     /**
-     * Lookup76: pallet_forum::PrivilegedActor<T>
+     * Lookup78: pallet_forum::PrivilegedActor<T>
      **/
     PalletForumPrivilegedActor: {
         _enum: {
@@ -560,7 +597,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup77: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+     * Lookup79: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
      **/
     PalletForumExtendedPostIdObject: {
         categoryId: string;
@@ -568,7 +605,7 @@ declare const _default: {
         postId: string;
     };
     /**
-     * Lookup81: pallet_constitution::Event
+     * Lookup83: pallet_constitution::Event
      **/
     PalletConstitutionEvent: {
         _enum: {
@@ -576,7 +613,95 @@ declare const _default: {
         };
     };
     /**
-     * Lookup82: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+     * Lookup84: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+     **/
+    PalletBountyRawEvent: {
+        _enum: {
+            BountyCreated: string;
+            BountyOracleSwitched: string;
+            BountyTerminated: string;
+            BountyFunded: string;
+            BountyMaxFundingReached: string;
+            BountyFundingWithdrawal: string;
+            BountyCreatorCherryWithdrawal: string;
+            BountyCreatorOracleRewardWithdrawal: string;
+            BountyOracleRewardWithdrawal: string;
+            BountyRemoved: string;
+            WorkEntryAnnounced: string;
+            WorkSubmitted: string;
+            OracleJudgmentSubmitted: string;
+            WorkEntrantFundsWithdrawn: string;
+            BountyContributorRemarked: string;
+            BountyOracleRemarked: string;
+            BountyEntrantRemarked: string;
+            BountyCreatorRemarked: string;
+            WorkSubmissionPeriodEnded: string;
+            WorkEntrantStakeUnlocked: string;
+            WorkEntrantStakeSlashed: string;
+            FunderStateBloatBondWithdrawn: string;
+            CreatorStateBloatBondWithdrawn: string;
+        };
+    };
+    /**
+     * Lookup85: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId>
+     **/
+    PalletBountyBountyParameters: {
+        oracle: string;
+        contractType: string;
+        creator: string;
+        cherry: string;
+        oracleReward: string;
+        entrantStake: string;
+        fundingType: string;
+    };
+    /**
+     * Lookup86: pallet_bounty::BountyActor<MemberId>
+     **/
+    PalletBountyBountyActor: {
+        _enum: {
+            Council: string;
+            Member: string;
+        };
+    };
+    /**
+     * Lookup87: pallet_bounty::AssuranceContractType<MemberId>
+     **/
+    PalletBountyAssuranceContractType: {
+        _enum: {
+            Open: string;
+            Closed: string;
+        };
+    };
+    /**
+     * Lookup89: pallet_bounty::FundingType<BlockNumber, Balance>
+     **/
+    PalletBountyFundingType: {
+        _enum: {
+            Perpetual: {
+                target: string;
+            };
+            Limited: {
+                target: string;
+                fundingPeriod: string;
+            };
+        };
+    };
+    /**
+     * Lookup91: pallet_bounty::OracleWorkEntryJudgment<Balance>
+     **/
+    PalletBountyOracleWorkEntryJudgment: {
+        _enum: {
+            Winner: {
+                reward: string;
+            };
+            Rejected: {
+                slashingShare: string;
+                actionJustification: string;
+            };
+        };
+    };
+    /**
+     * Lookup94: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
      **/
     PalletUtilityRawEvent: {
         _enum: {
@@ -587,19 +712,19 @@ declare const _default: {
         };
     };
     /**
-     * Lookup83: pallet_common::working_group::WorkingGroup
+     * Lookup95: pallet_common::working_group::WorkingGroup
      **/
     PalletCommonWorkingGroup: {
         _enum: string[];
     };
     /**
-     * Lookup84: pallet_common::BalanceKind
+     * Lookup96: pallet_common::BalanceKind
      **/
     PalletCommonBalanceKind: {
         _enum: string[];
     };
     /**
-     * Lookup85: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, DataObjectId, BlockNumber, TokenId, TransferId>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<MemberId, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+     * Lookup97: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
      **/
     PalletContentRawEvent: {
         _enum: {
@@ -661,7 +786,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup86: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+     * Lookup98: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
      **/
     PalletContentPermissionsContentActor: {
         _enum: {
@@ -671,7 +796,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup87: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, DataObjectId, BlockNumber, TokenId, TransferId>
+     * Lookup99: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentChannelRecord: {
         owner: string;
@@ -690,7 +815,20 @@ declare const _default: {
         channelStateBloatBond: string;
     };
     /**
-     * Lookup88: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+     * Lookup103: pallet_content::types::ChannelActionPermission
+     **/
+    PalletContentChannelActionPermission: {
+        _enum: string[];
+    };
+    /**
+     * Lookup108: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletCommonBloatBondRepayableBloatBond: {
+        repaymentRestrictedTo: string;
+        amount: string;
+    };
+    /**
+     * Lookup109: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
      **/
     PalletContentChannelOwner: {
         _enum: {
@@ -699,19 +837,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup91: pallet_content::types::ChannelActionPermission
-     **/
-    PalletContentChannelActionPermission: {
-        _enum: string[];
-    };
-    /**
-     * Lookup96: pallet_content::permissions::curator_group::PausableChannelFeature
+     * Lookup111: pallet_content::permissions::curator_group::PausableChannelFeature
      **/
     PalletContentPermissionsCuratorGroupPausableChannelFeature: {
         _enum: string[];
     };
     /**
-     * Lookup98: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId>
+     * Lookup113: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>>
      **/
     PalletContentChannelTransferStatus: {
         _enum: {
@@ -720,36 +852,36 @@ declare const _default: {
         };
     };
     /**
-     * Lookup99: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId>
+     * Lookup114: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>>
      **/
     PalletContentPendingTransfer: {
         newOwner: string;
         transferParams: string;
     };
     /**
-     * Lookup100: pallet_content::types::TransferCommitmentParameters<MemberId, Balance, TransferId>
+     * Lookup115: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>, Balance, TransferId>
      **/
-    PalletContentTransferCommitmentParameters: {
+    PalletContentTransferCommitmentParametersBoundedBTreeMap: {
         newCollaborators: string;
         price: string;
         transferId: string;
     };
     /**
-     * Lookup102: pallet_content::types::LimitPerPeriod<BlockNumber>
+     * Lookup116: pallet_content::types::LimitPerPeriod<BlockNumber>
      **/
     PalletContentLimitPerPeriod: {
         limit: string;
         blockNumberPeriod: string;
     };
     /**
-     * Lookup103: pallet_content::types::NftCounter<BlockNumber>
+     * Lookup117: pallet_content::types::NftCounter<BlockNumber>
      **/
     PalletContentNftCounter: {
         counter: string;
         lastUpdated: string;
     };
     /**
-     * Lookup104: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup118: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionParamsRecord: {
         startingPrice: string;
@@ -761,7 +893,7 @@ declare const _default: {
         minBidStep: string;
     };
     /**
-     * Lookup106: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup120: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesOpenAuctionParamsRecord: {
         startingPrice: string;
@@ -771,7 +903,7 @@ declare const _default: {
         bidLockDuration: string;
     };
     /**
-     * Lookup107: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+     * Lookup121: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
      **/
     PalletContentNftTypesNftIssuanceParametersRecord: {
         royalty: string;
@@ -780,7 +912,7 @@ declare const _default: {
         initTransactionalStatus: string;
     };
     /**
-     * Lookup108: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+     * Lookup122: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
      **/
     PalletContentNftTypesInitTransactionalStatusRecord: {
         _enum: {
@@ -792,7 +924,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup110: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+     * Lookup124: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
      **/
     PalletContentChannelCreationParametersRecord: {
         assets: string;
@@ -804,14 +936,14 @@ declare const _default: {
         expectedDataObjectStateBloatBond: string;
     };
     /**
-     * Lookup111: pallet_content::types::StorageAssetsRecord<Balance>
+     * Lookup125: pallet_content::types::StorageAssetsRecord<Balance>
      **/
     PalletContentStorageAssetsRecord: {
         objectCreationList: string;
         expectedDataSizeFee: string;
     };
     /**
-     * Lookup113: pallet_storage::DataObjectCreationParameters
+     * Lookup127: pallet_storage::DataObjectCreationParameters
      **/
     PalletStorageDataObjectCreationParameters: {
         _alias: {
@@ -821,14 +953,14 @@ declare const _default: {
         ipfsContentId: string;
     };
     /**
-     * Lookup114: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+     * Lookup128: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketIdRecord: {
         distributionBucketFamilyId: string;
         distributionBucketIndex: string;
     };
     /**
-     * Lookup118: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+     * Lookup132: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
      **/
     PalletContentChannelUpdateParametersRecord: {
         assetsToUpload: string;
@@ -836,9 +968,10 @@ declare const _default: {
         assetsToRemove: string;
         collaborators: string;
         expectedDataObjectStateBloatBond: string;
+        storageBucketsNumWitness: string;
     };
     /**
-     * Lookup120: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup134: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoCreationParametersRecord: {
         assets: string;
@@ -846,9 +979,10 @@ declare const _default: {
         autoIssueNft: string;
         expectedVideoStateBloatBond: string;
         expectedDataObjectStateBloatBond: string;
+        storageBucketsNumWitness: string;
     };
     /**
-     * Lookup122: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup136: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoUpdateParametersRecord: {
         assetsToUpload: string;
@@ -856,9 +990,10 @@ declare const _default: {
         assetsToRemove: string;
         autoIssueNft: string;
         expectedDataObjectStateBloatBond: string;
+        storageBucketsNumWitness: string;
     };
     /**
-     * Lookup125: pallet_content::permissions::curator_group::ContentModerationAction
+     * Lookup139: pallet_content::permissions::curator_group::ContentModerationAction
      **/
     PalletContentPermissionsCuratorGroupContentModerationAction: {
         _enum: {
@@ -873,7 +1008,15 @@ declare const _default: {
         };
     };
     /**
-     * Lookup129: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>
+     * Lookup143: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>>, Balance, TransferId>
+     **/
+    PalletContentTransferCommitmentParametersBTreeMap: {
+        newCollaborators: string;
+        price: string;
+        transferId: string;
+    };
+    /**
+     * Lookup144: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>
      **/
     PalletContentUpdateChannelPayoutsParametersRecord: {
         commitment: string;
@@ -883,7 +1026,7 @@ declare const _default: {
         channelCashoutsEnabled: string;
     };
     /**
-     * Lookup130: pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>
+     * Lookup145: pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>
      **/
     PalletContentChannelPayoutsPayloadParametersRecord: {
         uploaderAccount: string;
@@ -892,7 +1035,7 @@ declare const _default: {
         expectedDataObjectStateBloatBond: string;
     };
     /**
-     * Lookup134: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+     * Lookup149: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
      **/
     PalletContentChannelFundsDestination: {
         _enum: {
@@ -901,13 +1044,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup135: pallet_content::types::NftLimitPeriod
+     * Lookup150: pallet_content::types::NftLimitPeriod
      **/
     PalletContentNftLimitPeriod: {
         _enum: string[];
     };
     /**
-     * Lookup136: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex>
+     * Lookup151: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
      **/
     PalletStorageRawEvent: {
         _enum: {
@@ -934,7 +1077,6 @@ declare const _default: {
             VoucherChanged: string;
             StorageBucketDeleted: string;
             NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: string;
-            BagObjectsChanged: string;
             DistributionBucketFamilyCreated: string;
             DistributionBucketFamilyDeleted: string;
             DistributionBucketCreated: string;
@@ -957,7 +1099,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup137: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+     * Lookup152: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
      **/
     PalletStorageUploadParametersRecord: {
         bagId: string;
@@ -967,7 +1109,7 @@ declare const _default: {
         expectedDataObjectStateBloatBond: string;
     };
     /**
-     * Lookup138: pallet_storage::BagIdType<MemberId, ChannelId>
+     * Lookup153: pallet_storage::BagIdType<MemberId, ChannelId>
      **/
     PalletStorageBagIdType: {
         _enum: {
@@ -976,7 +1118,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup139: pallet_storage::StaticBagId
+     * Lookup154: pallet_storage::StaticBagId
      **/
     PalletStorageStaticBagId: {
         _enum: {
@@ -985,7 +1127,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup140: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+     * Lookup155: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
      **/
     PalletStorageDynamicBagIdType: {
         _enum: {
@@ -994,7 +1136,19 @@ declare const _default: {
         };
     };
     /**
-     * Lookup143: pallet_storage::Voucher
+     * Lookup156: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+     **/
+    PalletStorageDynBagCreationParametersRecord: {
+        bagId: string;
+        objectCreationList: string;
+        stateBloatBondSourceAccountId: string;
+        expectedDataSizeFee: string;
+        expectedDataObjectStateBloatBond: string;
+        storageBuckets: string;
+        distributionBuckets: string;
+    };
+    /**
+     * Lookup159: pallet_storage::Voucher
      **/
     PalletStorageVoucher: {
         sizeLimit: string;
@@ -1003,13 +1157,13 @@ declare const _default: {
         objectsUsed: string;
     };
     /**
-     * Lookup144: pallet_storage::DynamicBagType
+     * Lookup160: pallet_storage::DynamicBagType
      **/
     PalletStorageDynamicBagType: {
         _enum: string[];
     };
     /**
-     * Lookup148: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>>
+     * Lookup164: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>>
      **/
     PalletProjectTokenEventsRawEvent: {
         _enum: {
@@ -1034,7 +1188,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup149: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+     * Lookup165: pallet_project_token::types::TransferPolicy<primitive_types::H256>
      **/
     PalletProjectTokenTransferPolicy: {
         _enum: {
@@ -1043,7 +1197,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup150: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+     * Lookup166: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
      **/
     PalletProjectTokenTokenIssuanceParameters: {
         initialAllocation: string;
@@ -1053,14 +1207,14 @@ declare const _default: {
         revenueSplitRate: string;
     };
     /**
-     * Lookup151: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup167: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenAllocation: {
         amount: string;
         vestingScheduleParams: string;
     };
     /**
-     * Lookup152: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+     * Lookup168: pallet_project_token::types::VestingScheduleParams<BlockNumber>
      **/
     PalletProjectTokenVestingScheduleParams: {
         linearVestingDuration: string;
@@ -1068,7 +1222,7 @@ declare const _default: {
         cliffAmountPercentage: string;
     };
     /**
-     * Lookup155: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+     * Lookup171: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
      **/
     PalletProjectTokenTransferPolicyParams: {
         _enum: {
@@ -1077,14 +1231,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup156: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+     * Lookup172: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
      **/
     PalletProjectTokenWhitelistParams: {
         commitment: string;
         payload: string;
     };
     /**
-     * Lookup157: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+     * Lookup173: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
      **/
     PalletProjectTokenSingleDataObjectUploadParams: {
         objectCreationParams: string;
@@ -1092,7 +1246,7 @@ declare const _default: {
         expectedDataObjectStateBloatBond: string;
     };
     /**
-     * Lookup164: pallet_project_token::types::Validated<MemberId>
+     * Lookup180: pallet_project_token::types::Validated<MemberId>
      **/
     PalletProjectTokenValidated: {
         _enum: {
@@ -1101,22 +1255,21 @@ declare const _default: {
         };
     };
     /**
-     * Lookup165: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup181: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
      **/
     PalletProjectTokenValidatedPayment: {
         payment: string;
         vestingCleanupCandidate: string;
     };
     /**
-     * Lookup166: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup182: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenPaymentWithVesting: {
-        remark: string;
         amount: string;
         vestingSchedule: string;
     };
     /**
-     * Lookup168: pallet_project_token::types::VestingSource
+     * Lookup184: pallet_project_token::types::VestingSource
      **/
     PalletProjectTokenVestingSource: {
         _enum: {
@@ -1126,7 +1279,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup172: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+     * Lookup188: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletProjectTokenTokenSale: {
         unitPrice: string;
@@ -1141,7 +1294,7 @@ declare const _default: {
         autoFinalize: string;
     };
     /**
-     * Lookup174: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+     * Lookup190: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
      **/
     PalletProposalsEngineRawEvent: {
         _enum: {
@@ -1154,7 +1307,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup175: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+     * Lookup191: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
      **/
     PalletProposalsEngineProposalStatusesProposalStatus: {
         _enum: {
@@ -1164,7 +1317,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup176: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+     * Lookup192: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
      **/
     PalletProposalsEngineProposalStatusesProposalDecision: {
         _enum: {
@@ -1178,13 +1331,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup177: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+     * Lookup193: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
      **/
     PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
         _enum: string[];
     };
     /**
-     * Lookup178: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+     * Lookup194: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
      **/
     PalletProposalsEngineProposalStatusesExecutionStatus: {
         _enum: {
@@ -1195,13 +1348,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup179: pallet_proposals_engine::types::VoteKind
+     * Lookup195: pallet_proposals_engine::types::VoteKind
      **/
     PalletProposalsEngineVoteKind: {
         _enum: string[];
     };
     /**
-     * Lookup180: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+     * Lookup196: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
      **/
     PalletProposalsDiscussionRawEvent: {
         _enum: {
@@ -1213,7 +1366,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup181: pallet_proposals_discussion::types::ThreadMode<MemberId>
+     * Lookup197: pallet_proposals_discussion::types::ThreadMode<MemberId>
      **/
     PalletProposalsDiscussionThreadMode: {
         _enum: {
@@ -1222,7 +1375,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup182: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+     * Lookup198: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
      **/
     PalletProposalsCodexRawEvent: {
         _enum: {
@@ -1230,7 +1383,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup183: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+     * Lookup199: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
      **/
     PalletProposalsCodexGeneralProposalParams: {
         memberId: string;
@@ -1240,7 +1393,7 @@ declare const _default: {
         exactExecutionBlock: string;
     };
     /**
-     * Lookup184: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>
+     * Lookup200: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>
      **/
     PalletProposalsCodexProposalDetails: {
         _enum: {
@@ -1270,14 +1423,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup186: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+     * Lookup202: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
      **/
     PalletCommonFundingRequestParameters: {
         account: string;
         amount: string;
     };
     /**
-     * Lookup187: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+     * Lookup203: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
      **/
     PalletProposalsCodexCreateOpeningParameters: {
         description: string;
@@ -1286,14 +1439,14 @@ declare const _default: {
         group: string;
     };
     /**
-     * Lookup188: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+     * Lookup204: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
      **/
     PalletWorkingGroupStakePolicy: {
         stakeAmount: string;
         leavingUnstakingPeriod: string;
     };
     /**
-     * Lookup189: pallet_proposals_codex::types::FillOpeningParameters
+     * Lookup205: pallet_proposals_codex::types::FillOpeningParameters
      **/
     PalletProposalsCodexFillOpeningParameters: {
         openingId: string;
@@ -1301,7 +1454,7 @@ declare const _default: {
         workingGroup: string;
     };
     /**
-     * Lookup190: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+     * Lookup206: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
      **/
     PalletProposalsCodexTerminateRoleParameters: {
         workerId: string;
@@ -1309,7 +1462,7 @@ declare const _default: {
         group: string;
     };
     /**
-     * Lookup191: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance1>
+     * Lookup207: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance1>
      **/
     PalletWorkingGroupRawEventInstance1: {
         _enum: {
@@ -1342,13 +1495,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup195: pallet_working_group::types::OpeningType
+     * Lookup211: pallet_working_group::types::OpeningType
      **/
     PalletWorkingGroupOpeningType: {
         _enum: string[];
     };
     /**
-     * Lookup196: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+     * Lookup212: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupApplyOnOpeningParams: {
         memberId: string;
@@ -1359,24 +1512,24 @@ declare const _default: {
         stakeParameters: string;
     };
     /**
-     * Lookup197: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup213: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupStakeParameters: {
         stake: string;
         stakingAccountId: string;
     };
     /**
-     * Lookup198: pallet_working_group::Instance1
+     * Lookup214: pallet_working_group::Instance1
      **/
     PalletWorkingGroupInstance1: string;
     /**
-     * Lookup199: pallet_working_group::types::RewardPaymentType
+     * Lookup215: pallet_working_group::types::RewardPaymentType
      **/
     PalletWorkingGroupRewardPaymentType: {
         _enum: string[];
     };
     /**
-     * Lookup200: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance2>
+     * Lookup216: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance2>
      **/
     PalletWorkingGroupRawEventInstance2: {
         _enum: {
@@ -1409,11 +1562,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup201: pallet_working_group::Instance2
+     * Lookup217: pallet_working_group::Instance2
      **/
     PalletWorkingGroupInstance2: string;
     /**
-     * Lookup202: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance3>
+     * Lookup218: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance3>
      **/
     PalletWorkingGroupRawEventInstance3: {
         _enum: {
@@ -1446,11 +1599,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup203: pallet_working_group::Instance3
+     * Lookup219: pallet_working_group::Instance3
      **/
     PalletWorkingGroupInstance3: string;
     /**
-     * Lookup204: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance4>
+     * Lookup220: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance4>
      **/
     PalletWorkingGroupRawEventInstance4: {
         _enum: {
@@ -1483,11 +1636,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup205: pallet_working_group::Instance4
+     * Lookup221: pallet_working_group::Instance4
      **/
     PalletWorkingGroupInstance4: string;
     /**
-     * Lookup206: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance5>
+     * Lookup222: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance5>
      **/
     PalletWorkingGroupRawEventInstance5: {
         _enum: {
@@ -1520,11 +1673,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup207: pallet_working_group::Instance5
+     * Lookup223: pallet_working_group::Instance5
      **/
     PalletWorkingGroupInstance5: string;
     /**
-     * Lookup208: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance6>
+     * Lookup224: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance6>
      **/
     PalletWorkingGroupRawEventInstance6: {
         _enum: {
@@ -1557,11 +1710,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup209: pallet_working_group::Instance6
+     * Lookup225: pallet_working_group::Instance6
      **/
     PalletWorkingGroupInstance6: string;
     /**
-     * Lookup210: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance7>
+     * Lookup226: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance7>
      **/
     PalletWorkingGroupRawEventInstance7: {
         _enum: {
@@ -1594,11 +1747,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup211: pallet_working_group::Instance7
+     * Lookup227: pallet_working_group::Instance7
      **/
     PalletWorkingGroupInstance7: string;
     /**
-     * Lookup212: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance8>
+     * Lookup228: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance8>
      **/
     PalletWorkingGroupRawEventInstance8: {
         _enum: {
@@ -1631,11 +1784,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup213: pallet_working_group::Instance8
+     * Lookup229: pallet_working_group::Instance8
      **/
     PalletWorkingGroupInstance8: string;
     /**
-     * Lookup214: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance9>
+     * Lookup230: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance9>
      **/
     PalletWorkingGroupRawEventInstance9: {
         _enum: {
@@ -1668,11 +1821,11 @@ declare const _default: {
         };
     };
     /**
-     * Lookup215: pallet_working_group::Instance9
+     * Lookup231: pallet_working_group::Instance9
      **/
     PalletWorkingGroupInstance9: string;
     /**
-     * Lookup216: frame_system::Phase
+     * Lookup232: frame_system::Phase
      **/
     FrameSystemPhase: {
         _enum: {
@@ -1682,14 +1835,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup220: frame_system::LastRuntimeUpgradeInfo
+     * Lookup236: frame_system::LastRuntimeUpgradeInfo
      **/
     FrameSystemLastRuntimeUpgradeInfo: {
         specVersion: string;
         specName: string;
     };
     /**
-     * Lookup223: frame_system::pallet::Call<T>
+     * Lookup239: frame_system::pallet::Call<T>
      **/
     FrameSystemCall: {
         _enum: {
@@ -1727,7 +1880,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup226: frame_system::limits::BlockWeights
+     * Lookup242: frame_system::limits::BlockWeights
      **/
     FrameSystemLimitsBlockWeights: {
         baseBlock: string;
@@ -1735,7 +1888,7 @@ declare const _default: {
         perClass: string;
     };
     /**
-     * Lookup227: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+     * Lookup243: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
      **/
     FrameSupportWeightsPerDispatchClassWeightsPerClass: {
         normal: string;
@@ -1743,7 +1896,7 @@ declare const _default: {
         mandatory: string;
     };
     /**
-     * Lookup228: frame_system::limits::WeightsPerClass
+     * Lookup244: frame_system::limits::WeightsPerClass
      **/
     FrameSystemLimitsWeightsPerClass: {
         baseExtrinsic: string;
@@ -1752,13 +1905,13 @@ declare const _default: {
         reserved: string;
     };
     /**
-     * Lookup229: frame_system::limits::BlockLength
+     * Lookup245: frame_system::limits::BlockLength
      **/
     FrameSystemLimitsBlockLength: {
         max: string;
     };
     /**
-     * Lookup230: frame_support::weights::PerDispatchClass<T>
+     * Lookup246: frame_support::weights::PerDispatchClass<T>
      **/
     FrameSupportWeightsPerDispatchClassU32: {
         normal: string;
@@ -1766,14 +1919,14 @@ declare const _default: {
         mandatory: string;
     };
     /**
-     * Lookup231: frame_support::weights::RuntimeDbWeight
+     * Lookup247: frame_support::weights::RuntimeDbWeight
      **/
     FrameSupportWeightsRuntimeDbWeight: {
         read: string;
         write: string;
     };
     /**
-     * Lookup232: sp_version::RuntimeVersion
+     * Lookup248: sp_version::RuntimeVersion
      **/
     SpVersionRuntimeVersion: {
         specName: string;
@@ -1786,13 +1939,13 @@ declare const _default: {
         stateVersion: string;
     };
     /**
-     * Lookup238: frame_system::pallet::Error<T>
+     * Lookup254: frame_system::pallet::Error<T>
      **/
     FrameSystemError: {
         _enum: string[];
     };
     /**
-     * Lookup239: pallet_utility::pallet::Call<T>
+     * Lookup255: pallet_utility::pallet::Call<T>
      **/
     PalletUtilityCall: {
         _enum: {
@@ -1816,7 +1969,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup242: pallet_babe::pallet::Call<T>
+     * Lookup258: pallet_babe::pallet::Call<T>
      **/
     PalletBabeCall: {
         _enum: {
@@ -1834,7 +1987,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup243: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+     * Lookup259: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
      **/
     SpConsensusSlotsEquivocationProof: {
         offender: string;
@@ -1843,7 +1996,7 @@ declare const _default: {
         secondHeader: string;
     };
     /**
-     * Lookup244: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+     * Lookup260: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
      **/
     SpRuntimeHeader: {
         parentHash: string;
@@ -1853,15 +2006,15 @@ declare const _default: {
         digest: string;
     };
     /**
-     * Lookup245: sp_runtime::traits::BlakeTwo256
+     * Lookup261: sp_runtime::traits::BlakeTwo256
      **/
     SpRuntimeBlakeTwo256: string;
     /**
-     * Lookup246: sp_consensus_babe::app::Public
+     * Lookup262: sp_consensus_babe::app::Public
      **/
     SpConsensusBabeAppPublic: string;
     /**
-     * Lookup248: sp_session::MembershipProof
+     * Lookup264: sp_session::MembershipProof
      **/
     SpSessionMembershipProof: {
         session: string;
@@ -1869,7 +2022,7 @@ declare const _default: {
         validatorCount: string;
     };
     /**
-     * Lookup249: sp_consensus_babe::digests::NextConfigDescriptor
+     * Lookup265: sp_consensus_babe::digests::NextConfigDescriptor
      **/
     SpConsensusBabeDigestsNextConfigDescriptor: {
         _enum: {
@@ -1881,13 +2034,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup250: sp_consensus_babe::AllowedSlots
+     * Lookup266: sp_consensus_babe::AllowedSlots
      **/
     SpConsensusBabeAllowedSlots: {
         _enum: string[];
     };
     /**
-     * Lookup251: pallet_timestamp::pallet::Call<T>
+     * Lookup267: pallet_timestamp::pallet::Call<T>
      **/
     PalletTimestampCall: {
         _enum: {
@@ -1897,7 +2050,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup253: pallet_authorship::pallet::Call<T>
+     * Lookup269: pallet_authorship::pallet::Call<T>
      **/
     PalletAuthorshipCall: {
         _enum: {
@@ -1907,7 +2060,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup255: pallet_balances::pallet::Call<T, I>
+     * Lookup271: pallet_balances::pallet::Call<T, I>
      **/
     PalletBalancesCall: {
         _enum: {
@@ -1940,7 +2093,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup256: pallet_election_provider_multi_phase::pallet::Call<T>
+     * Lookup272: pallet_election_provider_multi_phase::pallet::Call<T>
      **/
     PalletElectionProviderMultiPhaseCall: {
         _enum: {
@@ -1964,7 +2117,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup257: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+     * Lookup273: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
      **/
     PalletElectionProviderMultiPhaseRawSolution: {
         solution: string;
@@ -1972,7 +2125,7 @@ declare const _default: {
         round: string;
     };
     /**
-     * Lookup258: joystream_node_runtime::NposSolution16
+     * Lookup274: joystream_node_runtime::NposSolution16
      **/
     JoystreamNodeRuntimeNposSolution16: {
         votes1: string;
@@ -1993,7 +2146,7 @@ declare const _default: {
         votes16: string;
     };
     /**
-     * Lookup309: sp_npos_elections::ElectionScore
+     * Lookup325: sp_npos_elections::ElectionScore
      **/
     SpNposElectionsElectionScore: {
         minimalStake: string;
@@ -2001,21 +2154,21 @@ declare const _default: {
         sumStakeSquared: string;
     };
     /**
-     * Lookup310: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+     * Lookup326: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
      **/
     PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
         voters: string;
         targets: string;
     };
     /**
-     * Lookup314: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+     * Lookup330: sp_npos_elections::Support<sp_core::crypto::AccountId32>
      **/
     SpNposElectionsSupport: {
         total: string;
         voters: string;
     };
     /**
-     * Lookup317: pallet_staking::pallet::pallet::Call<T>
+     * Lookup333: pallet_staking::pallet::pallet::Call<T>
      **/
     PalletStakingPalletCall: {
         _enum: {
@@ -2107,7 +2260,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup318: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
+     * Lookup334: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
      **/
     PalletStakingRewardDestination: {
         _enum: {
@@ -2119,7 +2272,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup322: pallet_staking::pallet::pallet::ConfigOp<T>
+     * Lookup338: pallet_staking::pallet::pallet::ConfigOp<T>
      **/
     PalletStakingPalletConfigOpU128: {
         _enum: {
@@ -2129,7 +2282,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup323: pallet_staking::pallet::pallet::ConfigOp<T>
+     * Lookup339: pallet_staking::pallet::pallet::ConfigOp<T>
      **/
     PalletStakingPalletConfigOpU32: {
         _enum: {
@@ -2139,7 +2292,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup324: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
+     * Lookup340: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
      **/
     PalletStakingPalletConfigOpPercent: {
         _enum: {
@@ -2149,7 +2302,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup325: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
+     * Lookup341: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
      **/
     PalletStakingPalletConfigOpPerbill: {
         _enum: {
@@ -2159,7 +2312,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup326: pallet_session::pallet::Call<T>
+     * Lookup342: pallet_session::pallet::Call<T>
      **/
     PalletSessionCall: {
         _enum: {
@@ -2174,7 +2327,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup327: joystream_node_runtime::SessionKeys
+     * Lookup343: joystream_node_runtime::SessionKeys
      **/
     JoystreamNodeRuntimeSessionKeys: {
         grandpa: string;
@@ -2183,11 +2336,11 @@ declare const _default: {
         authorityDiscovery: string;
     };
     /**
-     * Lookup328: sp_authority_discovery::app::Public
+     * Lookup344: sp_authority_discovery::app::Public
      **/
     SpAuthorityDiscoveryAppPublic: string;
     /**
-     * Lookup329: pallet_grandpa::pallet::Call<T>
+     * Lookup345: pallet_grandpa::pallet::Call<T>
      **/
     PalletGrandpaCall: {
         _enum: {
@@ -2206,14 +2359,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup330: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
+     * Lookup346: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
      **/
     SpFinalityGrandpaEquivocationProof: {
         setId: string;
         equivocation: string;
     };
     /**
-     * Lookup331: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
+     * Lookup347: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
      **/
     SpFinalityGrandpaEquivocation: {
         _enum: {
@@ -2222,7 +2375,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup332: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     * Lookup348: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
      **/
     FinalityGrandpaEquivocationPrevote: {
         roundNumber: string;
@@ -2231,22 +2384,22 @@ declare const _default: {
         second: string;
     };
     /**
-     * Lookup333: finality_grandpa::Prevote<primitive_types::H256, N>
+     * Lookup349: finality_grandpa::Prevote<primitive_types::H256, N>
      **/
     FinalityGrandpaPrevote: {
         targetHash: string;
         targetNumber: string;
     };
     /**
-     * Lookup334: sp_finality_grandpa::app::Signature
+     * Lookup350: sp_finality_grandpa::app::Signature
      **/
     SpFinalityGrandpaAppSignature: string;
     /**
-     * Lookup335: sp_core::ed25519::Signature
+     * Lookup351: sp_core::ed25519::Signature
      **/
     SpCoreEd25519Signature: string;
     /**
-     * Lookup338: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     * Lookup354: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
      **/
     FinalityGrandpaEquivocationPrecommit: {
         roundNumber: string;
@@ -2255,14 +2408,14 @@ declare const _default: {
         second: string;
     };
     /**
-     * Lookup339: finality_grandpa::Precommit<primitive_types::H256, N>
+     * Lookup355: finality_grandpa::Precommit<primitive_types::H256, N>
      **/
     FinalityGrandpaPrecommit: {
         targetHash: string;
         targetNumber: string;
     };
     /**
-     * Lookup341: pallet_im_online::pallet::Call<T>
+     * Lookup357: pallet_im_online::pallet::Call<T>
      **/
     PalletImOnlineCall: {
         _enum: {
@@ -2273,7 +2426,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup342: pallet_im_online::Heartbeat<BlockNumber>
+     * Lookup358: pallet_im_online::Heartbeat<BlockNumber>
      **/
     PalletImOnlineHeartbeat: {
         blockNumber: string;
@@ -2283,22 +2436,22 @@ declare const _default: {
         validatorsLen: string;
     };
     /**
-     * Lookup343: sp_core::offchain::OpaqueNetworkState
+     * Lookup359: sp_core::offchain::OpaqueNetworkState
      **/
     SpCoreOffchainOpaqueNetworkState: {
         peerId: string;
         externalAddresses: string;
     };
     /**
-     * Lookup347: pallet_im_online::sr25519::app_sr25519::Signature
+     * Lookup363: pallet_im_online::sr25519::app_sr25519::Signature
      **/
     PalletImOnlineSr25519AppSr25519Signature: string;
     /**
-     * Lookup348: sp_core::sr25519::Signature
+     * Lookup364: sp_core::sr25519::Signature
      **/
     SpCoreSr25519Signature: string;
     /**
-     * Lookup349: pallet_sudo::pallet::Call<T>
+     * Lookup365: pallet_sudo::pallet::Call<T>
      **/
     PalletSudoCall: {
         _enum: {
@@ -2322,7 +2475,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup350: pallet_bags_list::pallet::Call<T, I>
+     * Lookup366: pallet_bags_list::pallet::Call<T, I>
      **/
     PalletBagsListCall: {
         _enum: {
@@ -2335,7 +2488,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup351: pallet_vesting::pallet::Call<T>
+     * Lookup367: pallet_vesting::pallet::Call<T>
      **/
     PalletVestingCall: {
         _enum: {
@@ -2359,7 +2512,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup352: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+     * Lookup368: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
      **/
     PalletVestingVestingInfo: {
         locked: string;
@@ -2367,7 +2520,39 @@ declare const _default: {
         startingBlock: string;
     };
     /**
-     * Lookup353: pallet_council::Call<T>
+     * Lookup369: pallet_multisig::pallet::Call<T>
+     **/
+    PalletMultisigCall: {
+        _enum: {
+            as_multi_threshold_1: {
+                otherSignatories: string;
+                call: string;
+            };
+            as_multi: {
+                threshold: string;
+                otherSignatories: string;
+                maybeTimepoint: string;
+                call: string;
+                storeCall: string;
+                maxWeight: string;
+            };
+            approve_as_multi: {
+                threshold: string;
+                otherSignatories: string;
+                maybeTimepoint: string;
+                callHash: string;
+                maxWeight: string;
+            };
+            cancel_as_multi: {
+                threshold: string;
+                otherSignatories: string;
+                timepoint: string;
+                callHash: string;
+            };
+        };
+    };
+    /**
+     * Lookup372: pallet_council::Call<T>
      **/
     PalletCouncilCall: {
         _enum: {
@@ -2418,7 +2603,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup354: pallet_referendum::Call<T, I>
+     * Lookup373: pallet_referendum::Call<T, I>
      **/
     PalletReferendumCall: {
         _enum: {
@@ -2434,7 +2619,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup355: pallet_membership::Call<T>
+     * Lookup374: pallet_membership::Call<T>
      **/
     PalletMembershipCall: {
         _enum: {
@@ -2502,7 +2687,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup356: pallet_forum::Call<T>
+     * Lookup375: pallet_forum::Call<T>
      **/
     PalletForumCall: {
         _enum: {
@@ -2572,13 +2757,6 @@ declare const _default: {
                 text: string;
                 editable: string;
             };
-            react_post: {
-                forumUserId: string;
-                categoryId: string;
-                threadId: string;
-                postId: string;
-                react: string;
-            };
             edit_post_text: {
                 forumUserId: string;
                 categoryId: string;
@@ -2606,7 +2784,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup357: pallet_constitution::Call<T>
+     * Lookup376: pallet_constitution::Call<T>
      **/
     PalletConstitutionCall: {
         _enum: {
@@ -2616,7 +2794,83 @@ declare const _default: {
         };
     };
     /**
-     * Lookup359: pallet_content::Call<T>
+     * Lookup377: pallet_bounty::Call<T>
+     **/
+    PalletBountyCall: {
+        _enum: {
+            create_bounty: {
+                params: string;
+                metadata: string;
+            };
+            fund_bounty: {
+                funder: string;
+                bountyId: string;
+                amount: string;
+            };
+            terminate_bounty: {
+                bountyId: string;
+            };
+            switch_oracle: {
+                newOracle: string;
+                bountyId: string;
+            };
+            withdraw_funding: {
+                funder: string;
+                bountyId: string;
+            };
+            announce_work_entry: {
+                memberId: string;
+                bountyId: string;
+                stakingAccountId: string;
+                workDescription: string;
+            };
+            submit_work: {
+                memberId: string;
+                bountyId: string;
+                entryId: string;
+                workData: string;
+            };
+            end_working_period: {
+                bountyId: string;
+            };
+            submit_oracle_judgment: {
+                bountyId: string;
+                judgment: string;
+                rationale: string;
+            };
+            withdraw_entrant_stake: {
+                memberId: string;
+                bountyId: string;
+                entryId: string;
+            };
+            withdraw_oracle_reward: {
+                bountyId: string;
+            };
+            contributor_remark: {
+                contributor: string;
+                bountyId: string;
+                msg: string;
+            };
+            oracle_remark: {
+                oracle: string;
+                bountyId: string;
+                msg: string;
+            };
+            entrant_remark: {
+                entrantId: string;
+                bountyId: string;
+                entryId: string;
+                msg: string;
+            };
+            creator_remark: {
+                creator: string;
+                bountyId: string;
+                msg: string;
+            };
+        };
+    };
+    /**
+     * Lookup379: pallet_content::Call<T>
      **/
     PalletContentCall: {
         _enum: {
@@ -2663,17 +2917,20 @@ declare const _default: {
             delete_channel: {
                 actor: string;
                 channelId: string;
+                channelBagWitness: string;
                 numObjectsToDelete: string;
             };
             delete_channel_assets_as_moderator: {
                 actor: string;
                 channelId: string;
                 assetsToRemove: string;
+                storageBucketsNumWitness: string;
                 rationale: string;
             };
             delete_channel_as_moderator: {
                 actor: string;
                 channelId: string;
+                channelBagWitness: string;
                 numObjectsToDelete: string;
                 rationale: string;
             };
@@ -2697,16 +2954,19 @@ declare const _default: {
                 actor: string;
                 videoId: string;
                 numObjectsToDelete: string;
+                storageBucketsNumWitness: string;
             };
             delete_video_assets_as_moderator: {
                 actor: string;
                 videoId: string;
+                storageBucketsNumWitness: string;
                 assetsToRemove: string;
                 rationale: string;
             };
             delete_video_as_moderator: {
                 actor: string;
                 videoId: string;
+                storageBucketsNumWitness: string;
                 numObjectsToDelete: string;
                 rationale: string;
             };
@@ -2887,6 +3147,7 @@ declare const _default: {
                 actor: string;
                 channelId: string;
                 outputs: string;
+                metadata: string;
             };
             make_creator_token_permissionless: {
                 actor: string;
@@ -2922,9 +3183,16 @@ declare const _default: {
         };
     };
     /**
-     * Lookup361: pallet_content::types::ProofElementRecord<primitive_types::H256, pallet_content::types::Side>
+     * Lookup380: pallet_content::types::ChannelBagWitness
      **/
-    PalletContentProofElementRecord: {
+    PalletContentChannelBagWitness: {
+        storageBucketsNum: string;
+        distributionBucketsNum: string;
+    };
+    /**
+     * Lookup382: pallet_common::ProofElementRecord<primitive_types::H256, pallet_common::Side>
+     **/
+    PalletCommonProofElementRecord: {
         _alias: {
             hash_: string;
         };
@@ -2932,13 +3200,13 @@ declare const _default: {
         side: string;
     };
     /**
-     * Lookup362: pallet_content::types::Side
+     * Lookup383: pallet_common::Side
      **/
-    PalletContentSide: {
+    PalletCommonSide: {
         _enum: string[];
     };
     /**
-     * Lookup363: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+     * Lookup384: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
      **/
     PalletContentPullPaymentElement: {
         channelId: string;
@@ -2946,7 +3214,7 @@ declare const _default: {
         reason: string;
     };
     /**
-     * Lookup364: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+     * Lookup385: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
      **/
     PalletContentInitTransferParameters: {
         newCollaborators: string;
@@ -2954,7 +3222,7 @@ declare const _default: {
         newOwner: string;
     };
     /**
-     * Lookup365: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup386: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenSaleParams: {
         unitPrice: string;
@@ -2966,11 +3234,11 @@ declare const _default: {
         metadata: string;
     };
     /**
-     * Lookup366: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup387: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
      **/
     PalletProjectTokenTransfersPaymentWithVesting: string;
     /**
-     * Lookup370: pallet_storage::Call<T>
+     * Lookup391: pallet_storage::Call<T>
      **/
     PalletStorageCall: {
         _enum: {
@@ -3107,9 +3375,6 @@ declare const _default: {
             sudo_upload_data_objects: {
                 params: string;
             };
-            sudo_create_dynamic_bag: {
-                params: string;
-            };
             storage_operator_remark: {
                 workerId: string;
                 storageBucketId: string;
@@ -3123,19 +3388,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup371: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
-     **/
-    PalletStorageDynBagCreationParametersRecord: {
-        bagId: string;
-        objectCreationList: string;
-        stateBloatBondSourceAccountId: string;
-        expectedDataSizeFee: string;
-        expectedDataObjectStateBloatBond: string;
-        storageBuckets: string;
-        distributionBuckets: string;
-    };
-    /**
-     * Lookup372: pallet_project_token::Call<T>
+     * Lookup392: pallet_project_token::Call<T>
      **/
     PalletProjectTokenCall: {
         _enum: {
@@ -3143,6 +3396,7 @@ declare const _default: {
                 srcMemberId: string;
                 tokenId: string;
                 outputs: string;
+                metadata: string;
             };
             burn: {
                 tokenId: string;
@@ -3175,28 +3429,27 @@ declare const _default: {
         };
     };
     /**
-     * Lookup373: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
+     * Lookup393: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
      **/
     PalletProjectTokenTransfersPayment: string;
     /**
-     * Lookup374: pallet_project_token::types::Payment<Balance>
+     * Lookup394: pallet_project_token::types::Payment<Balance>
      **/
     PalletProjectTokenPayment: {
-        remark: string;
         amount: string;
     };
     /**
-     * Lookup378: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+     * Lookup398: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
      **/
     PalletProjectTokenMerkleProof: string;
     /**
-     * Lookup381: pallet_project_token::types::MerkleSide
+     * Lookup401: pallet_project_token::types::MerkleSide
      **/
     PalletProjectTokenMerkleSide: {
         _enum: string[];
     };
     /**
-     * Lookup382: pallet_proposals_engine::Call<T>
+     * Lookup402: pallet_proposals_engine::Call<T>
      **/
     PalletProposalsEngineCall: {
         _enum: {
@@ -3221,7 +3474,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup383: pallet_proposals_discussion::Call<T>
+     * Lookup403: pallet_proposals_discussion::Call<T>
      **/
     PalletProposalsDiscussionCall: {
         _enum: {
@@ -3250,7 +3503,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup384: pallet_proposals_codex::Call<T>
+     * Lookup404: pallet_proposals_codex::Call<T>
      **/
     PalletProposalsCodexCall: {
         _enum: {
@@ -3261,7 +3514,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup385: pallet_working_group::Call<T, I>
+     * Lookup405: pallet_working_group::Call<T, I>
      **/
     PalletWorkingGroupCall: {
         _enum: {
@@ -3348,7 +3601,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup394: joystream_node_runtime::OriginCaller
+     * Lookup414: joystream_node_runtime::OriginCaller
      **/
     JoystreamNodeRuntimeOriginCaller: {
         _enum: {
@@ -3357,7 +3610,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup395: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+     * Lookup415: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
      **/
     FrameSupportDispatchRawOrigin: {
         _enum: {
@@ -3367,17 +3620,17 @@ declare const _default: {
         };
     };
     /**
-     * Lookup396: sp_core::Void
+     * Lookup416: sp_core::Void
      **/
     SpCoreVoid: string;
     /**
-     * Lookup397: pallet_utility::pallet::Error<T>
+     * Lookup417: pallet_utility::pallet::Error<T>
      **/
     PalletUtilityError: {
         _enum: string[];
     };
     /**
-     * Lookup404: sp_consensus_babe::digests::PreDigest
+     * Lookup424: sp_consensus_babe::digests::PreDigest
      **/
     SpConsensusBabeDigestsPreDigest: {
         _enum: {
@@ -3388,7 +3641,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup405: sp_consensus_babe::digests::PrimaryPreDigest
+     * Lookup425: sp_consensus_babe::digests::PrimaryPreDigest
      **/
     SpConsensusBabeDigestsPrimaryPreDigest: {
         authorityIndex: string;
@@ -3397,14 +3650,14 @@ declare const _default: {
         vrfProof: string;
     };
     /**
-     * Lookup406: sp_consensus_babe::digests::SecondaryPlainPreDigest
+     * Lookup426: sp_consensus_babe::digests::SecondaryPlainPreDigest
      **/
     SpConsensusBabeDigestsSecondaryPlainPreDigest: {
         authorityIndex: string;
         slot: string;
     };
     /**
-     * Lookup407: sp_consensus_babe::digests::SecondaryVRFPreDigest
+     * Lookup427: sp_consensus_babe::digests::SecondaryVRFPreDigest
      **/
     SpConsensusBabeDigestsSecondaryVRFPreDigest: {
         authorityIndex: string;
@@ -3413,20 +3666,20 @@ declare const _default: {
         vrfProof: string;
     };
     /**
-     * Lookup409: sp_consensus_babe::BabeEpochConfiguration
+     * Lookup429: sp_consensus_babe::BabeEpochConfiguration
      **/
     SpConsensusBabeBabeEpochConfiguration: {
         c: string;
         allowedSlots: string;
     };
     /**
-     * Lookup410: pallet_babe::pallet::Error<T>
+     * Lookup430: pallet_babe::pallet::Error<T>
      **/
     PalletBabeError: {
         _enum: string[];
     };
     /**
-     * Lookup412: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
+     * Lookup432: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
      **/
     PalletAuthorshipUncleEntryItem: {
         _enum: {
@@ -3435,13 +3688,13 @@ declare const _default: {
         };
     };
     /**
-     * Lookup413: pallet_authorship::pallet::Error<T>
+     * Lookup433: pallet_authorship::pallet::Error<T>
      **/
     PalletAuthorshipError: {
         _enum: string[];
     };
     /**
-     * Lookup415: pallet_balances::BalanceLock<Balance>
+     * Lookup435: pallet_balances::BalanceLock<Balance>
      **/
     PalletBalancesBalanceLock: {
         id: string;
@@ -3449,38 +3702,38 @@ declare const _default: {
         reasons: string;
     };
     /**
-     * Lookup416: pallet_balances::Reasons
+     * Lookup436: pallet_balances::Reasons
      **/
     PalletBalancesReasons: {
         _enum: string[];
     };
     /**
-     * Lookup419: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+     * Lookup439: pallet_balances::ReserveData<ReserveIdentifier, Balance>
      **/
     PalletBalancesReserveData: {
         id: string;
         amount: string;
     };
     /**
-     * Lookup421: pallet_balances::Releases
+     * Lookup441: pallet_balances::Releases
      **/
     PalletBalancesReleases: {
         _enum: string[];
     };
     /**
-     * Lookup422: pallet_balances::pallet::Error<T, I>
+     * Lookup442: pallet_balances::pallet::Error<T, I>
      **/
     PalletBalancesError: {
         _enum: string[];
     };
     /**
-     * Lookup424: pallet_transaction_payment::Releases
+     * Lookup444: pallet_transaction_payment::Releases
      **/
     PalletTransactionPaymentReleases: {
         _enum: string[];
     };
     /**
-     * Lookup425: pallet_election_provider_multi_phase::Phase<Bn>
+     * Lookup445: pallet_election_provider_multi_phase::Phase<Bn>
      **/
     PalletElectionProviderMultiPhasePhase: {
         _enum: {
@@ -3491,7 +3744,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup427: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+     * Lookup447: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
      **/
     PalletElectionProviderMultiPhaseReadySolution: {
         supports: string;
@@ -3499,14 +3752,14 @@ declare const _default: {
         compute: string;
     };
     /**
-     * Lookup428: pallet_election_provider_multi_phase::RoundSnapshot<T>
+     * Lookup448: pallet_election_provider_multi_phase::RoundSnapshot<T>
      **/
     PalletElectionProviderMultiPhaseRoundSnapshot: {
         voters: string;
         targets: string;
     };
     /**
-     * Lookup436: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
+     * Lookup456: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
      **/
     PalletElectionProviderMultiPhaseSignedSignedSubmission: {
         who: string;
@@ -3515,13 +3768,13 @@ declare const _default: {
         callFee: string;
     };
     /**
-     * Lookup437: pallet_election_provider_multi_phase::pallet::Error<T>
+     * Lookup457: pallet_election_provider_multi_phase::pallet::Error<T>
      **/
     PalletElectionProviderMultiPhaseError: {
         _enum: string[];
     };
     /**
-     * Lookup438: pallet_staking::StakingLedger<T>
+     * Lookup458: pallet_staking::StakingLedger<T>
      **/
     PalletStakingStakingLedger: {
         stash: string;
@@ -3531,14 +3784,14 @@ declare const _default: {
         claimedRewards: string;
     };
     /**
-     * Lookup440: pallet_staking::UnlockChunk<Balance>
+     * Lookup460: pallet_staking::UnlockChunk<Balance>
      **/
     PalletStakingUnlockChunk: {
         value: string;
         era: string;
     };
     /**
-     * Lookup442: pallet_staking::Nominations<T>
+     * Lookup462: pallet_staking::Nominations<T>
      **/
     PalletStakingNominations: {
         targets: string;
@@ -3546,27 +3799,27 @@ declare const _default: {
         suppressed: string;
     };
     /**
-     * Lookup443: pallet_staking::ActiveEraInfo
+     * Lookup463: pallet_staking::ActiveEraInfo
      **/
     PalletStakingActiveEraInfo: {
         index: string;
         start: string;
     };
     /**
-     * Lookup445: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+     * Lookup465: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
      **/
     PalletStakingEraRewardPoints: {
         total: string;
         individual: string;
     };
     /**
-     * Lookup449: pallet_staking::Forcing
+     * Lookup469: pallet_staking::Forcing
      **/
     PalletStakingForcing: {
         _enum: string[];
     };
     /**
-     * Lookup451: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
+     * Lookup471: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
      **/
     PalletStakingUnappliedSlash: {
         validator: string;
@@ -3576,7 +3829,7 @@ declare const _default: {
         payout: string;
     };
     /**
-     * Lookup453: pallet_staking::slashing::SlashingSpans
+     * Lookup473: pallet_staking::slashing::SlashingSpans
      **/
     PalletStakingSlashingSlashingSpans: {
         spanIndex: string;
@@ -3585,36 +3838,36 @@ declare const _default: {
         prior: string;
     };
     /**
-     * Lookup454: pallet_staking::slashing::SpanRecord<Balance>
+     * Lookup474: pallet_staking::slashing::SpanRecord<Balance>
      **/
     PalletStakingSlashingSpanRecord: {
         slashed: string;
         paidOut: string;
     };
     /**
-     * Lookup457: pallet_staking::Releases
+     * Lookup477: pallet_staking::Releases
      **/
     PalletStakingReleases: {
         _enum: string[];
     };
     /**
-     * Lookup458: pallet_staking::pallet::pallet::Error<T>
+     * Lookup478: pallet_staking::pallet::pallet::Error<T>
      **/
     PalletStakingPalletError: {
         _enum: string[];
     };
     /**
-     * Lookup462: sp_core::crypto::KeyTypeId
+     * Lookup482: sp_core::crypto::KeyTypeId
      **/
     SpCoreCryptoKeyTypeId: string;
     /**
-     * Lookup463: pallet_session::pallet::Error<T>
+     * Lookup483: pallet_session::pallet::Error<T>
      **/
     PalletSessionError: {
         _enum: string[];
     };
     /**
-     * Lookup465: pallet_grandpa::StoredState<N>
+     * Lookup485: pallet_grandpa::StoredState<N>
      **/
     PalletGrandpaStoredState: {
         _enum: {
@@ -3631,7 +3884,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup466: pallet_grandpa::StoredPendingChange<N, Limit>
+     * Lookup486: pallet_grandpa::StoredPendingChange<N, Limit>
      **/
     PalletGrandpaStoredPendingChange: {
         scheduledAt: string;
@@ -3640,39 +3893,39 @@ declare const _default: {
         forced: string;
     };
     /**
-     * Lookup468: pallet_grandpa::pallet::Error<T>
+     * Lookup488: pallet_grandpa::pallet::Error<T>
      **/
     PalletGrandpaError: {
         _enum: string[];
     };
     /**
-     * Lookup474: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+     * Lookup494: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
      **/
     PalletImOnlineBoundedOpaqueNetworkState: {
         peerId: string;
         externalAddresses: string;
     };
     /**
-     * Lookup478: pallet_im_online::pallet::Error<T>
+     * Lookup498: pallet_im_online::pallet::Error<T>
      **/
     PalletImOnlineError: {
         _enum: string[];
     };
     /**
-     * Lookup479: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+     * Lookup499: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
      **/
     SpStakingOffenceOffenceDetails: {
         offender: string;
         reporters: string;
     };
     /**
-     * Lookup482: pallet_sudo::pallet::Error<T>
+     * Lookup502: pallet_sudo::pallet::Error<T>
      **/
     PalletSudoError: {
         _enum: string[];
     };
     /**
-     * Lookup483: pallet_bags_list::list::Node<T, I>
+     * Lookup503: pallet_bags_list::list::Node<T, I>
      **/
     PalletBagsListListNode: {
         id: string;
@@ -3682,14 +3935,14 @@ declare const _default: {
         score: string;
     };
     /**
-     * Lookup484: pallet_bags_list::list::Bag<T, I>
+     * Lookup504: pallet_bags_list::list::Bag<T, I>
      **/
     PalletBagsListListBag: {
         head: string;
         tail: string;
     };
     /**
-     * Lookup485: pallet_bags_list::pallet::Error<T, I>
+     * Lookup505: pallet_bags_list::pallet::Error<T, I>
      **/
     PalletBagsListError: {
         _enum: {
@@ -3697,32 +3950,47 @@ declare const _default: {
         };
     };
     /**
-     * Lookup486: pallet_bags_list::list::ListError
+     * Lookup506: pallet_bags_list::list::ListError
      **/
     PalletBagsListListListError: {
         _enum: string[];
     };
     /**
-     * Lookup489: pallet_vesting::Releases
+     * Lookup509: pallet_vesting::Releases
      **/
     PalletVestingReleases: {
         _enum: string[];
     };
     /**
-     * Lookup490: pallet_vesting::pallet::Error<T>
+     * Lookup510: pallet_vesting::pallet::Error<T>
      **/
     PalletVestingError: {
         _enum: string[];
     };
     /**
-     * Lookup491: pallet_council::CouncilStageUpdate<BlockNumber>
+     * Lookup512: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+     **/
+    PalletMultisigMultisig: {
+        when: string;
+        deposit: string;
+        depositor: string;
+        approvals: string;
+    };
+    /**
+     * Lookup514: pallet_multisig::pallet::Error<T>
+     **/
+    PalletMultisigError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup515: pallet_council::CouncilStageUpdate<BlockNumber>
      **/
     PalletCouncilCouncilStageUpdate: {
         stage: string;
         changedAt: string;
     };
     /**
-     * Lookup492: pallet_council::CouncilStage
+     * Lookup516: pallet_council::CouncilStage<BlockNumber>
      **/
     PalletCouncilCouncilStage: {
         _enum: {
@@ -3732,19 +4000,26 @@ declare const _default: {
         };
     };
     /**
-     * Lookup493: pallet_council::CouncilStageAnnouncing
+     * Lookup517: pallet_council::CouncilStageAnnouncing<BlockNumber>
      **/
     PalletCouncilCouncilStageAnnouncing: {
         candidatesCount: string;
+        endsAt: string;
     };
     /**
-     * Lookup494: pallet_council::CouncilStageElection
+     * Lookup518: pallet_council::CouncilStageElection
      **/
     PalletCouncilCouncilStageElection: {
         candidatesCount: string;
     };
     /**
-     * Lookup496: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+     * Lookup519: pallet_council::CouncilStageIdle<BlockNumber>
+     **/
+    PalletCouncilCouncilStageIdle: {
+        endsAt: string;
+    };
+    /**
+     * Lookup521: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
      **/
     PalletCouncilCouncilMember: {
         stakingAccountId: string;
@@ -3755,7 +4030,7 @@ declare const _default: {
         unpaidReward: string;
     };
     /**
-     * Lookup497: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+     * Lookup522: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
      **/
     PalletCouncilCandidate: {
         stakingAccountId: string;
@@ -3766,13 +4041,13 @@ declare const _default: {
         noteHash: string;
     };
     /**
-     * Lookup498: pallet_council::Error<T>
+     * Lookup523: pallet_council::Error<T>
      **/
     PalletCouncilError: {
         _enum: string[];
     };
     /**
-     * Lookup499: pallet_referendum::ReferendumStage<BlockNumber, MemberId, VotePower>
+     * Lookup524: pallet_referendum::ReferendumStage<BlockNumber, MemberId, VotePower>
      **/
     PalletReferendumReferendumStage: {
         _enum: {
@@ -3782,24 +4057,26 @@ declare const _default: {
         };
     };
     /**
-     * Lookup500: pallet_referendum::ReferendumStageVoting<BlockNumber>
+     * Lookup525: pallet_referendum::ReferendumStageVoting<BlockNumber>
      **/
     PalletReferendumReferendumStageVoting: {
         started: string;
         winningTargetCount: string;
         currentCycleId: string;
+        endsAt: string;
     };
     /**
-     * Lookup501: pallet_referendum::ReferendumStageRevealing<BlockNumber, MemberId, VotePower>
+     * Lookup526: pallet_referendum::ReferendumStageRevealing<BlockNumber, MemberId, VotePower>
      **/
     PalletReferendumReferendumStageRevealing: {
         started: string;
         winningTargetCount: string;
         intermediateWinners: string;
         currentCycleId: string;
+        endsAt: string;
     };
     /**
-     * Lookup502: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+     * Lookup527: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
      **/
     PalletReferendumCastVote: {
         commitment: string;
@@ -3808,13 +4085,13 @@ declare const _default: {
         voteFor: string;
     };
     /**
-     * Lookup503: pallet_referendum::Error<T, I>
+     * Lookup528: pallet_referendum::Error<T, I>
      **/
     PalletReferendumError: {
         _enum: string[];
     };
     /**
-     * Lookup504: pallet_membership::MembershipObject<sp_core::crypto::AccountId32>
+     * Lookup529: pallet_membership::MembershipObject<sp_core::crypto::AccountId32>
      **/
     PalletMembershipMembershipObject: {
         handleHash: string;
@@ -3824,20 +4101,20 @@ declare const _default: {
         invites: string;
     };
     /**
-     * Lookup505: pallet_membership::StakingAccountMemberBinding<MemberId>
+     * Lookup530: pallet_membership::StakingAccountMemberBinding<MemberId>
      **/
     PalletMembershipStakingAccountMemberBinding: {
         memberId: string;
         confirmed: string;
     };
     /**
-     * Lookup506: pallet_membership::Error<T>
+     * Lookup531: pallet_membership::Error<T>
      **/
     PalletMembershipError: {
         _enum: string[];
     };
     /**
-     * Lookup507: pallet_forum::Category<CategoryId, ThreadId, primitive_types::H256>
+     * Lookup532: pallet_forum::Category<CategoryId, ThreadId, primitive_types::H256>
      **/
     PalletForumCategory: {
         titleHash: string;
@@ -3850,16 +4127,16 @@ declare const _default: {
         stickyThreadIds: string;
     };
     /**
-     * Lookup508: pallet_forum::Thread<ForumUserId, CategoryId, Balance>
+     * Lookup533: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumThread: {
         categoryId: string;
         authorId: string;
         cleanupPayOff: string;
-        numberOfPosts: string;
+        numberOfEditablePosts: string;
     };
     /**
-     * Lookup509: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, Balance, BlockNumber>
+     * Lookup534: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumPost: {
         threadId: string;
@@ -3869,19 +4146,68 @@ declare const _default: {
         lastEdited: string;
     };
     /**
-     * Lookup510: pallet_forum::Error<T>
+     * Lookup535: pallet_forum::Error<T>
      **/
     PalletForumError: {
         _enum: string[];
     };
     /**
-     * Lookup511: pallet_constitution::ConstitutionInfo
+     * Lookup536: pallet_constitution::ConstitutionInfo
      **/
     PalletConstitutionConstitutionInfo: {
         textHash: string;
     };
     /**
-     * Lookup513: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>, MemberId, AuctionId>, DataObjectId, Balance>
+     * Lookup537: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId>
+     **/
+    PalletBountyBountyRecord: {
+        creationParams: string;
+        totalFunding: string;
+        milestone: string;
+        activeWorkEntryCount: string;
+        hasUnpaidOracleReward: string;
+    };
+    /**
+     * Lookup538: pallet_bounty::BountyMilestone<BlockNumber>
+     **/
+    PalletBountyBountyMilestone: {
+        _enum: {
+            Created: {
+                createdAt: string;
+                hasContributions: string;
+            };
+            BountyMaxFundingReached: string;
+            WorkSubmitted: string;
+            Terminated: string;
+            JudgmentSubmitted: {
+                successfulBounty: string;
+            };
+        };
+    };
+    /**
+     * Lookup540: pallet_bounty::Contribution<T>
+     **/
+    PalletBountyContribution: {
+        amount: string;
+        funderStateBloatBondAmount: string;
+    };
+    /**
+     * Lookup541: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+     **/
+    PalletBountyEntryRecord: {
+        memberId: string;
+        stakingAccountId: string;
+        submittedAt: string;
+        workSubmitted: string;
+    };
+    /**
+     * Lookup542: pallet_bounty::Error<T>
+     **/
+    PalletBountyError: {
+        _enum: string[];
+    };
+    /**
+     * Lookup544: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentVideoRecord: {
         inChannel: string;
@@ -3890,7 +4216,7 @@ declare const _default: {
         videoStateBloatBond: string;
     };
     /**
-     * Lookup514: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>, MemberId, AuctionId>
+     * Lookup545: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>, MemberId, AuctionId>
      **/
     PalletContentNftTypesOwnedNft: {
         owner: string;
@@ -3899,7 +4225,7 @@ declare const _default: {
         openAuctionsNonce: string;
     };
     /**
-     * Lookup515: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>
+     * Lookup546: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>
      **/
     PalletContentNftTypesTransactionalStatusRecord: {
         _enum: {
@@ -3911,7 +4237,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup516: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>
+     * Lookup547: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionRecord: {
         startingPrice: string;
@@ -3924,14 +4250,14 @@ declare const _default: {
         topBid: string;
     };
     /**
-     * Lookup518: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+     * Lookup549: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionBid: {
         amount: string;
         bidderId: string;
     };
     /**
-     * Lookup519: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>
+     * Lookup550: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>
      **/
     PalletContentNftTypesOpenAuctionRecord: {
         startingPrice: string;
@@ -3942,7 +4268,7 @@ declare const _default: {
         start: string;
     };
     /**
-     * Lookup520: pallet_content::nft::types::NftOwner<MemberId>
+     * Lookup551: pallet_content::nft::types::NftOwner<MemberId>
      **/
     PalletContentNftTypesNftOwner: {
         _enum: {
@@ -3951,7 +4277,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup522: pallet_content::permissions::curator_group::CuratorGroup<T>
+     * Lookup554: pallet_content::permissions::curator_group::CuratorGroup<T>
      **/
     PalletContentPermissionsCuratorGroup: {
         curators: string;
@@ -3959,7 +4285,7 @@ declare const _default: {
         permissionsByLevel: string;
     };
     /**
-     * Lookup523: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+     * Lookup555: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
      **/
     PalletContentNftTypesOpenAuctionBidRecord: {
         amount: string;
@@ -3967,13 +4293,13 @@ declare const _default: {
         auctionId: string;
     };
     /**
-     * Lookup524: pallet_content::errors::Error<T>
+     * Lookup556: pallet_content::errors::Error<T>
      **/
     PalletContentErrorsError: {
         _enum: string[];
     };
     /**
-     * Lookup525: pallet_storage::BagRecord<StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+     * Lookup557: pallet_storage::BagRecord<StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
      **/
     PalletStorageBagRecord: {
         storedBy: string;
@@ -3982,7 +4308,7 @@ declare const _default: {
         objectsNumber: string;
     };
     /**
-     * Lookup526: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup558: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketRecord: {
         operatorStatus: string;
@@ -3991,7 +4317,7 @@ declare const _default: {
         assignedBags: string;
     };
     /**
-     * Lookup527: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup559: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketOperatorStatus: {
         _enum: {
@@ -4001,14 +4327,14 @@ declare const _default: {
         };
     };
     /**
-     * Lookup528: pallet_storage::DynamicBagCreationPolicy<DistributionBucketFamilyId>
+     * Lookup560: pallet_storage::DynamicBagCreationPolicy<DistributionBucketFamilyId>
      **/
     PalletStorageDynamicBagCreationPolicy: {
         numberOfStorageBuckets: string;
         families: string;
     };
     /**
-     * Lookup530: pallet_storage::DataObject<Balance>
+     * Lookup562: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletStorageDataObject: {
         _alias: {
@@ -4020,13 +4346,13 @@ declare const _default: {
         ipfsContentId: string;
     };
     /**
-     * Lookup531: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+     * Lookup563: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketFamilyRecord: {
         nextDistributionBucketIndex: string;
     };
     /**
-     * Lookup532: pallet_storage::DistributionBucketRecord<WorkerId>
+     * Lookup564: pallet_storage::DistributionBucketRecord<WorkerId>
      **/
     PalletStorageDistributionBucketRecord: {
         acceptingNewBags: string;
@@ -4036,20 +4362,20 @@ declare const _default: {
         assignedBags: string;
     };
     /**
-     * Lookup533: pallet_common::constraints::BoundedValueConstraint<Val>
+     * Lookup565: pallet_common::constraints::BoundedValueConstraint<Val>
      **/
     PalletCommonConstraintsBoundedValueConstraint: {
         min: string;
         maxMinDiff: string;
     };
     /**
-     * Lookup534: pallet_storage::Error<T>
+     * Lookup566: pallet_storage::Error<T>
      **/
     PalletStorageError: {
         _enum: string[];
     };
     /**
-     * Lookup535: pallet_project_token::types::AccountData<pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, Balance, pallet_project_token::types::StakingStatus<Balance>, JoyBalance>
+     * Lookup567: pallet_project_token::types::AccountData<pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletProjectTokenAccountData: {
         vestingSchedules: string;
@@ -4060,7 +4386,7 @@ declare const _default: {
         lastSaleTotalPurchasedAmount: string;
     };
     /**
-     * Lookup536: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+     * Lookup568: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
      **/
     PalletProjectTokenVestingSchedule: {
         linearVestingStartBlock: string;
@@ -4070,14 +4396,14 @@ declare const _default: {
         burnedAmount: string;
     };
     /**
-     * Lookup537: pallet_project_token::types::StakingStatus<Balance>
+     * Lookup569: pallet_project_token::types::StakingStatus<Balance>
      **/
     PalletProjectTokenStakingStatus: {
         splitId: string;
         amount: string;
     };
     /**
-     * Lookup544: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+     * Lookup576: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
      **/
     PalletProjectTokenTokenData: {
         totalSupply: string;
@@ -4093,7 +4419,7 @@ declare const _default: {
         nextRevenueSplitId: string;
     };
     /**
-     * Lookup545: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+     * Lookup577: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitState: {
         _enum: {
@@ -4102,7 +4428,7 @@ declare const _default: {
         };
     };
     /**
-     * Lookup546: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+     * Lookup578: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitInfo: {
         allocation: string;
@@ -4110,14 +4436,14 @@ declare const _default: {
         dividendsClaimed: string;
     };
     /**
-     * Lookup547: pallet_project_token::types::Timeline<BlockNumber>
+     * Lookup579: pallet_project_token::types::Timeline<BlockNumber>
      **/
     PalletProjectTokenTimeline: {
         start: string;
         duration: string;
     };
     /**
-     * Lookup549: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+     * Lookup581: pallet_project_token::types::PatronageData<Balance, BlockNumber>
      **/
     PalletProjectTokenPatronageData: {
         rate: string;
@@ -4125,13 +4451,13 @@ declare const _default: {
         lastUnclaimedPatronageTallyBlock: string;
     };
     /**
-     * Lookup551: pallet_project_token::errors::Error<T>
+     * Lookup583: pallet_project_token::errors::Error<T>
      **/
     PalletProjectTokenErrorsError: {
         _enum: string[];
     };
     /**
-     * Lookup552: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+     * Lookup584: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
      **/
     PalletProposalsEngineProposal: {
         parameters: string;
@@ -4144,7 +4470,7 @@ declare const _default: {
         stakingAccountId: string;
     };
     /**
-     * Lookup553: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+     * Lookup585: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
      **/
     PalletProposalsEngineProposalParameters: {
         votingPeriod: string;
@@ -4157,7 +4483,7 @@ declare const _default: {
         constitutionality: string;
     };
     /**
-     * Lookup554: pallet_proposals_engine::types::VotingResults
+     * Lookup586: pallet_proposals_engine::types::VotingResults
      **/
     PalletProposalsEngineVotingResults: {
         abstentions: string;
@@ -4166,13 +4492,13 @@ declare const _default: {
         slashes: string;
     };
     /**
-     * Lookup556: pallet_proposals_engine::Error<T>
+     * Lookup588: pallet_proposals_engine::Error<T>
      **/
     PalletProposalsEngineError: {
         _enum: string[];
     };
     /**
-     * Lookup557: pallet_proposals_discussion::types::DiscussionThread<ThreadAuthorId, BlockNumber, MemberId>
+     * Lookup589: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber>
      **/
     PalletProposalsDiscussionDiscussionThread: {
         activatedAt: string;
@@ -4180,7 +4506,7 @@ declare const _default: {
         mode: string;
     };
     /**
-     * Lookup558: pallet_proposals_discussion::types::DiscussionPost<PostAuthorId, Balance, BlockNumber>
+     * Lookup590: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletProposalsDiscussionDiscussionPost: {
         authorId: string;
@@ -4188,19 +4514,19 @@ declare const _default: {
         lastEdited: string;
     };
     /**
-     * Lookup559: pallet_proposals_discussion::Error<T>
+     * Lookup591: pallet_proposals_discussion::Error<T>
      **/
     PalletProposalsDiscussionError: {
         _enum: string[];
     };
     /**
-     * Lookup560: pallet_proposals_codex::Error<T>
+     * Lookup592: pallet_proposals_codex::Error<T>
      **/
     PalletProposalsCodexError: {
         _enum: string[];
     };
     /**
-     * Lookup561: pallet_working_group::types::Opening<BlockNumber, Balance>
+     * Lookup593: pallet_working_group::types::Opening<BlockNumber, Balance>
      **/
     PalletWorkingGroupOpening: {
         openingType: string;
@@ -4211,7 +4537,7 @@ declare const _default: {
         creationStake: string;
     };
     /**
-     * Lookup562: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId>
+     * Lookup594: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletWorkingGroupJobApplication: {
         roleAccountId: string;
@@ -4222,7 +4548,7 @@ declare const _default: {
         openingId: string;
     };
     /**
-     * Lookup563: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+     * Lookup595: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
      **/
     PalletWorkingGroupGroupWorker: {
         memberId: string;
@@ -4236,13 +4562,13 @@ declare const _default: {
         createdAt: string;
     };
     /**
-     * Lookup564: pallet_working_group::errors::Error<T, I>
+     * Lookup596: pallet_working_group::errors::Error<T, I>
      **/
     PalletWorkingGroupErrorsError: {
         _enum: string[];
     };
     /**
-     * Lookup574: sp_runtime::MultiSignature
+     * Lookup606: sp_runtime::MultiSignature
      **/
     SpRuntimeMultiSignature: {
         _enum: {
@@ -4252,39 +4578,39 @@ declare const _default: {
         };
     };
     /**
-     * Lookup575: sp_core::ecdsa::Signature
+     * Lookup607: sp_core::ecdsa::Signature
      **/
     SpCoreEcdsaSignature: string;
     /**
-     * Lookup578: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+     * Lookup610: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
      **/
     FrameSystemExtensionsCheckNonZeroSender: string;
     /**
-     * Lookup579: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+     * Lookup611: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
      **/
     FrameSystemExtensionsCheckSpecVersion: string;
     /**
-     * Lookup580: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+     * Lookup612: frame_system::extensions::check_tx_version::CheckTxVersion<T>
      **/
     FrameSystemExtensionsCheckTxVersion: string;
     /**
-     * Lookup581: frame_system::extensions::check_genesis::CheckGenesis<T>
+     * Lookup613: frame_system::extensions::check_genesis::CheckGenesis<T>
      **/
     FrameSystemExtensionsCheckGenesis: string;
     /**
-     * Lookup584: frame_system::extensions::check_nonce::CheckNonce<T>
+     * Lookup616: frame_system::extensions::check_nonce::CheckNonce<T>
      **/
     FrameSystemExtensionsCheckNonce: string;
     /**
-     * Lookup585: frame_system::extensions::check_weight::CheckWeight<T>
+     * Lookup617: frame_system::extensions::check_weight::CheckWeight<T>
      **/
     FrameSystemExtensionsCheckWeight: string;
     /**
-     * Lookup586: pallet_transaction_payment::ChargeTransactionPayment<T>
+     * Lookup618: pallet_transaction_payment::ChargeTransactionPayment<T>
      **/
     PalletTransactionPaymentChargeTransactionPayment: string;
     /**
-     * Lookup587: joystream_node_runtime::Runtime
+     * Lookup619: joystream_node_runtime::Runtime
      **/
     JoystreamNodeRuntimeRuntime: string;
 };
diff --git a/augment/lookup.js b/augment/lookup.js
index 841b18565c6c1a88314485c89f06e15033fbe8c0..058ebc3ff00564be6ce0cba4c8eeeaabff19cc12 100644
--- a/augment/lookup.js
+++ b/augment/lookup.js
@@ -1,9 +1,7 @@
-"use strict";
 // Auto-generated via `yarn polkadot-types-from-defs`, do not edit
 /* eslint-disable */
-Object.defineProperty(exports, "__esModule", { value: true });
 /* eslint-disable sort-keys */
-exports.default = {
+export default {
     /**
      * Lookup3: frame_system::AccountInfo<Index, pallet_balances::AccountData<Balance>>
      **/
@@ -414,16 +412,54 @@ exports.default = {
         }
     },
     /**
-     * Lookup61: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+     * Lookup61: pallet_multisig::pallet::Event<T>
+     **/
+    PalletMultisigEvent: {
+        _enum: {
+            NewMultisig: {
+                approving: 'AccountId32',
+                multisig: 'AccountId32',
+                callHash: '[u8;32]',
+            },
+            MultisigApproval: {
+                approving: 'AccountId32',
+                timepoint: 'PalletMultisigTimepoint',
+                multisig: 'AccountId32',
+                callHash: '[u8;32]',
+            },
+            MultisigExecuted: {
+                approving: 'AccountId32',
+                timepoint: 'PalletMultisigTimepoint',
+                multisig: 'AccountId32',
+                callHash: '[u8;32]',
+                result: 'Result<Null, SpRuntimeDispatchError>',
+            },
+            MultisigCancelled: {
+                cancelling: 'AccountId32',
+                timepoint: 'PalletMultisigTimepoint',
+                multisig: 'AccountId32',
+                callHash: '[u8;32]'
+            }
+        }
+    },
+    /**
+     * Lookup62: pallet_multisig::Timepoint<BlockNumber>
+     **/
+    PalletMultisigTimepoint: {
+        height: 'u32',
+        index: 'u32'
+    },
+    /**
+     * Lookup63: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletCouncilRawEvent: {
         _enum: {
-            AnnouncingPeriodStarted: 'Null',
-            NotEnoughCandidates: 'Null',
+            AnnouncingPeriodStarted: 'u32',
+            NotEnoughCandidates: 'u32',
             VotingPeriodStarted: 'u64',
             NewCandidate: '(u64,AccountId32,AccountId32,u128)',
-            NewCouncilElected: 'Vec<u64>',
-            NewCouncilNotElected: 'Null',
+            NewCouncilElected: '(Vec<u64>,u32)',
+            NewCouncilNotElected: 'u32',
             CandidacyStakeRelease: 'u64',
             CandidacyWithdraw: 'u64',
             CandidacyNoteSet: '(u64,Bytes)',
@@ -440,13 +476,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup63: pallet_referendum::RawEvent<Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+     * Lookup65: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
      **/
     PalletReferendumRawEvent: {
         _enum: {
-            ReferendumStarted: 'u64',
-            ReferendumStartedForcefully: 'u64',
-            RevealingStageStarted: 'Null',
+            ReferendumStarted: '(u64,u32)',
+            ReferendumStartedForcefully: '(u64,u32)',
+            RevealingStageStarted: 'u32',
             ReferendumFinished: 'Vec<PalletReferendumOptionResult>',
             VoteCast: '(AccountId32,H256,u128)',
             VoteRevealed: '(AccountId32,u64,Bytes)',
@@ -454,24 +490,24 @@ exports.default = {
         }
     },
     /**
-     * Lookup64: pallet_referendum::Instance1
+     * Lookup66: pallet_referendum::Instance1
      **/
     PalletReferendumInstance1: 'Null',
     /**
-     * Lookup66: pallet_referendum::OptionResult<MemberId, VotePower>
+     * Lookup68: pallet_referendum::OptionResult<MemberId, VotePower>
      **/
     PalletReferendumOptionResult: {
         optionId: 'u64',
         votePower: 'u128'
     },
     /**
-     * Lookup67: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateFoundingMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+     * Lookup69: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateFoundingMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletMembershipRawEvent: {
         _enum: {
             MemberInvited: '(u64,PalletMembershipInviteMembershipParameters)',
             MembershipGifted: '(u64,PalletMembershipGiftMembershipParameters)',
-            MembershipBought: '(u64,PalletMembershipBuyMembershipParameters)',
+            MembershipBought: '(u64,PalletMembershipBuyMembershipParameters,u32)',
             MemberProfileUpdated: '(u64,Option<Bytes>,Option<Bytes>)',
             MemberAccountsUpdated: '(u64,Option<AccountId32>,Option<AccountId32>)',
             MemberVerificationStatusUpdated: '(u64,bool,u64)',
@@ -485,11 +521,11 @@ exports.default = {
             StakingAccountRemoved: '(AccountId32,u64)',
             StakingAccountConfirmed: '(AccountId32,u64)',
             MemberRemarked: '(u64,Bytes)',
-            FoundingMemberCreated: '(u64,PalletMembershipCreateFoundingMemberParameters)'
+            FoundingMemberCreated: '(u64,PalletMembershipCreateFoundingMemberParameters,u32)'
         }
     },
     /**
-     * Lookup68: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup70: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipBuyMembershipParameters: {
         rootAccount: 'AccountId32',
@@ -499,7 +535,7 @@ exports.default = {
         referrerId: 'Option<u64>'
     },
     /**
-     * Lookup71: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+     * Lookup73: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletMembershipInviteMembershipParameters: {
         invitingMemberId: 'u64',
@@ -509,7 +545,7 @@ exports.default = {
         metadata: 'Bytes'
     },
     /**
-     * Lookup72: pallet_membership::CreateFoundingMemberParameters<sp_core::crypto::AccountId32>
+     * Lookup74: pallet_membership::CreateFoundingMemberParameters<sp_core::crypto::AccountId32>
      **/
     PalletMembershipCreateFoundingMemberParameters: {
         rootAccount: 'AccountId32',
@@ -518,7 +554,7 @@ exports.default = {
         metadata: 'Bytes'
     },
     /**
-     * Lookup73: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup75: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletMembershipGiftMembershipParameters: {
         rootAccount: 'AccountId32',
@@ -531,7 +567,7 @@ exports.default = {
         applyRootAccountInvitationLock: 'Option<u128>'
     },
     /**
-     * Lookup75: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, PostReactionId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+     * Lookup77: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
      **/
     PalletForumRawEvent: {
         _enum: {
@@ -550,13 +586,12 @@ exports.default = {
             PostModerated: '(u64,Bytes,PalletForumPrivilegedActor,u64,u64)',
             PostDeleted: '(Bytes,u64,BTreeMap<PalletForumExtendedPostIdObject, bool>)',
             PostTextUpdated: '(u64,u64,u64,u64,Bytes)',
-            PostReacted: '(u64,u64,u64,u64,u64)',
             CategoryStickyThreadUpdate: '(u64,Vec<u64>,PalletForumPrivilegedActor)',
             CategoryMembershipOfModeratorUpdated: '(u64,u64,bool)'
         }
     },
     /**
-     * Lookup76: pallet_forum::PrivilegedActor<T>
+     * Lookup78: pallet_forum::PrivilegedActor<T>
      **/
     PalletForumPrivilegedActor: {
         _enum: {
@@ -565,7 +600,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup77: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+     * Lookup79: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
      **/
     PalletForumExtendedPostIdObject: {
         categoryId: 'u64',
@@ -573,7 +608,7 @@ exports.default = {
         postId: 'u64'
     },
     /**
-     * Lookup81: pallet_constitution::Event
+     * Lookup83: pallet_constitution::Event
      **/
     PalletConstitutionEvent: {
         _enum: {
@@ -581,7 +616,95 @@ exports.default = {
         }
     },
     /**
-     * Lookup82: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+     * Lookup84: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+     **/
+    PalletBountyRawEvent: {
+        _enum: {
+            BountyCreated: '(u64,PalletBountyBountyParameters,Bytes)',
+            BountyOracleSwitched: '(u64,PalletBountyBountyActor,PalletBountyBountyActor,PalletBountyBountyActor)',
+            BountyTerminated: '(u64,PalletBountyBountyActor,PalletBountyBountyActor,PalletBountyBountyActor)',
+            BountyFunded: '(u64,PalletBountyBountyActor,u128)',
+            BountyMaxFundingReached: 'u64',
+            BountyFundingWithdrawal: '(u64,PalletBountyBountyActor)',
+            BountyCreatorCherryWithdrawal: '(u64,PalletBountyBountyActor)',
+            BountyCreatorOracleRewardWithdrawal: '(u64,PalletBountyBountyActor)',
+            BountyOracleRewardWithdrawal: '(u64,PalletBountyBountyActor,u128)',
+            BountyRemoved: 'u64',
+            WorkEntryAnnounced: '(u64,u64,u64,AccountId32,Bytes)',
+            WorkSubmitted: '(u64,u64,u64,Bytes)',
+            OracleJudgmentSubmitted: '(u64,PalletBountyBountyActor,BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>,Bytes)',
+            WorkEntrantFundsWithdrawn: '(u64,u64,u64)',
+            BountyContributorRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+            BountyOracleRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+            BountyEntrantRemarked: '(u64,u64,u64,Bytes)',
+            BountyCreatorRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+            WorkSubmissionPeriodEnded: '(u64,PalletBountyBountyActor)',
+            WorkEntrantStakeUnlocked: '(u64,u64,AccountId32)',
+            WorkEntrantStakeSlashed: '(u64,u64,AccountId32,u128)',
+            FunderStateBloatBondWithdrawn: '(u64,PalletBountyBountyActor,u128)',
+            CreatorStateBloatBondWithdrawn: '(u64,PalletBountyBountyActor,u128)'
+        }
+    },
+    /**
+     * Lookup85: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId>
+     **/
+    PalletBountyBountyParameters: {
+        oracle: 'PalletBountyBountyActor',
+        contractType: 'PalletBountyAssuranceContractType',
+        creator: 'PalletBountyBountyActor',
+        cherry: 'u128',
+        oracleReward: 'u128',
+        entrantStake: 'u128',
+        fundingType: 'PalletBountyFundingType'
+    },
+    /**
+     * Lookup86: pallet_bounty::BountyActor<MemberId>
+     **/
+    PalletBountyBountyActor: {
+        _enum: {
+            Council: 'Null',
+            Member: 'u64'
+        }
+    },
+    /**
+     * Lookup87: pallet_bounty::AssuranceContractType<MemberId>
+     **/
+    PalletBountyAssuranceContractType: {
+        _enum: {
+            Open: 'Null',
+            Closed: 'BTreeSet<u64>'
+        }
+    },
+    /**
+     * Lookup89: pallet_bounty::FundingType<BlockNumber, Balance>
+     **/
+    PalletBountyFundingType: {
+        _enum: {
+            Perpetual: {
+                target: 'u128',
+            },
+            Limited: {
+                target: 'u128',
+                fundingPeriod: 'u32'
+            }
+        }
+    },
+    /**
+     * Lookup91: pallet_bounty::OracleWorkEntryJudgment<Balance>
+     **/
+    PalletBountyOracleWorkEntryJudgment: {
+        _enum: {
+            Winner: {
+                reward: 'u128',
+            },
+            Rejected: {
+                slashingShare: 'Perbill',
+                actionJustification: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup94: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
      **/
     PalletUtilityRawEvent: {
         _enum: {
@@ -592,19 +715,19 @@ exports.default = {
         }
     },
     /**
-     * Lookup83: pallet_common::working_group::WorkingGroup
+     * Lookup95: pallet_common::working_group::WorkingGroup
      **/
     PalletCommonWorkingGroup: {
         _enum: ['Forum', 'Storage', 'Content', 'OperationsAlpha', 'Gateway', 'Distribution', 'OperationsBeta', 'OperationsGamma', 'Membership']
     },
     /**
-     * Lookup84: pallet_common::BalanceKind
+     * Lookup96: pallet_common::BalanceKind
      **/
     PalletCommonBalanceKind: {
         _enum: ['Positive', 'Negative']
     },
     /**
-     * Lookup85: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, DataObjectId, BlockNumber, TokenId, TransferId>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<MemberId, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+     * Lookup97: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
      **/
     PalletContentRawEvent: {
         _enum: {
@@ -658,7 +781,7 @@ exports.default = {
             NftOwnerRemarked: '(PalletContentPermissionsContentActor,u64,Bytes)',
             InitializedChannelTransfer: '(u64,PalletContentPermissionsContentActor,PalletContentPendingTransfer)',
             CancelChannelTransfer: '(u64,PalletContentPermissionsContentActor)',
-            ChannelTransferAccepted: '(u64,PalletContentTransferCommitmentParameters)',
+            ChannelTransferAccepted: '(u64,PalletContentTransferCommitmentParametersBTreeMap)',
             GlobalNftLimitUpdated: '(PalletContentNftLimitPeriod,u64)',
             ChannelNftLimitUpdated: '(PalletContentPermissionsContentActor,PalletContentNftLimitPeriod,u64,u64)',
             ToggledNftLimits: 'bool',
@@ -666,7 +789,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup86: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+     * Lookup98: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
      **/
     PalletContentPermissionsContentActor: {
         _enum: {
@@ -676,7 +799,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup87: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, DataObjectId, BlockNumber, TokenId, TransferId>
+     * Lookup99: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentChannelRecord: {
         owner: 'PalletContentChannelOwner',
@@ -692,10 +815,23 @@ exports.default = {
         dailyNftCounter: 'PalletContentNftCounter',
         weeklyNftCounter: 'PalletContentNftCounter',
         creatorTokenId: 'Option<u64>',
-        channelStateBloatBond: 'u128'
+        channelStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
     },
     /**
-     * Lookup88: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+     * Lookup103: pallet_content::types::ChannelActionPermission
+     **/
+    PalletContentChannelActionPermission: {
+        _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken']
+    },
+    /**
+     * Lookup108: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+     **/
+    PalletCommonBloatBondRepayableBloatBond: {
+        repaymentRestrictedTo: 'Option<AccountId32>',
+        amount: 'u128'
+    },
+    /**
+     * Lookup109: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
      **/
     PalletContentChannelOwner: {
         _enum: {
@@ -704,19 +840,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup91: pallet_content::types::ChannelActionPermission
-     **/
-    PalletContentChannelActionPermission: {
-        _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken']
-    },
-    /**
-     * Lookup96: pallet_content::permissions::curator_group::PausableChannelFeature
+     * Lookup111: pallet_content::permissions::curator_group::PausableChannelFeature
      **/
     PalletContentPermissionsCuratorGroupPausableChannelFeature: {
         _enum: ['ChannelFundsTransfer', 'CreatorCashout', 'VideoNftIssuance', 'VideoCreation', 'VideoUpdate', 'ChannelUpdate', 'CreatorTokenIssuance']
     },
     /**
-     * Lookup98: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId>
+     * Lookup113: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>>
      **/
     PalletContentChannelTransferStatus: {
         _enum: {
@@ -725,36 +855,36 @@ exports.default = {
         }
     },
     /**
-     * Lookup99: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId>
+     * Lookup114: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>>
      **/
     PalletContentPendingTransfer: {
         newOwner: 'PalletContentChannelOwner',
-        transferParams: 'PalletContentTransferCommitmentParameters'
+        transferParams: 'PalletContentTransferCommitmentParametersBoundedBTreeMap'
     },
     /**
-     * Lookup100: pallet_content::types::TransferCommitmentParameters<MemberId, Balance, TransferId>
+     * Lookup115: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>, Balance, TransferId>
      **/
-    PalletContentTransferCommitmentParameters: {
+    PalletContentTransferCommitmentParametersBoundedBTreeMap: {
         newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>',
         price: 'u128',
         transferId: 'u64'
     },
     /**
-     * Lookup102: pallet_content::types::LimitPerPeriod<BlockNumber>
+     * Lookup116: pallet_content::types::LimitPerPeriod<BlockNumber>
      **/
     PalletContentLimitPerPeriod: {
         limit: 'u64',
         blockNumberPeriod: 'u32'
     },
     /**
-     * Lookup103: pallet_content::types::NftCounter<BlockNumber>
+     * Lookup117: pallet_content::types::NftCounter<BlockNumber>
      **/
     PalletContentNftCounter: {
         counter: 'u64',
         lastUpdated: 'u32'
     },
     /**
-     * Lookup104: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup118: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionParamsRecord: {
         startingPrice: 'u128',
@@ -766,7 +896,7 @@ exports.default = {
         minBidStep: 'u128'
     },
     /**
-     * Lookup106: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+     * Lookup120: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesOpenAuctionParamsRecord: {
         startingPrice: 'u128',
@@ -776,7 +906,7 @@ exports.default = {
         bidLockDuration: 'u32'
     },
     /**
-     * Lookup107: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+     * Lookup121: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
      **/
     PalletContentNftTypesNftIssuanceParametersRecord: {
         royalty: 'Option<Perbill>',
@@ -785,7 +915,7 @@ exports.default = {
         initTransactionalStatus: 'PalletContentNftTypesInitTransactionalStatusRecord'
     },
     /**
-     * Lookup108: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+     * Lookup122: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
      **/
     PalletContentNftTypesInitTransactionalStatusRecord: {
         _enum: {
@@ -797,7 +927,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup110: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+     * Lookup124: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
      **/
     PalletContentChannelCreationParametersRecord: {
         assets: 'Option<PalletContentStorageAssetsRecord>',
@@ -809,14 +939,14 @@ exports.default = {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup111: pallet_content::types::StorageAssetsRecord<Balance>
+     * Lookup125: pallet_content::types::StorageAssetsRecord<Balance>
      **/
     PalletContentStorageAssetsRecord: {
         objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
         expectedDataSizeFee: 'u128'
     },
     /**
-     * Lookup113: pallet_storage::DataObjectCreationParameters
+     * Lookup127: pallet_storage::DataObjectCreationParameters
      **/
     PalletStorageDataObjectCreationParameters: {
         _alias: {
@@ -826,44 +956,47 @@ exports.default = {
         ipfsContentId: 'Bytes'
     },
     /**
-     * Lookup114: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+     * Lookup128: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketIdRecord: {
         distributionBucketFamilyId: 'u64',
         distributionBucketIndex: 'u64'
     },
     /**
-     * Lookup118: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+     * Lookup132: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
      **/
     PalletContentChannelUpdateParametersRecord: {
         assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
         newMeta: 'Option<Bytes>',
         assetsToRemove: 'BTreeSet<u64>',
         collaborators: 'Option<BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>>',
-        expectedDataObjectStateBloatBond: 'u128'
+        expectedDataObjectStateBloatBond: 'u128',
+        storageBucketsNumWitness: 'Option<u32>'
     },
     /**
-     * Lookup120: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup134: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoCreationParametersRecord: {
         assets: 'Option<PalletContentStorageAssetsRecord>',
         meta: 'Option<Bytes>',
         autoIssueNft: 'Option<PalletContentNftTypesNftIssuanceParametersRecord>',
         expectedVideoStateBloatBond: 'u128',
-        expectedDataObjectStateBloatBond: 'u128'
+        expectedDataObjectStateBloatBond: 'u128',
+        storageBucketsNumWitness: 'u32'
     },
     /**
-     * Lookup122: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+     * Lookup136: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
      **/
     PalletContentVideoUpdateParametersRecord: {
         assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
         newMeta: 'Option<Bytes>',
         assetsToRemove: 'BTreeSet<u64>',
         autoIssueNft: 'Option<PalletContentNftTypesNftIssuanceParametersRecord>',
-        expectedDataObjectStateBloatBond: 'u128'
+        expectedDataObjectStateBloatBond: 'u128',
+        storageBucketsNumWitness: 'Option<u32>'
     },
     /**
-     * Lookup125: pallet_content::permissions::curator_group::ContentModerationAction
+     * Lookup139: pallet_content::permissions::curator_group::ContentModerationAction
      **/
     PalletContentPermissionsCuratorGroupContentModerationAction: {
         _enum: {
@@ -878,7 +1011,15 @@ exports.default = {
         }
     },
     /**
-     * Lookup129: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>
+     * Lookup143: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>>, Balance, TransferId>
+     **/
+    PalletContentTransferCommitmentParametersBTreeMap: {
+        newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>',
+        price: 'u128',
+        transferId: 'u64'
+    },
+    /**
+     * Lookup144: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>
      **/
     PalletContentUpdateChannelPayoutsParametersRecord: {
         commitment: 'Option<H256>',
@@ -888,7 +1029,7 @@ exports.default = {
         channelCashoutsEnabled: 'Option<bool>'
     },
     /**
-     * Lookup130: pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>
+     * Lookup145: pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>
      **/
     PalletContentChannelPayoutsPayloadParametersRecord: {
         uploaderAccount: 'AccountId32',
@@ -897,7 +1038,7 @@ exports.default = {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup134: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+     * Lookup149: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
      **/
     PalletContentChannelFundsDestination: {
         _enum: {
@@ -906,20 +1047,20 @@ exports.default = {
         }
     },
     /**
-     * Lookup135: pallet_content::types::NftLimitPeriod
+     * Lookup150: pallet_content::types::NftLimitPeriod
      **/
     PalletContentNftLimitPeriod: {
         _enum: ['Daily', 'Weekly']
     },
     /**
-     * Lookup136: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex>
+     * Lookup151: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
      **/
     PalletStorageRawEvent: {
         _enum: {
             StorageBucketCreated: '(u64,Option<u64>,bool,u64,u64)',
             StorageBucketInvitationAccepted: '(u64,u64,AccountId32)',
             StorageBucketsUpdatedForBag: '(PalletStorageBagIdType,BTreeSet<u64>,BTreeSet<u64>)',
-            DataObjectsUploaded: '(Vec<u64>,PalletStorageUploadParametersRecord,u128)',
+            DataObjectsUploaded: '(BTreeSet<u64>,PalletStorageUploadParametersRecord,u128)',
             StorageOperatorMetadataSet: '(u64,u64,Bytes)',
             StorageBucketVoucherLimitsSet: '(u64,u64,u64)',
             PendingDataObjectsAccepted: '(u64,u64,PalletStorageBagIdType,BTreeSet<u64>)',
@@ -934,12 +1075,11 @@ exports.default = {
             DataObjectsDeleted: '(AccountId32,PalletStorageBagIdType,BTreeSet<u64>)',
             StorageBucketStatusUpdated: '(u64,bool)',
             UpdateBlacklist: '(BTreeSet<Bytes>,BTreeSet<Bytes>)',
-            DynamicBagDeleted: '(AccountId32,PalletStorageDynamicBagIdType)',
-            DynamicBagCreated: '(PalletStorageDynamicBagIdType,BTreeSet<u64>,BTreeSet<PalletStorageDistributionBucketIdRecord>)',
+            DynamicBagDeleted: 'PalletStorageDynamicBagIdType',
+            DynamicBagCreated: '(PalletStorageDynBagCreationParametersRecord,BTreeSet<u64>)',
             VoucherChanged: '(u64,PalletStorageVoucher)',
             StorageBucketDeleted: 'u64',
             NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: '(PalletStorageDynamicBagType,u64)',
-            BagObjectsChanged: '(PalletStorageBagIdType,u64,u64)',
             DistributionBucketFamilyCreated: 'u64',
             DistributionBucketFamilyDeleted: 'u64',
             DistributionBucketCreated: '(u64,bool,PalletStorageDistributionBucketIdRecord)',
@@ -956,13 +1096,13 @@ exports.default = {
             DistributionBucketOperatorRemoved: '(PalletStorageDistributionBucketIdRecord,u64)',
             DistributionBucketFamilyMetadataSet: '(u64,Bytes)',
             DataObjectStateBloatBondValueUpdated: 'u128',
-            DataObjectsUpdated: '(PalletStorageUploadParametersRecord,BTreeSet<u64>)',
+            DataObjectsUpdated: '(PalletStorageUploadParametersRecord,BTreeSet<u64>,BTreeSet<u64>)',
             StorageOperatorRemarked: '(u64,u64,Bytes)',
             DistributionOperatorRemarked: '(u64,PalletStorageDistributionBucketIdRecord,Bytes)'
         }
     },
     /**
-     * Lookup137: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+     * Lookup152: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
      **/
     PalletStorageUploadParametersRecord: {
         bagId: 'PalletStorageBagIdType',
@@ -972,7 +1112,7 @@ exports.default = {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup138: pallet_storage::BagIdType<MemberId, ChannelId>
+     * Lookup153: pallet_storage::BagIdType<MemberId, ChannelId>
      **/
     PalletStorageBagIdType: {
         _enum: {
@@ -981,7 +1121,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup139: pallet_storage::StaticBagId
+     * Lookup154: pallet_storage::StaticBagId
      **/
     PalletStorageStaticBagId: {
         _enum: {
@@ -990,7 +1130,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup140: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+     * Lookup155: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
      **/
     PalletStorageDynamicBagIdType: {
         _enum: {
@@ -999,7 +1139,19 @@ exports.default = {
         }
     },
     /**
-     * Lookup143: pallet_storage::Voucher
+     * Lookup156: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+     **/
+    PalletStorageDynBagCreationParametersRecord: {
+        bagId: 'PalletStorageDynamicBagIdType',
+        objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
+        stateBloatBondSourceAccountId: 'AccountId32',
+        expectedDataSizeFee: 'u128',
+        expectedDataObjectStateBloatBond: 'u128',
+        storageBuckets: 'BTreeSet<u64>',
+        distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>'
+    },
+    /**
+     * Lookup159: pallet_storage::Voucher
      **/
     PalletStorageVoucher: {
         sizeLimit: 'u64',
@@ -1008,18 +1160,18 @@ exports.default = {
         objectsUsed: 'u64'
     },
     /**
-     * Lookup144: pallet_storage::DynamicBagType
+     * Lookup160: pallet_storage::DynamicBagType
      **/
     PalletStorageDynamicBagType: {
         _enum: ['Member', 'Channel']
     },
     /**
-     * Lookup148: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>>
+     * Lookup164: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>>
      **/
     PalletProjectTokenEventsRawEvent: {
         _enum: {
-            TokenAmountTransferred: '(u64,u64,BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>)',
-            TokenAmountTransferredByIssuer: '(u64,u64,BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>)',
+            TokenAmountTransferred: '(u64,u64,BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>,Bytes)',
+            TokenAmountTransferredByIssuer: '(u64,u64,BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>,Bytes)',
             PatronageRateDecreasedTo: '(u64,Perquintill)',
             PatronageCreditClaimed: '(u64,u128,u64)',
             RevenueSplitIssued: '(u64,u32,u32,u128)',
@@ -1039,7 +1191,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup149: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+     * Lookup165: pallet_project_token::types::TransferPolicy<primitive_types::H256>
      **/
     PalletProjectTokenTransferPolicy: {
         _enum: {
@@ -1048,7 +1200,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup150: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+     * Lookup166: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
      **/
     PalletProjectTokenTokenIssuanceParameters: {
         initialAllocation: 'BTreeMap<u64, PalletProjectTokenTokenAllocation>',
@@ -1058,14 +1210,14 @@ exports.default = {
         revenueSplitRate: 'Permill'
     },
     /**
-     * Lookup151: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup167: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenAllocation: {
         amount: 'u128',
         vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>'
     },
     /**
-     * Lookup152: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+     * Lookup168: pallet_project_token::types::VestingScheduleParams<BlockNumber>
      **/
     PalletProjectTokenVestingScheduleParams: {
         linearVestingDuration: 'u32',
@@ -1073,7 +1225,7 @@ exports.default = {
         cliffAmountPercentage: 'Permill'
     },
     /**
-     * Lookup155: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+     * Lookup171: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
      **/
     PalletProjectTokenTransferPolicyParams: {
         _enum: {
@@ -1082,14 +1234,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup156: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+     * Lookup172: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
      **/
     PalletProjectTokenWhitelistParams: {
         commitment: 'H256',
         payload: 'Option<PalletProjectTokenSingleDataObjectUploadParams>'
     },
     /**
-     * Lookup157: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+     * Lookup173: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
      **/
     PalletProjectTokenSingleDataObjectUploadParams: {
         objectCreationParams: 'PalletStorageDataObjectCreationParameters',
@@ -1097,7 +1249,7 @@ exports.default = {
         expectedDataObjectStateBloatBond: 'u128'
     },
     /**
-     * Lookup164: pallet_project_token::types::Validated<MemberId>
+     * Lookup180: pallet_project_token::types::Validated<MemberId>
      **/
     PalletProjectTokenValidated: {
         _enum: {
@@ -1106,22 +1258,21 @@ exports.default = {
         }
     },
     /**
-     * Lookup165: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup181: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
      **/
     PalletProjectTokenValidatedPayment: {
         payment: 'PalletProjectTokenPaymentWithVesting',
         vestingCleanupCandidate: 'Option<PalletProjectTokenVestingSource>'
     },
     /**
-     * Lookup166: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup182: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenPaymentWithVesting: {
-        remark: 'Bytes',
         amount: 'u128',
         vestingSchedule: 'Option<PalletProjectTokenVestingScheduleParams>'
     },
     /**
-     * Lookup168: pallet_project_token::types::VestingSource
+     * Lookup184: pallet_project_token::types::VestingSource
      **/
     PalletProjectTokenVestingSource: {
         _enum: {
@@ -1131,7 +1282,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup172: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+     * Lookup188: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
      **/
     PalletProjectTokenTokenSale: {
         unitPrice: 'u128',
@@ -1146,7 +1297,7 @@ exports.default = {
         autoFinalize: 'bool'
     },
     /**
-     * Lookup174: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+     * Lookup190: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
      **/
     PalletProposalsEngineRawEvent: {
         _enum: {
@@ -1159,7 +1310,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup175: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+     * Lookup191: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
      **/
     PalletProposalsEngineProposalStatusesProposalStatus: {
         _enum: {
@@ -1169,7 +1320,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup176: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+     * Lookup192: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
      **/
     PalletProposalsEngineProposalStatusesProposalDecision: {
         _enum: {
@@ -1183,13 +1334,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup177: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+     * Lookup193: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
      **/
     PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
         _enum: ['PendingExecution', 'PendingConstitutionality']
     },
     /**
-     * Lookup178: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+     * Lookup194: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
      **/
     PalletProposalsEngineProposalStatusesExecutionStatus: {
         _enum: {
@@ -1200,13 +1351,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup179: pallet_proposals_engine::types::VoteKind
+     * Lookup195: pallet_proposals_engine::types::VoteKind
      **/
     PalletProposalsEngineVoteKind: {
         _enum: ['Approve', 'Reject', 'Slash', 'Abstain']
     },
     /**
-     * Lookup180: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+     * Lookup196: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
      **/
     PalletProposalsDiscussionRawEvent: {
         _enum: {
@@ -1218,7 +1369,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup181: pallet_proposals_discussion::types::ThreadMode<MemberId>
+     * Lookup197: pallet_proposals_discussion::types::ThreadMode<MemberId>
      **/
     PalletProposalsDiscussionThreadMode: {
         _enum: {
@@ -1227,7 +1378,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup182: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+     * Lookup198: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
      **/
     PalletProposalsCodexRawEvent: {
         _enum: {
@@ -1235,7 +1386,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup183: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+     * Lookup199: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
      **/
     PalletProposalsCodexGeneralProposalParams: {
         memberId: 'u64',
@@ -1245,7 +1396,7 @@ exports.default = {
         exactExecutionBlock: 'Option<u32>'
     },
     /**
-     * Lookup184: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>
+     * Lookup200: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>
      **/
     PalletProposalsCodexProposalDetails: {
         _enum: {
@@ -1275,14 +1426,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup186: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+     * Lookup202: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
      **/
     PalletCommonFundingRequestParameters: {
         account: 'AccountId32',
         amount: 'u128'
     },
     /**
-     * Lookup187: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+     * Lookup203: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
      **/
     PalletProposalsCodexCreateOpeningParameters: {
         description: 'Bytes',
@@ -1291,14 +1442,14 @@ exports.default = {
         group: 'PalletCommonWorkingGroup'
     },
     /**
-     * Lookup188: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+     * Lookup204: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
      **/
     PalletWorkingGroupStakePolicy: {
         stakeAmount: 'u128',
         leavingUnstakingPeriod: 'u32'
     },
     /**
-     * Lookup189: pallet_proposals_codex::types::FillOpeningParameters
+     * Lookup205: pallet_proposals_codex::types::FillOpeningParameters
      **/
     PalletProposalsCodexFillOpeningParameters: {
         openingId: 'u64',
@@ -1306,7 +1457,7 @@ exports.default = {
         workingGroup: 'PalletCommonWorkingGroup'
     },
     /**
-     * Lookup190: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+     * Lookup206: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
      **/
     PalletProposalsCodexTerminateRoleParameters: {
         workerId: 'u64',
@@ -1314,7 +1465,7 @@ exports.default = {
         group: 'PalletCommonWorkingGroup'
     },
     /**
-     * Lookup191: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance1>
+     * Lookup207: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance1>
      **/
     PalletWorkingGroupRawEventInstance1: {
         _enum: {
@@ -1347,13 +1498,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup195: pallet_working_group::types::OpeningType
+     * Lookup211: pallet_working_group::types::OpeningType
      **/
     PalletWorkingGroupOpeningType: {
         _enum: ['Leader', 'Regular']
     },
     /**
-     * Lookup196: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+     * Lookup212: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupApplyOnOpeningParams: {
         memberId: 'u64',
@@ -1364,24 +1515,24 @@ exports.default = {
         stakeParameters: 'PalletWorkingGroupStakeParameters'
     },
     /**
-     * Lookup197: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+     * Lookup213: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
      **/
     PalletWorkingGroupStakeParameters: {
         stake: 'u128',
         stakingAccountId: 'AccountId32'
     },
     /**
-     * Lookup198: pallet_working_group::Instance1
+     * Lookup214: pallet_working_group::Instance1
      **/
     PalletWorkingGroupInstance1: 'Null',
     /**
-     * Lookup199: pallet_working_group::types::RewardPaymentType
+     * Lookup215: pallet_working_group::types::RewardPaymentType
      **/
     PalletWorkingGroupRewardPaymentType: {
         _enum: ['MissedReward', 'RegularReward']
     },
     /**
-     * Lookup200: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance2>
+     * Lookup216: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance2>
      **/
     PalletWorkingGroupRawEventInstance2: {
         _enum: {
@@ -1414,11 +1565,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup201: pallet_working_group::Instance2
+     * Lookup217: pallet_working_group::Instance2
      **/
     PalletWorkingGroupInstance2: 'Null',
     /**
-     * Lookup202: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance3>
+     * Lookup218: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance3>
      **/
     PalletWorkingGroupRawEventInstance3: {
         _enum: {
@@ -1451,11 +1602,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup203: pallet_working_group::Instance3
+     * Lookup219: pallet_working_group::Instance3
      **/
     PalletWorkingGroupInstance3: 'Null',
     /**
-     * Lookup204: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance4>
+     * Lookup220: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance4>
      **/
     PalletWorkingGroupRawEventInstance4: {
         _enum: {
@@ -1488,11 +1639,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup205: pallet_working_group::Instance4
+     * Lookup221: pallet_working_group::Instance4
      **/
     PalletWorkingGroupInstance4: 'Null',
     /**
-     * Lookup206: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance5>
+     * Lookup222: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance5>
      **/
     PalletWorkingGroupRawEventInstance5: {
         _enum: {
@@ -1525,11 +1676,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup207: pallet_working_group::Instance5
+     * Lookup223: pallet_working_group::Instance5
      **/
     PalletWorkingGroupInstance5: 'Null',
     /**
-     * Lookup208: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance6>
+     * Lookup224: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance6>
      **/
     PalletWorkingGroupRawEventInstance6: {
         _enum: {
@@ -1562,11 +1713,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup209: pallet_working_group::Instance6
+     * Lookup225: pallet_working_group::Instance6
      **/
     PalletWorkingGroupInstance6: 'Null',
     /**
-     * Lookup210: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance7>
+     * Lookup226: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance7>
      **/
     PalletWorkingGroupRawEventInstance7: {
         _enum: {
@@ -1599,11 +1750,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup211: pallet_working_group::Instance7
+     * Lookup227: pallet_working_group::Instance7
      **/
     PalletWorkingGroupInstance7: 'Null',
     /**
-     * Lookup212: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance8>
+     * Lookup228: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance8>
      **/
     PalletWorkingGroupRawEventInstance8: {
         _enum: {
@@ -1636,11 +1787,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup213: pallet_working_group::Instance8
+     * Lookup229: pallet_working_group::Instance8
      **/
     PalletWorkingGroupInstance8: 'Null',
     /**
-     * Lookup214: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance9>
+     * Lookup230: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance9>
      **/
     PalletWorkingGroupRawEventInstance9: {
         _enum: {
@@ -1673,11 +1824,11 @@ exports.default = {
         }
     },
     /**
-     * Lookup215: pallet_working_group::Instance9
+     * Lookup231: pallet_working_group::Instance9
      **/
     PalletWorkingGroupInstance9: 'Null',
     /**
-     * Lookup216: frame_system::Phase
+     * Lookup232: frame_system::Phase
      **/
     FrameSystemPhase: {
         _enum: {
@@ -1687,14 +1838,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup220: frame_system::LastRuntimeUpgradeInfo
+     * Lookup236: frame_system::LastRuntimeUpgradeInfo
      **/
     FrameSystemLastRuntimeUpgradeInfo: {
         specVersion: 'Compact<u32>',
         specName: 'Text'
     },
     /**
-     * Lookup223: frame_system::pallet::Call<T>
+     * Lookup239: frame_system::pallet::Call<T>
      **/
     FrameSystemCall: {
         _enum: {
@@ -1732,7 +1883,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup226: frame_system::limits::BlockWeights
+     * Lookup242: frame_system::limits::BlockWeights
      **/
     FrameSystemLimitsBlockWeights: {
         baseBlock: 'u64',
@@ -1740,7 +1891,7 @@ exports.default = {
         perClass: 'FrameSupportWeightsPerDispatchClassWeightsPerClass'
     },
     /**
-     * Lookup227: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+     * Lookup243: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
      **/
     FrameSupportWeightsPerDispatchClassWeightsPerClass: {
         normal: 'FrameSystemLimitsWeightsPerClass',
@@ -1748,7 +1899,7 @@ exports.default = {
         mandatory: 'FrameSystemLimitsWeightsPerClass'
     },
     /**
-     * Lookup228: frame_system::limits::WeightsPerClass
+     * Lookup244: frame_system::limits::WeightsPerClass
      **/
     FrameSystemLimitsWeightsPerClass: {
         baseExtrinsic: 'u64',
@@ -1757,13 +1908,13 @@ exports.default = {
         reserved: 'Option<u64>'
     },
     /**
-     * Lookup229: frame_system::limits::BlockLength
+     * Lookup245: frame_system::limits::BlockLength
      **/
     FrameSystemLimitsBlockLength: {
         max: 'FrameSupportWeightsPerDispatchClassU32'
     },
     /**
-     * Lookup230: frame_support::weights::PerDispatchClass<T>
+     * Lookup246: frame_support::weights::PerDispatchClass<T>
      **/
     FrameSupportWeightsPerDispatchClassU32: {
         normal: 'u32',
@@ -1771,14 +1922,14 @@ exports.default = {
         mandatory: 'u32'
     },
     /**
-     * Lookup231: frame_support::weights::RuntimeDbWeight
+     * Lookup247: frame_support::weights::RuntimeDbWeight
      **/
     FrameSupportWeightsRuntimeDbWeight: {
         read: 'u64',
         write: 'u64'
     },
     /**
-     * Lookup232: sp_version::RuntimeVersion
+     * Lookup248: sp_version::RuntimeVersion
      **/
     SpVersionRuntimeVersion: {
         specName: 'Text',
@@ -1791,13 +1942,13 @@ exports.default = {
         stateVersion: 'u8'
     },
     /**
-     * Lookup238: frame_system::pallet::Error<T>
+     * Lookup254: frame_system::pallet::Error<T>
      **/
     FrameSystemError: {
         _enum: ['InvalidSpecName', 'SpecVersionNeedsToIncrease', 'FailedToExtractRuntimeVersion', 'NonDefaultComposite', 'NonZeroRefCount', 'CallFiltered']
     },
     /**
-     * Lookup239: pallet_utility::pallet::Call<T>
+     * Lookup255: pallet_utility::pallet::Call<T>
      **/
     PalletUtilityCall: {
         _enum: {
@@ -1821,7 +1972,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup242: pallet_babe::pallet::Call<T>
+     * Lookup258: pallet_babe::pallet::Call<T>
      **/
     PalletBabeCall: {
         _enum: {
@@ -1839,7 +1990,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup243: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+     * Lookup259: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
      **/
     SpConsensusSlotsEquivocationProof: {
         offender: 'SpConsensusBabeAppPublic',
@@ -1848,7 +1999,7 @@ exports.default = {
         secondHeader: 'SpRuntimeHeader'
     },
     /**
-     * Lookup244: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+     * Lookup260: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
      **/
     SpRuntimeHeader: {
         parentHash: 'H256',
@@ -1858,15 +2009,15 @@ exports.default = {
         digest: 'SpRuntimeDigest'
     },
     /**
-     * Lookup245: sp_runtime::traits::BlakeTwo256
+     * Lookup261: sp_runtime::traits::BlakeTwo256
      **/
     SpRuntimeBlakeTwo256: 'Null',
     /**
-     * Lookup246: sp_consensus_babe::app::Public
+     * Lookup262: sp_consensus_babe::app::Public
      **/
     SpConsensusBabeAppPublic: 'SpCoreSr25519Public',
     /**
-     * Lookup248: sp_session::MembershipProof
+     * Lookup264: sp_session::MembershipProof
      **/
     SpSessionMembershipProof: {
         session: 'u32',
@@ -1874,7 +2025,7 @@ exports.default = {
         validatorCount: 'u32'
     },
     /**
-     * Lookup249: sp_consensus_babe::digests::NextConfigDescriptor
+     * Lookup265: sp_consensus_babe::digests::NextConfigDescriptor
      **/
     SpConsensusBabeDigestsNextConfigDescriptor: {
         _enum: {
@@ -1886,13 +2037,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup250: sp_consensus_babe::AllowedSlots
+     * Lookup266: sp_consensus_babe::AllowedSlots
      **/
     SpConsensusBabeAllowedSlots: {
         _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
     },
     /**
-     * Lookup251: pallet_timestamp::pallet::Call<T>
+     * Lookup267: pallet_timestamp::pallet::Call<T>
      **/
     PalletTimestampCall: {
         _enum: {
@@ -1902,7 +2053,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup253: pallet_authorship::pallet::Call<T>
+     * Lookup269: pallet_authorship::pallet::Call<T>
      **/
     PalletAuthorshipCall: {
         _enum: {
@@ -1912,7 +2063,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup255: pallet_balances::pallet::Call<T, I>
+     * Lookup271: pallet_balances::pallet::Call<T, I>
      **/
     PalletBalancesCall: {
         _enum: {
@@ -1945,7 +2096,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup256: pallet_election_provider_multi_phase::pallet::Call<T>
+     * Lookup272: pallet_election_provider_multi_phase::pallet::Call<T>
      **/
     PalletElectionProviderMultiPhaseCall: {
         _enum: {
@@ -1969,7 +2120,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup257: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+     * Lookup273: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
      **/
     PalletElectionProviderMultiPhaseRawSolution: {
         solution: 'JoystreamNodeRuntimeNposSolution16',
@@ -1977,7 +2128,7 @@ exports.default = {
         round: 'u32'
     },
     /**
-     * Lookup258: joystream_node_runtime::NposSolution16
+     * Lookup274: joystream_node_runtime::NposSolution16
      **/
     JoystreamNodeRuntimeNposSolution16: {
         votes1: 'Vec<(Compact<u32>,Compact<u16>)>',
@@ -1998,7 +2149,7 @@ exports.default = {
         votes16: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);15],Compact<u16>)>'
     },
     /**
-     * Lookup309: sp_npos_elections::ElectionScore
+     * Lookup325: sp_npos_elections::ElectionScore
      **/
     SpNposElectionsElectionScore: {
         minimalStake: 'u128',
@@ -2006,21 +2157,21 @@ exports.default = {
         sumStakeSquared: 'u128'
     },
     /**
-     * Lookup310: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+     * Lookup326: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
      **/
     PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
         voters: 'Compact<u32>',
         targets: 'Compact<u32>'
     },
     /**
-     * Lookup314: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+     * Lookup330: sp_npos_elections::Support<sp_core::crypto::AccountId32>
      **/
     SpNposElectionsSupport: {
         total: 'u128',
         voters: 'Vec<(AccountId32,u128)>'
     },
     /**
-     * Lookup317: pallet_staking::pallet::pallet::Call<T>
+     * Lookup333: pallet_staking::pallet::pallet::Call<T>
      **/
     PalletStakingPalletCall: {
         _enum: {
@@ -2112,7 +2263,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup318: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
+     * Lookup334: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
      **/
     PalletStakingRewardDestination: {
         _enum: {
@@ -2124,7 +2275,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup322: pallet_staking::pallet::pallet::ConfigOp<T>
+     * Lookup338: pallet_staking::pallet::pallet::ConfigOp<T>
      **/
     PalletStakingPalletConfigOpU128: {
         _enum: {
@@ -2134,7 +2285,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup323: pallet_staking::pallet::pallet::ConfigOp<T>
+     * Lookup339: pallet_staking::pallet::pallet::ConfigOp<T>
      **/
     PalletStakingPalletConfigOpU32: {
         _enum: {
@@ -2144,7 +2295,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup324: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
+     * Lookup340: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
      **/
     PalletStakingPalletConfigOpPercent: {
         _enum: {
@@ -2154,7 +2305,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup325: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
+     * Lookup341: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
      **/
     PalletStakingPalletConfigOpPerbill: {
         _enum: {
@@ -2164,7 +2315,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup326: pallet_session::pallet::Call<T>
+     * Lookup342: pallet_session::pallet::Call<T>
      **/
     PalletSessionCall: {
         _enum: {
@@ -2179,7 +2330,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup327: joystream_node_runtime::SessionKeys
+     * Lookup343: joystream_node_runtime::SessionKeys
      **/
     JoystreamNodeRuntimeSessionKeys: {
         grandpa: 'SpFinalityGrandpaAppPublic',
@@ -2188,11 +2339,11 @@ exports.default = {
         authorityDiscovery: 'SpAuthorityDiscoveryAppPublic'
     },
     /**
-     * Lookup328: sp_authority_discovery::app::Public
+     * Lookup344: sp_authority_discovery::app::Public
      **/
     SpAuthorityDiscoveryAppPublic: 'SpCoreSr25519Public',
     /**
-     * Lookup329: pallet_grandpa::pallet::Call<T>
+     * Lookup345: pallet_grandpa::pallet::Call<T>
      **/
     PalletGrandpaCall: {
         _enum: {
@@ -2211,14 +2362,14 @@ exports.default = {
         }
     },
     /**
-     * Lookup330: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
+     * Lookup346: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
      **/
     SpFinalityGrandpaEquivocationProof: {
         setId: 'u64',
         equivocation: 'SpFinalityGrandpaEquivocation'
     },
     /**
-     * Lookup331: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
+     * Lookup347: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
      **/
     SpFinalityGrandpaEquivocation: {
         _enum: {
@@ -2227,7 +2378,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup332: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     * Lookup348: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
      **/
     FinalityGrandpaEquivocationPrevote: {
         roundNumber: 'u64',
@@ -2236,22 +2387,22 @@ exports.default = {
         second: '(FinalityGrandpaPrevote,SpFinalityGrandpaAppSignature)'
     },
     /**
-     * Lookup333: finality_grandpa::Prevote<primitive_types::H256, N>
+     * Lookup349: finality_grandpa::Prevote<primitive_types::H256, N>
      **/
     FinalityGrandpaPrevote: {
         targetHash: 'H256',
         targetNumber: 'u32'
     },
     /**
-     * Lookup334: sp_finality_grandpa::app::Signature
+     * Lookup350: sp_finality_grandpa::app::Signature
      **/
     SpFinalityGrandpaAppSignature: 'SpCoreEd25519Signature',
     /**
-     * Lookup335: sp_core::ed25519::Signature
+     * Lookup351: sp_core::ed25519::Signature
      **/
     SpCoreEd25519Signature: '[u8;64]',
     /**
-     * Lookup338: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+     * Lookup354: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
      **/
     FinalityGrandpaEquivocationPrecommit: {
         roundNumber: 'u64',
@@ -2260,14 +2411,14 @@ exports.default = {
         second: '(FinalityGrandpaPrecommit,SpFinalityGrandpaAppSignature)'
     },
     /**
-     * Lookup339: finality_grandpa::Precommit<primitive_types::H256, N>
+     * Lookup355: finality_grandpa::Precommit<primitive_types::H256, N>
      **/
     FinalityGrandpaPrecommit: {
         targetHash: 'H256',
         targetNumber: 'u32'
     },
     /**
-     * Lookup341: pallet_im_online::pallet::Call<T>
+     * Lookup357: pallet_im_online::pallet::Call<T>
      **/
     PalletImOnlineCall: {
         _enum: {
@@ -2278,7 +2429,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup342: pallet_im_online::Heartbeat<BlockNumber>
+     * Lookup358: pallet_im_online::Heartbeat<BlockNumber>
      **/
     PalletImOnlineHeartbeat: {
         blockNumber: 'u32',
@@ -2288,22 +2439,22 @@ exports.default = {
         validatorsLen: 'u32'
     },
     /**
-     * Lookup343: sp_core::offchain::OpaqueNetworkState
+     * Lookup359: sp_core::offchain::OpaqueNetworkState
      **/
     SpCoreOffchainOpaqueNetworkState: {
         peerId: 'Bytes',
         externalAddresses: 'Vec<Bytes>'
     },
     /**
-     * Lookup347: pallet_im_online::sr25519::app_sr25519::Signature
+     * Lookup363: pallet_im_online::sr25519::app_sr25519::Signature
      **/
     PalletImOnlineSr25519AppSr25519Signature: 'SpCoreSr25519Signature',
     /**
-     * Lookup348: sp_core::sr25519::Signature
+     * Lookup364: sp_core::sr25519::Signature
      **/
     SpCoreSr25519Signature: '[u8;64]',
     /**
-     * Lookup349: pallet_sudo::pallet::Call<T>
+     * Lookup365: pallet_sudo::pallet::Call<T>
      **/
     PalletSudoCall: {
         _enum: {
@@ -2327,7 +2478,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup350: pallet_bags_list::pallet::Call<T, I>
+     * Lookup366: pallet_bags_list::pallet::Call<T, I>
      **/
     PalletBagsListCall: {
         _enum: {
@@ -2340,7 +2491,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup351: pallet_vesting::pallet::Call<T>
+     * Lookup367: pallet_vesting::pallet::Call<T>
      **/
     PalletVestingCall: {
         _enum: {
@@ -2364,7 +2515,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup352: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+     * Lookup368: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
      **/
     PalletVestingVestingInfo: {
         locked: 'u128',
@@ -2372,7 +2523,39 @@ exports.default = {
         startingBlock: 'u32'
     },
     /**
-     * Lookup353: pallet_council::Call<T>
+     * Lookup369: pallet_multisig::pallet::Call<T>
+     **/
+    PalletMultisigCall: {
+        _enum: {
+            as_multi_threshold_1: {
+                otherSignatories: 'Vec<AccountId32>',
+                call: 'Call',
+            },
+            as_multi: {
+                threshold: 'u16',
+                otherSignatories: 'Vec<AccountId32>',
+                maybeTimepoint: 'Option<PalletMultisigTimepoint>',
+                call: 'WrapperKeepOpaque<Call>',
+                storeCall: 'bool',
+                maxWeight: 'u64',
+            },
+            approve_as_multi: {
+                threshold: 'u16',
+                otherSignatories: 'Vec<AccountId32>',
+                maybeTimepoint: 'Option<PalletMultisigTimepoint>',
+                callHash: '[u8;32]',
+                maxWeight: 'u64',
+            },
+            cancel_as_multi: {
+                threshold: 'u16',
+                otherSignatories: 'Vec<AccountId32>',
+                timepoint: 'PalletMultisigTimepoint',
+                callHash: '[u8;32]'
+            }
+        }
+    },
+    /**
+     * Lookup372: pallet_council::Call<T>
      **/
     PalletCouncilCall: {
         _enum: {
@@ -2423,7 +2606,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup354: pallet_referendum::Call<T, I>
+     * Lookup373: pallet_referendum::Call<T, I>
      **/
     PalletReferendumCall: {
         _enum: {
@@ -2439,7 +2622,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup355: pallet_membership::Call<T>
+     * Lookup374: pallet_membership::Call<T>
      **/
     PalletMembershipCall: {
         _enum: {
@@ -2507,7 +2690,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup356: pallet_forum::Call<T>
+     * Lookup375: pallet_forum::Call<T>
      **/
     PalletForumCall: {
         _enum: {
@@ -2577,13 +2760,6 @@ exports.default = {
                 text: 'Bytes',
                 editable: 'bool',
             },
-            react_post: {
-                forumUserId: 'u64',
-                categoryId: 'u64',
-                threadId: 'u64',
-                postId: 'u64',
-                react: 'u64',
-            },
             edit_post_text: {
                 forumUserId: 'u64',
                 categoryId: 'u64',
@@ -2611,7 +2787,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup357: pallet_constitution::Call<T>
+     * Lookup376: pallet_constitution::Call<T>
      **/
     PalletConstitutionCall: {
         _enum: {
@@ -2621,7 +2797,83 @@ exports.default = {
         }
     },
     /**
-     * Lookup359: pallet_content::Call<T>
+     * Lookup377: pallet_bounty::Call<T>
+     **/
+    PalletBountyCall: {
+        _enum: {
+            create_bounty: {
+                params: 'PalletBountyBountyParameters',
+                metadata: 'Bytes',
+            },
+            fund_bounty: {
+                funder: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+                amount: 'u128',
+            },
+            terminate_bounty: {
+                bountyId: 'u64',
+            },
+            switch_oracle: {
+                newOracle: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+            },
+            withdraw_funding: {
+                funder: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+            },
+            announce_work_entry: {
+                memberId: 'u64',
+                bountyId: 'u64',
+                stakingAccountId: 'AccountId32',
+                workDescription: 'Bytes',
+            },
+            submit_work: {
+                memberId: 'u64',
+                bountyId: 'u64',
+                entryId: 'u64',
+                workData: 'Bytes',
+            },
+            end_working_period: {
+                bountyId: 'u64',
+            },
+            submit_oracle_judgment: {
+                bountyId: 'u64',
+                judgment: 'BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>',
+                rationale: 'Bytes',
+            },
+            withdraw_entrant_stake: {
+                memberId: 'u64',
+                bountyId: 'u64',
+                entryId: 'u64',
+            },
+            withdraw_oracle_reward: {
+                bountyId: 'u64',
+            },
+            contributor_remark: {
+                contributor: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+                msg: 'Bytes',
+            },
+            oracle_remark: {
+                oracle: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+                msg: 'Bytes',
+            },
+            entrant_remark: {
+                entrantId: 'u64',
+                bountyId: 'u64',
+                entryId: 'u64',
+                msg: 'Bytes',
+            },
+            creator_remark: {
+                creator: 'PalletBountyBountyActor',
+                bountyId: 'u64',
+                msg: 'Bytes'
+            }
+        }
+    },
+    /**
+     * Lookup379: pallet_content::Call<T>
      **/
     PalletContentCall: {
         _enum: {
@@ -2668,17 +2920,20 @@ exports.default = {
             delete_channel: {
                 actor: 'PalletContentPermissionsContentActor',
                 channelId: 'u64',
+                channelBagWitness: 'PalletContentChannelBagWitness',
                 numObjectsToDelete: 'u64',
             },
             delete_channel_assets_as_moderator: {
                 actor: 'PalletContentPermissionsContentActor',
                 channelId: 'u64',
                 assetsToRemove: 'BTreeSet<u64>',
+                storageBucketsNumWitness: 'u32',
                 rationale: 'Bytes',
             },
             delete_channel_as_moderator: {
                 actor: 'PalletContentPermissionsContentActor',
                 channelId: 'u64',
+                channelBagWitness: 'PalletContentChannelBagWitness',
                 numObjectsToDelete: 'u64',
                 rationale: 'Bytes',
             },
@@ -2702,16 +2957,19 @@ exports.default = {
                 actor: 'PalletContentPermissionsContentActor',
                 videoId: 'u64',
                 numObjectsToDelete: 'u64',
+                storageBucketsNumWitness: 'Option<u32>',
             },
             delete_video_assets_as_moderator: {
                 actor: 'PalletContentPermissionsContentActor',
                 videoId: 'u64',
+                storageBucketsNumWitness: 'u32',
                 assetsToRemove: 'BTreeSet<u64>',
                 rationale: 'Bytes',
             },
             delete_video_as_moderator: {
                 actor: 'PalletContentPermissionsContentActor',
                 videoId: 'u64',
+                storageBucketsNumWitness: 'Option<u32>',
                 numObjectsToDelete: 'u64',
                 rationale: 'Bytes',
             },
@@ -2726,7 +2984,7 @@ exports.default = {
             },
             claim_channel_reward: {
                 actor: 'PalletContentPermissionsContentActor',
-                proof: 'Vec<PalletContentProofElementRecord>',
+                proof: 'Vec<PalletCommonProofElementRecord>',
                 item: 'PalletContentPullPaymentElement',
             },
             withdraw_from_channel_balance: {
@@ -2742,7 +3000,7 @@ exports.default = {
             },
             claim_and_withdraw_channel_reward: {
                 actor: 'PalletContentPermissionsContentActor',
-                proof: 'Vec<PalletContentProofElementRecord>',
+                proof: 'Vec<PalletCommonProofElementRecord>',
                 item: 'PalletContentPullPaymentElement',
             },
             issue_nft: {
@@ -2860,7 +3118,7 @@ exports.default = {
             },
             accept_channel_transfer: {
                 channelId: 'u64',
-                commitmentParams: 'PalletContentTransferCommitmentParameters',
+                commitmentParams: 'PalletContentTransferCommitmentParametersBTreeMap',
             },
             update_global_nft_limit: {
                 nftLimitPeriod: 'PalletContentNftLimitPeriod',
@@ -2892,6 +3150,7 @@ exports.default = {
                 actor: 'PalletContentPermissionsContentActor',
                 channelId: 'u64',
                 outputs: 'PalletProjectTokenTransfersPaymentWithVesting',
+                metadata: 'Bytes',
             },
             make_creator_token_permissionless: {
                 actor: 'PalletContentPermissionsContentActor',
@@ -2927,23 +3186,30 @@ exports.default = {
         }
     },
     /**
-     * Lookup361: pallet_content::types::ProofElementRecord<primitive_types::H256, pallet_content::types::Side>
+     * Lookup380: pallet_content::types::ChannelBagWitness
      **/
-    PalletContentProofElementRecord: {
+    PalletContentChannelBagWitness: {
+        storageBucketsNum: 'u32',
+        distributionBucketsNum: 'u32'
+    },
+    /**
+     * Lookup382: pallet_common::ProofElementRecord<primitive_types::H256, pallet_common::Side>
+     **/
+    PalletCommonProofElementRecord: {
         _alias: {
             hash_: 'hash'
         },
         hash_: 'H256',
-        side: 'PalletContentSide'
+        side: 'PalletCommonSide'
     },
     /**
-     * Lookup362: pallet_content::types::Side
+     * Lookup383: pallet_common::Side
      **/
-    PalletContentSide: {
+    PalletCommonSide: {
         _enum: ['Left', 'Right']
     },
     /**
-     * Lookup363: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+     * Lookup384: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
      **/
     PalletContentPullPaymentElement: {
         channelId: 'u64',
@@ -2951,7 +3217,7 @@ exports.default = {
         reason: 'H256'
     },
     /**
-     * Lookup364: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+     * Lookup385: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
      **/
     PalletContentInitTransferParameters: {
         newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>',
@@ -2959,7 +3225,7 @@ exports.default = {
         newOwner: 'PalletContentChannelOwner'
     },
     /**
-     * Lookup365: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+     * Lookup386: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
      **/
     PalletProjectTokenTokenSaleParams: {
         unitPrice: 'u128',
@@ -2971,11 +3237,11 @@ exports.default = {
         metadata: 'Option<Bytes>'
     },
     /**
-     * Lookup366: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+     * Lookup387: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
      **/
     PalletProjectTokenTransfersPaymentWithVesting: 'BTreeMap<u64, PalletProjectTokenPaymentWithVesting>',
     /**
-     * Lookup370: pallet_storage::Call<T>
+     * Lookup391: pallet_storage::Call<T>
      **/
     PalletStorageCall: {
         _enum: {
@@ -3112,9 +3378,6 @@ exports.default = {
             sudo_upload_data_objects: {
                 params: 'PalletStorageUploadParametersRecord',
             },
-            sudo_create_dynamic_bag: {
-                params: 'PalletStorageDynBagCreationParametersRecord',
-            },
             storage_operator_remark: {
                 workerId: 'u64',
                 storageBucketId: 'u64',
@@ -3128,19 +3391,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup371: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
-     **/
-    PalletStorageDynBagCreationParametersRecord: {
-        bagId: 'PalletStorageDynamicBagIdType',
-        objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
-        stateBloatBondSourceAccountId: 'AccountId32',
-        expectedDataSizeFee: 'u128',
-        expectedDataObjectStateBloatBond: 'u128',
-        storageBuckets: 'BTreeSet<u64>',
-        distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>'
-    },
-    /**
-     * Lookup372: pallet_project_token::Call<T>
+     * Lookup392: pallet_project_token::Call<T>
      **/
     PalletProjectTokenCall: {
         _enum: {
@@ -3148,6 +3399,7 @@ exports.default = {
                 srcMemberId: 'u64',
                 tokenId: 'u64',
                 outputs: 'PalletProjectTokenTransfersPayment',
+                metadata: 'Bytes',
             },
             burn: {
                 tokenId: 'u64',
@@ -3180,28 +3432,27 @@ exports.default = {
         }
     },
     /**
-     * Lookup373: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
+     * Lookup393: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
      **/
     PalletProjectTokenTransfersPayment: 'BTreeMap<u64, PalletProjectTokenPayment>',
     /**
-     * Lookup374: pallet_project_token::types::Payment<Balance>
+     * Lookup394: pallet_project_token::types::Payment<Balance>
      **/
     PalletProjectTokenPayment: {
-        remark: 'Bytes',
         amount: 'u128'
     },
     /**
-     * Lookup378: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+     * Lookup398: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
      **/
     PalletProjectTokenMerkleProof: 'Vec<(H256,PalletProjectTokenMerkleSide)>',
     /**
-     * Lookup381: pallet_project_token::types::MerkleSide
+     * Lookup401: pallet_project_token::types::MerkleSide
      **/
     PalletProjectTokenMerkleSide: {
         _enum: ['Right', 'Left']
     },
     /**
-     * Lookup382: pallet_proposals_engine::Call<T>
+     * Lookup402: pallet_proposals_engine::Call<T>
      **/
     PalletProposalsEngineCall: {
         _enum: {
@@ -3226,7 +3477,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup383: pallet_proposals_discussion::Call<T>
+     * Lookup403: pallet_proposals_discussion::Call<T>
      **/
     PalletProposalsDiscussionCall: {
         _enum: {
@@ -3255,7 +3506,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup384: pallet_proposals_codex::Call<T>
+     * Lookup404: pallet_proposals_codex::Call<T>
      **/
     PalletProposalsCodexCall: {
         _enum: {
@@ -3266,7 +3517,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup385: pallet_working_group::Call<T, I>
+     * Lookup405: pallet_working_group::Call<T, I>
      **/
     PalletWorkingGroupCall: {
         _enum: {
@@ -3353,7 +3604,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup394: joystream_node_runtime::OriginCaller
+     * Lookup414: joystream_node_runtime::OriginCaller
      **/
     JoystreamNodeRuntimeOriginCaller: {
         _enum: {
@@ -3362,7 +3613,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup395: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+     * Lookup415: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
      **/
     FrameSupportDispatchRawOrigin: {
         _enum: {
@@ -3372,17 +3623,17 @@ exports.default = {
         }
     },
     /**
-     * Lookup396: sp_core::Void
+     * Lookup416: sp_core::Void
      **/
     SpCoreVoid: 'Null',
     /**
-     * Lookup397: pallet_utility::pallet::Error<T>
+     * Lookup417: pallet_utility::pallet::Error<T>
      **/
     PalletUtilityError: {
         _enum: ['TooManyCalls']
     },
     /**
-     * Lookup404: sp_consensus_babe::digests::PreDigest
+     * Lookup424: sp_consensus_babe::digests::PreDigest
      **/
     SpConsensusBabeDigestsPreDigest: {
         _enum: {
@@ -3393,7 +3644,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup405: sp_consensus_babe::digests::PrimaryPreDigest
+     * Lookup425: sp_consensus_babe::digests::PrimaryPreDigest
      **/
     SpConsensusBabeDigestsPrimaryPreDigest: {
         authorityIndex: 'u32',
@@ -3402,14 +3653,14 @@ exports.default = {
         vrfProof: '[u8;64]'
     },
     /**
-     * Lookup406: sp_consensus_babe::digests::SecondaryPlainPreDigest
+     * Lookup426: sp_consensus_babe::digests::SecondaryPlainPreDigest
      **/
     SpConsensusBabeDigestsSecondaryPlainPreDigest: {
         authorityIndex: 'u32',
         slot: 'u64'
     },
     /**
-     * Lookup407: sp_consensus_babe::digests::SecondaryVRFPreDigest
+     * Lookup427: sp_consensus_babe::digests::SecondaryVRFPreDigest
      **/
     SpConsensusBabeDigestsSecondaryVRFPreDigest: {
         authorityIndex: 'u32',
@@ -3418,20 +3669,20 @@ exports.default = {
         vrfProof: '[u8;64]'
     },
     /**
-     * Lookup409: sp_consensus_babe::BabeEpochConfiguration
+     * Lookup429: sp_consensus_babe::BabeEpochConfiguration
      **/
     SpConsensusBabeBabeEpochConfiguration: {
         c: '(u64,u64)',
         allowedSlots: 'SpConsensusBabeAllowedSlots'
     },
     /**
-     * Lookup410: pallet_babe::pallet::Error<T>
+     * Lookup430: pallet_babe::pallet::Error<T>
      **/
     PalletBabeError: {
         _enum: ['InvalidEquivocationProof', 'InvalidKeyOwnershipProof', 'DuplicateOffenceReport', 'InvalidConfiguration']
     },
     /**
-     * Lookup412: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
+     * Lookup432: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
      **/
     PalletAuthorshipUncleEntryItem: {
         _enum: {
@@ -3440,13 +3691,13 @@ exports.default = {
         }
     },
     /**
-     * Lookup413: pallet_authorship::pallet::Error<T>
+     * Lookup433: pallet_authorship::pallet::Error<T>
      **/
     PalletAuthorshipError: {
         _enum: ['InvalidUncleParent', 'UnclesAlreadySet', 'TooManyUncles', 'GenesisUncle', 'TooHighUncle', 'UncleAlreadyIncluded', 'OldUncle']
     },
     /**
-     * Lookup415: pallet_balances::BalanceLock<Balance>
+     * Lookup435: pallet_balances::BalanceLock<Balance>
      **/
     PalletBalancesBalanceLock: {
         id: '[u8;8]',
@@ -3454,38 +3705,38 @@ exports.default = {
         reasons: 'PalletBalancesReasons'
     },
     /**
-     * Lookup416: pallet_balances::Reasons
+     * Lookup436: pallet_balances::Reasons
      **/
     PalletBalancesReasons: {
         _enum: ['Fee', 'Misc', 'All']
     },
     /**
-     * Lookup419: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+     * Lookup439: pallet_balances::ReserveData<ReserveIdentifier, Balance>
      **/
     PalletBalancesReserveData: {
         id: '[u8;8]',
         amount: 'u128'
     },
     /**
-     * Lookup421: pallet_balances::Releases
+     * Lookup441: pallet_balances::Releases
      **/
     PalletBalancesReleases: {
         _enum: ['V1_0_0', 'V2_0_0']
     },
     /**
-     * Lookup422: pallet_balances::pallet::Error<T, I>
+     * Lookup442: pallet_balances::pallet::Error<T, I>
      **/
     PalletBalancesError: {
         _enum: ['VestingBalance', 'LiquidityRestrictions', 'InsufficientBalance', 'ExistentialDeposit', 'KeepAlive', 'ExistingVestingSchedule', 'DeadAccount', 'TooManyReserves']
     },
     /**
-     * Lookup424: pallet_transaction_payment::Releases
+     * Lookup444: pallet_transaction_payment::Releases
      **/
     PalletTransactionPaymentReleases: {
         _enum: ['V1Ancient', 'V2']
     },
     /**
-     * Lookup425: pallet_election_provider_multi_phase::Phase<Bn>
+     * Lookup445: pallet_election_provider_multi_phase::Phase<Bn>
      **/
     PalletElectionProviderMultiPhasePhase: {
         _enum: {
@@ -3496,7 +3747,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup427: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+     * Lookup447: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
      **/
     PalletElectionProviderMultiPhaseReadySolution: {
         supports: 'Vec<(AccountId32,SpNposElectionsSupport)>',
@@ -3504,14 +3755,14 @@ exports.default = {
         compute: 'PalletElectionProviderMultiPhaseElectionCompute'
     },
     /**
-     * Lookup428: pallet_election_provider_multi_phase::RoundSnapshot<T>
+     * Lookup448: pallet_election_provider_multi_phase::RoundSnapshot<T>
      **/
     PalletElectionProviderMultiPhaseRoundSnapshot: {
         voters: 'Vec<(AccountId32,u64,Vec<AccountId32>)>',
         targets: 'Vec<AccountId32>'
     },
     /**
-     * Lookup436: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
+     * Lookup456: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
      **/
     PalletElectionProviderMultiPhaseSignedSignedSubmission: {
         who: 'AccountId32',
@@ -3520,13 +3771,13 @@ exports.default = {
         callFee: 'u128'
     },
     /**
-     * Lookup437: pallet_election_provider_multi_phase::pallet::Error<T>
+     * Lookup457: pallet_election_provider_multi_phase::pallet::Error<T>
      **/
     PalletElectionProviderMultiPhaseError: {
         _enum: ['PreDispatchEarlySubmission', 'PreDispatchWrongWinnerCount', 'PreDispatchWeakSubmission', 'SignedQueueFull', 'SignedCannotPayDeposit', 'SignedInvalidWitness', 'SignedTooMuchWeight', 'OcwCallWrongEra', 'MissingSnapshotMetadata', 'InvalidSubmissionIndex', 'CallNotAllowed', 'FallbackFailed']
     },
     /**
-     * Lookup438: pallet_staking::StakingLedger<T>
+     * Lookup458: pallet_staking::StakingLedger<T>
      **/
     PalletStakingStakingLedger: {
         stash: 'AccountId32',
@@ -3536,14 +3787,14 @@ exports.default = {
         claimedRewards: 'Vec<u32>'
     },
     /**
-     * Lookup440: pallet_staking::UnlockChunk<Balance>
+     * Lookup460: pallet_staking::UnlockChunk<Balance>
      **/
     PalletStakingUnlockChunk: {
         value: 'Compact<u128>',
         era: 'Compact<u32>'
     },
     /**
-     * Lookup442: pallet_staking::Nominations<T>
+     * Lookup462: pallet_staking::Nominations<T>
      **/
     PalletStakingNominations: {
         targets: 'Vec<AccountId32>',
@@ -3551,27 +3802,27 @@ exports.default = {
         suppressed: 'bool'
     },
     /**
-     * Lookup443: pallet_staking::ActiveEraInfo
+     * Lookup463: pallet_staking::ActiveEraInfo
      **/
     PalletStakingActiveEraInfo: {
         index: 'u32',
         start: 'Option<u64>'
     },
     /**
-     * Lookup445: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+     * Lookup465: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
      **/
     PalletStakingEraRewardPoints: {
         total: 'u32',
         individual: 'BTreeMap<AccountId32, u32>'
     },
     /**
-     * Lookup449: pallet_staking::Forcing
+     * Lookup469: pallet_staking::Forcing
      **/
     PalletStakingForcing: {
         _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
     },
     /**
-     * Lookup451: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
+     * Lookup471: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
      **/
     PalletStakingUnappliedSlash: {
         validator: 'AccountId32',
@@ -3581,7 +3832,7 @@ exports.default = {
         payout: 'u128'
     },
     /**
-     * Lookup453: pallet_staking::slashing::SlashingSpans
+     * Lookup473: pallet_staking::slashing::SlashingSpans
      **/
     PalletStakingSlashingSlashingSpans: {
         spanIndex: 'u32',
@@ -3590,36 +3841,36 @@ exports.default = {
         prior: 'Vec<u32>'
     },
     /**
-     * Lookup454: pallet_staking::slashing::SpanRecord<Balance>
+     * Lookup474: pallet_staking::slashing::SpanRecord<Balance>
      **/
     PalletStakingSlashingSpanRecord: {
         slashed: 'u128',
         paidOut: 'u128'
     },
     /**
-     * Lookup457: pallet_staking::Releases
+     * Lookup477: pallet_staking::Releases
      **/
     PalletStakingReleases: {
         _enum: ['V1_0_0Ancient', 'V2_0_0', 'V3_0_0', 'V4_0_0', 'V5_0_0', 'V6_0_0', 'V7_0_0', 'V8_0_0', 'V9_0_0']
     },
     /**
-     * Lookup458: pallet_staking::pallet::pallet::Error<T>
+     * Lookup478: pallet_staking::pallet::pallet::Error<T>
      **/
     PalletStakingPalletError: {
-        _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow']
+        _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow', 'BondingRestricted']
     },
     /**
-     * Lookup462: sp_core::crypto::KeyTypeId
+     * Lookup482: sp_core::crypto::KeyTypeId
      **/
     SpCoreCryptoKeyTypeId: '[u8;4]',
     /**
-     * Lookup463: pallet_session::pallet::Error<T>
+     * Lookup483: pallet_session::pallet::Error<T>
      **/
     PalletSessionError: {
         _enum: ['InvalidProof', 'NoAssociatedValidatorId', 'DuplicatedKey', 'NoKeys', 'NoAccount']
     },
     /**
-     * Lookup465: pallet_grandpa::StoredState<N>
+     * Lookup485: pallet_grandpa::StoredState<N>
      **/
     PalletGrandpaStoredState: {
         _enum: {
@@ -3636,7 +3887,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup466: pallet_grandpa::StoredPendingChange<N, Limit>
+     * Lookup486: pallet_grandpa::StoredPendingChange<N, Limit>
      **/
     PalletGrandpaStoredPendingChange: {
         scheduledAt: 'u32',
@@ -3645,39 +3896,39 @@ exports.default = {
         forced: 'Option<u32>'
     },
     /**
-     * Lookup468: pallet_grandpa::pallet::Error<T>
+     * Lookup488: pallet_grandpa::pallet::Error<T>
      **/
     PalletGrandpaError: {
         _enum: ['PauseFailed', 'ResumeFailed', 'ChangePending', 'TooSoon', 'InvalidKeyOwnershipProof', 'InvalidEquivocationProof', 'DuplicateOffenceReport']
     },
     /**
-     * Lookup474: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+     * Lookup494: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
      **/
     PalletImOnlineBoundedOpaqueNetworkState: {
         peerId: 'Bytes',
         externalAddresses: 'Vec<Bytes>'
     },
     /**
-     * Lookup478: pallet_im_online::pallet::Error<T>
+     * Lookup498: pallet_im_online::pallet::Error<T>
      **/
     PalletImOnlineError: {
         _enum: ['InvalidKey', 'DuplicatedHeartbeat']
     },
     /**
-     * Lookup479: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+     * Lookup499: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
      **/
     SpStakingOffenceOffenceDetails: {
         offender: '(AccountId32,PalletStakingExposure)',
         reporters: 'Vec<AccountId32>'
     },
     /**
-     * Lookup482: pallet_sudo::pallet::Error<T>
+     * Lookup502: pallet_sudo::pallet::Error<T>
      **/
     PalletSudoError: {
         _enum: ['RequireSudo']
     },
     /**
-     * Lookup483: pallet_bags_list::list::Node<T, I>
+     * Lookup503: pallet_bags_list::list::Node<T, I>
      **/
     PalletBagsListListNode: {
         id: 'AccountId32',
@@ -3687,14 +3938,14 @@ exports.default = {
         score: 'u64'
     },
     /**
-     * Lookup484: pallet_bags_list::list::Bag<T, I>
+     * Lookup504: pallet_bags_list::list::Bag<T, I>
      **/
     PalletBagsListListBag: {
         head: 'Option<AccountId32>',
         tail: 'Option<AccountId32>'
     },
     /**
-     * Lookup485: pallet_bags_list::pallet::Error<T, I>
+     * Lookup505: pallet_bags_list::pallet::Error<T, I>
      **/
     PalletBagsListError: {
         _enum: {
@@ -3702,54 +3953,76 @@ exports.default = {
         }
     },
     /**
-     * Lookup486: pallet_bags_list::list::ListError
+     * Lookup506: pallet_bags_list::list::ListError
      **/
     PalletBagsListListListError: {
         _enum: ['Duplicate', 'NotHeavier', 'NotInSameBag', 'NodeNotFound']
     },
     /**
-     * Lookup489: pallet_vesting::Releases
+     * Lookup509: pallet_vesting::Releases
      **/
     PalletVestingReleases: {
         _enum: ['V0', 'V1']
     },
     /**
-     * Lookup490: pallet_vesting::pallet::Error<T>
+     * Lookup510: pallet_vesting::pallet::Error<T>
      **/
     PalletVestingError: {
         _enum: ['NotVesting', 'AtMaxVestingSchedules', 'AmountLow', 'ScheduleIndexOutOfBounds', 'InvalidScheduleParams']
     },
     /**
-     * Lookup491: pallet_council::CouncilStageUpdate<BlockNumber>
+     * Lookup512: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+     **/
+    PalletMultisigMultisig: {
+        when: 'PalletMultisigTimepoint',
+        deposit: 'u128',
+        depositor: 'AccountId32',
+        approvals: 'Vec<AccountId32>'
+    },
+    /**
+     * Lookup514: pallet_multisig::pallet::Error<T>
+     **/
+    PalletMultisigError: {
+        _enum: ['MinimumThreshold', 'AlreadyApproved', 'NoApprovalsNeeded', 'TooFewSignatories', 'TooManySignatories', 'SignatoriesOutOfOrder', 'SenderInSignatories', 'NotFound', 'NotOwner', 'NoTimepoint', 'WrongTimepoint', 'UnexpectedTimepoint', 'MaxWeightTooLow', 'AlreadyStored']
+    },
+    /**
+     * Lookup515: pallet_council::CouncilStageUpdate<BlockNumber>
      **/
     PalletCouncilCouncilStageUpdate: {
         stage: 'PalletCouncilCouncilStage',
         changedAt: 'u32'
     },
     /**
-     * Lookup492: pallet_council::CouncilStage
+     * Lookup516: pallet_council::CouncilStage<BlockNumber>
      **/
     PalletCouncilCouncilStage: {
         _enum: {
             Announcing: 'PalletCouncilCouncilStageAnnouncing',
             Election: 'PalletCouncilCouncilStageElection',
-            Idle: 'Null'
+            Idle: 'PalletCouncilCouncilStageIdle'
         }
     },
     /**
-     * Lookup493: pallet_council::CouncilStageAnnouncing
+     * Lookup517: pallet_council::CouncilStageAnnouncing<BlockNumber>
      **/
     PalletCouncilCouncilStageAnnouncing: {
-        candidatesCount: 'u64'
+        candidatesCount: 'u64',
+        endsAt: 'u32'
     },
     /**
-     * Lookup494: pallet_council::CouncilStageElection
+     * Lookup518: pallet_council::CouncilStageElection
      **/
     PalletCouncilCouncilStageElection: {
         candidatesCount: 'u64'
     },
     /**
-     * Lookup496: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+     * Lookup519: pallet_council::CouncilStageIdle<BlockNumber>
+     **/
+    PalletCouncilCouncilStageIdle: {
+        endsAt: 'u32'
+    },
+    /**
+     * Lookup521: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
      **/
     PalletCouncilCouncilMember: {
         stakingAccountId: 'AccountId32',
@@ -3760,7 +4033,7 @@ exports.default = {
         unpaidReward: 'u128'
     },
     /**
-     * Lookup497: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+     * Lookup522: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
      **/
     PalletCouncilCandidate: {
         stakingAccountId: 'AccountId32',
@@ -3771,13 +4044,13 @@ exports.default = {
         noteHash: 'Option<H256>'
     },
     /**
-     * Lookup498: pallet_council::Error<T>
+     * Lookup523: pallet_council::Error<T>
      **/
     PalletCouncilError: {
         _enum: ['BadOrigin', 'CantCandidateNow', 'CantReleaseStakeNow', 'CandidacyStakeTooLow', 'CantCandidateTwice', 'ConflictingStake', 'StakeStillNeeded', 'NoStake', 'InsufficientBalanceForStaking', 'CantVoteForYourself', 'MemberIdNotMatchAccount', 'InvalidAccountToStakeReuse', 'NotCandidatingNow', 'CantWithdrawCandidacyNow', 'NotCouncilor', 'InsufficientFundsForFundingRequest', 'ZeroBalanceFundRequest', 'RepeatedFundRequestAccount', 'EmptyFundingRequests', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'CandidateDoesNotExist', 'InsufficientBalanceForTransfer']
     },
     /**
-     * Lookup499: pallet_referendum::ReferendumStage<BlockNumber, MemberId, VotePower>
+     * Lookup524: pallet_referendum::ReferendumStage<BlockNumber, MemberId, VotePower>
      **/
     PalletReferendumReferendumStage: {
         _enum: {
@@ -3787,24 +4060,26 @@ exports.default = {
         }
     },
     /**
-     * Lookup500: pallet_referendum::ReferendumStageVoting<BlockNumber>
+     * Lookup525: pallet_referendum::ReferendumStageVoting<BlockNumber>
      **/
     PalletReferendumReferendumStageVoting: {
         started: 'u32',
         winningTargetCount: 'u64',
-        currentCycleId: 'u64'
+        currentCycleId: 'u64',
+        endsAt: 'u32'
     },
     /**
-     * Lookup501: pallet_referendum::ReferendumStageRevealing<BlockNumber, MemberId, VotePower>
+     * Lookup526: pallet_referendum::ReferendumStageRevealing<BlockNumber, MemberId, VotePower>
      **/
     PalletReferendumReferendumStageRevealing: {
         started: 'u32',
         winningTargetCount: 'u64',
         intermediateWinners: 'Vec<PalletReferendumOptionResult>',
-        currentCycleId: 'u64'
+        currentCycleId: 'u64',
+        endsAt: 'u32'
     },
     /**
-     * Lookup502: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+     * Lookup527: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
      **/
     PalletReferendumCastVote: {
         commitment: 'H256',
@@ -3813,13 +4088,13 @@ exports.default = {
         voteFor: 'Option<u64>'
     },
     /**
-     * Lookup503: pallet_referendum::Error<T, I>
+     * Lookup528: pallet_referendum::Error<T, I>
      **/
     PalletReferendumError: {
         _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden']
     },
     /**
-     * Lookup504: pallet_membership::MembershipObject<sp_core::crypto::AccountId32>
+     * Lookup529: pallet_membership::MembershipObject<sp_core::crypto::AccountId32>
      **/
     PalletMembershipMembershipObject: {
         handleHash: 'Bytes',
@@ -3829,20 +4104,20 @@ exports.default = {
         invites: 'u32'
     },
     /**
-     * Lookup505: pallet_membership::StakingAccountMemberBinding<MemberId>
+     * Lookup530: pallet_membership::StakingAccountMemberBinding<MemberId>
      **/
     PalletMembershipStakingAccountMemberBinding: {
         memberId: 'u64',
         confirmed: 'bool'
     },
     /**
-     * Lookup506: pallet_membership::Error<T>
+     * Lookup531: pallet_membership::Error<T>
      **/
     PalletMembershipError: {
         _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift']
     },
     /**
-     * Lookup507: pallet_forum::Category<CategoryId, ThreadId, primitive_types::H256>
+     * Lookup532: pallet_forum::Category<CategoryId, ThreadId, primitive_types::H256>
      **/
     PalletForumCategory: {
         titleHash: 'H256',
@@ -3855,47 +4130,96 @@ exports.default = {
         stickyThreadIds: 'Vec<u64>'
     },
     /**
-     * Lookup508: pallet_forum::Thread<ForumUserId, CategoryId, Balance>
+     * Lookup533: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumThread: {
         categoryId: 'u64',
         authorId: 'u64',
-        cleanupPayOff: 'u128',
-        numberOfPosts: 'u64'
+        cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
+        numberOfEditablePosts: 'u64'
     },
     /**
-     * Lookup509: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, Balance, BlockNumber>
+     * Lookup534: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletForumPost: {
         threadId: 'u64',
         textHash: 'H256',
         authorId: 'u64',
-        cleanupPayOff: 'u128',
+        cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
         lastEdited: 'u32'
     },
     /**
-     * Lookup510: pallet_forum::Error<T>
+     * Lookup535: pallet_forum::Error<T>
      **/
     PalletForumError: {
-        _enum: ['OriginNotForumLead', 'ForumUserIdNotMatchAccount', 'ModeratorIdNotMatchAccount', 'AccountDoesNotMatchThreadAuthor', 'ThreadDoesNotExist', 'ModeratorModerateOriginCategory', 'ModeratorModerateDestinationCategory', 'ThreadMoveInvalid', 'ThreadNotBeingUpdated', 'InsufficientBalanceForThreadCreation', 'CannotDeleteThreadWithOutstandingPosts', 'PostDoesNotExist', 'AccountDoesNotMatchPostAuthor', 'InsufficientBalanceForPost', 'CategoryNotBeingUpdated', 'AncestorCategoryImmutable', 'MaxValidCategoryDepthExceeded', 'CategoryDoesNotExist', 'CategoryModeratorDoesNotExist', 'CategoryNotEmptyThreads', 'CategoryNotEmptyCategories', 'ModeratorCantDeleteCategory', 'ModeratorCantUpdateCategory', 'StickiedThreadIdsDuplicates', 'DataMigrationNotDone', 'MapSizeLimit', 'PathLengthShouldBeGreaterThanZero']
+        _enum: ['OriginNotForumLead', 'ForumUserIdNotMatchAccount', 'ModeratorIdNotMatchAccount', 'AccountDoesNotMatchThreadAuthor', 'ThreadDoesNotExist', 'ModeratorModerateOriginCategory', 'ModeratorModerateDestinationCategory', 'ThreadMoveInvalid', 'ThreadNotBeingUpdated', 'InsufficientBalanceForThreadCreation', 'CannotDeleteThreadWithOutstandingPosts', 'PostDoesNotExist', 'AccountDoesNotMatchPostAuthor', 'InsufficientBalanceForPost', 'CategoryNotBeingUpdated', 'AncestorCategoryImmutable', 'MaxValidCategoryDepthExceeded', 'CategoryDoesNotExist', 'CategoryModeratorDoesNotExist', 'CategoryNotEmptyThreads', 'CategoryNotEmptyCategories', 'ModeratorCantDeleteCategory', 'ModeratorCantUpdateCategory', 'StickiedThreadIdsDuplicates', 'MapSizeLimit', 'PathLengthShouldBeGreaterThanZero']
     },
     /**
-     * Lookup511: pallet_constitution::ConstitutionInfo
+     * Lookup536: pallet_constitution::ConstitutionInfo
      **/
     PalletConstitutionConstitutionInfo: {
         textHash: 'Bytes'
     },
     /**
-     * Lookup513: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>, MemberId, AuctionId>, DataObjectId, Balance>
+     * Lookup537: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId>
+     **/
+    PalletBountyBountyRecord: {
+        creationParams: 'PalletBountyBountyParameters',
+        totalFunding: 'u128',
+        milestone: 'PalletBountyBountyMilestone',
+        activeWorkEntryCount: 'u32',
+        hasUnpaidOracleReward: 'bool'
+    },
+    /**
+     * Lookup538: pallet_bounty::BountyMilestone<BlockNumber>
+     **/
+    PalletBountyBountyMilestone: {
+        _enum: {
+            Created: {
+                createdAt: 'u32',
+                hasContributions: 'bool',
+            },
+            BountyMaxFundingReached: 'Null',
+            WorkSubmitted: 'Null',
+            Terminated: 'Null',
+            JudgmentSubmitted: {
+                successfulBounty: 'bool'
+            }
+        }
+    },
+    /**
+     * Lookup540: pallet_bounty::Contribution<T>
+     **/
+    PalletBountyContribution: {
+        amount: 'u128',
+        funderStateBloatBondAmount: 'u128'
+    },
+    /**
+     * Lookup541: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+     **/
+    PalletBountyEntryRecord: {
+        memberId: 'u64',
+        stakingAccountId: 'AccountId32',
+        submittedAt: 'u32',
+        workSubmitted: 'bool'
+    },
+    /**
+     * Lookup542: pallet_bounty::Error<T>
+     **/
+    PalletBountyError: {
+        _enum: ['MinFundingAmountCannotBeGreaterThanMaxAmount', 'BountyDoesntExist', 'SwitchOracleOriginIsRoot', 'InvalidStageUnexpectedFunding', 'InvalidStageUnexpectedNoFundingContributed', 'InvalidStageUnexpectedCancelled', 'InvalidStageUnexpectedWorkSubmission', 'InvalidStageUnexpectedJudgment', 'InvalidStageUnexpectedSuccessfulBountyWithdrawal', 'InvalidStageUnexpectedFailedBountyWithdrawal', 'InsufficientBalanceForBounty', 'NoBountyContributionFound', 'InsufficientBalanceForStake', 'ConflictingStakes', 'WorkEntryDoesntExist', 'CherryLessThenMinimumAllowed', 'CannotSubmitWorkToClosedContractBounty', 'ClosedContractMemberListIsEmpty', 'ClosedContractMemberListIsTooLarge', 'ClosedContractMemberNotFound', 'InvalidOracleMemberId', 'InvalidStakingAccountForMember', 'ZeroWinnerReward', 'TotalRewardShouldBeEqualToTotalFunding', 'EntrantStakeIsLessThanMininum', 'FundingAmountCannotBeZero', 'FundingPeriodCannotBeZero', 'WinnerShouldHasWorkSubmission', 'InvalidContributorActorSpecified', 'InvalidOracleActorSpecified', 'InvalidEntrantWorkerSpecified', 'InvalidCreatorActorSpecified', 'WorkEntryDoesntBelongToWorker', 'OracleRewardAlreadyWithdrawn']
+    },
+    /**
+     * Lookup544: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletContentVideoRecord: {
         inChannel: 'u64',
         nftStatus: 'Option<PalletContentNftTypesOwnedNft>',
         dataObjects: 'BTreeSet<u64>',
-        videoStateBloatBond: 'u128'
+        videoStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
     },
     /**
-     * Lookup514: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>, MemberId, AuctionId>
+     * Lookup545: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>, MemberId, AuctionId>
      **/
     PalletContentNftTypesOwnedNft: {
         owner: 'PalletContentNftTypesNftOwner',
@@ -3904,7 +4228,7 @@ exports.default = {
         openAuctionsNonce: 'u64'
     },
     /**
-     * Lookup515: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>
+     * Lookup546: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>
      **/
     PalletContentNftTypesTransactionalStatusRecord: {
         _enum: {
@@ -3916,7 +4240,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup516: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>
+     * Lookup547: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionRecord: {
         startingPrice: 'u128',
@@ -3929,14 +4253,14 @@ exports.default = {
         topBid: 'Option<PalletContentNftTypesEnglishAuctionBid>'
     },
     /**
-     * Lookup518: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+     * Lookup549: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
      **/
     PalletContentNftTypesEnglishAuctionBid: {
         amount: 'u128',
         bidderId: 'u64'
     },
     /**
-     * Lookup519: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>
+     * Lookup550: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>
      **/
     PalletContentNftTypesOpenAuctionRecord: {
         startingPrice: 'u128',
@@ -3947,7 +4271,7 @@ exports.default = {
         start: 'u32'
     },
     /**
-     * Lookup520: pallet_content::nft::types::NftOwner<MemberId>
+     * Lookup551: pallet_content::nft::types::NftOwner<MemberId>
      **/
     PalletContentNftTypesNftOwner: {
         _enum: {
@@ -3956,7 +4280,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup522: pallet_content::permissions::curator_group::CuratorGroup<T>
+     * Lookup554: pallet_content::permissions::curator_group::CuratorGroup<T>
      **/
     PalletContentPermissionsCuratorGroup: {
         curators: 'BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>',
@@ -3964,7 +4288,7 @@ exports.default = {
         permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupContentModerationAction>>'
     },
     /**
-     * Lookup523: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+     * Lookup555: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
      **/
     PalletContentNftTypesOpenAuctionBidRecord: {
         amount: 'u128',
@@ -3972,13 +4296,13 @@ exports.default = {
         auctionId: 'u64'
     },
     /**
-     * Lookup524: pallet_content::errors::Error<T>
+     * Lookup556: pallet_content::errors::Error<T>
      **/
     PalletContentErrorsError: {
-        _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowIsLessThenStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawFromChannelAmountExceedsBalanceMinusExistentialDeposit', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales']
+        _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales']
     },
     /**
-     * Lookup525: pallet_storage::BagRecord<StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+     * Lookup557: pallet_storage::BagRecord<StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
      **/
     PalletStorageBagRecord: {
         storedBy: 'BTreeSet<u64>',
@@ -3987,7 +4311,7 @@ exports.default = {
         objectsNumber: 'u64'
     },
     /**
-     * Lookup526: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup558: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketRecord: {
         operatorStatus: 'PalletStorageStorageBucketOperatorStatus',
@@ -3996,7 +4320,7 @@ exports.default = {
         assignedBags: 'u64'
     },
     /**
-     * Lookup527: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+     * Lookup559: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
      **/
     PalletStorageStorageBucketOperatorStatus: {
         _enum: {
@@ -4006,32 +4330,32 @@ exports.default = {
         }
     },
     /**
-     * Lookup528: pallet_storage::DynamicBagCreationPolicy<DistributionBucketFamilyId>
+     * Lookup560: pallet_storage::DynamicBagCreationPolicy<DistributionBucketFamilyId>
      **/
     PalletStorageDynamicBagCreationPolicy: {
         numberOfStorageBuckets: 'u64',
         families: 'BTreeMap<u64, u32>'
     },
     /**
-     * Lookup530: pallet_storage::DataObject<Balance>
+     * Lookup562: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletStorageDataObject: {
         _alias: {
             size_: 'size'
         },
         accepted: 'bool',
-        stateBloatBond: 'u128',
+        stateBloatBond: 'PalletCommonBloatBondRepayableBloatBond',
         size_: 'u64',
         ipfsContentId: 'Bytes'
     },
     /**
-     * Lookup531: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+     * Lookup563: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
      **/
     PalletStorageDistributionBucketFamilyRecord: {
         nextDistributionBucketIndex: 'u64'
     },
     /**
-     * Lookup532: pallet_storage::DistributionBucketRecord<WorkerId>
+     * Lookup564: pallet_storage::DistributionBucketRecord<WorkerId>
      **/
     PalletStorageDistributionBucketRecord: {
         acceptingNewBags: 'bool',
@@ -4041,31 +4365,31 @@ exports.default = {
         assignedBags: 'u64'
     },
     /**
-     * Lookup533: pallet_common::constraints::BoundedValueConstraint<Val>
+     * Lookup565: pallet_common::constraints::BoundedValueConstraint<Val>
      **/
     PalletCommonConstraintsBoundedValueConstraint: {
         min: 'u64',
         maxMinDiff: 'u64'
     },
     /**
-     * Lookup534: pallet_storage::Error<T>
+     * Lookup566: pallet_storage::Error<T>
      **/
     PalletStorageError: {
-        _enum: ['ArithmeticError', 'InvalidCidLength', 'NoObjectsOnUpload', 'StorageBucketDoesntExist', 'StorageBucketIsNotBoundToBag', 'StorageBucketIsBoundToBag', 'NoStorageBucketInvitation', 'StorageProviderAlreadySet', 'StorageProviderMustBeSet', 'DifferentStorageProviderInvited', 'InvitedStorageProvider', 'StorageBucketIdCollectionsAreEmpty', 'StorageBucketsNumberViolatesDynamicBagCreationPolicy', 'DistributionBucketsViolatesDynamicBagCreationPolicy', 'EmptyContentId', 'ZeroObjectSize', 'InvalidStateBloatBondSourceAccount', 'InvalidStorageProvider', 'InsufficientBalance', 'DataObjectDoesntExist', 'UploadingBlocked', 'DataObjectIdCollectionIsEmpty', 'SourceAndDestinationBagsAreEqual', 'DataObjectBlacklisted', 'BlacklistSizeLimitExceeded', 'VoucherMaxObjectSizeLimitExceeded', 'VoucherMaxObjectNumberLimitExceeded', 'StorageBucketObjectNumberLimitReached', 'StorageBucketObjectSizeLimitReached', 'InsufficientTreasuryBalance', 'CannotDeleteNonEmptyStorageBucket', 'DataObjectIdParamsAreEmpty', 'StorageBucketsPerBagLimitTooLow', 'StorageBucketsPerBagLimitTooHigh', 'StorageBucketPerBagLimitExceeded', 'StorageBucketDoesntAcceptNewBags', 'DynamicBagExists', 'DynamicBagDoesntExist', 'StorageProviderOperatorDoesntExist', 'DataSizeFeeChanged', 'DataObjectStateBloatBondChanged', 'CannotDeleteNonEmptyDynamicBag', 'MaxDistributionBucketFamilyNumberLimitExceeded', 'DistributionBucketFamilyDoesntExist', 'DistributionBucketDoesntExist', 'DistributionBucketIdCollectionsAreEmpty', 'DistributionBucketDoesntAcceptNewBags', 'MaxDistributionBucketNumberPerBagLimitExceeded', 'DistributionBucketIsNotBoundToBag', 'DistributionBucketIsBoundToBag', 'DistributionBucketsPerBagLimitTooLow', 'DistributionBucketsPerBagLimitTooHigh', 'DistributionProviderOperatorDoesntExist', 'DistributionProviderOperatorAlreadyInvited', 'DistributionProviderOperatorSet', 'NoDistributionBucketInvitation', 'MustBeDistributionProviderOperatorForBucket', 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached', 'DistributionFamilyBoundToBagCreationPolicy', 'MaxDataObjectSizeExceeded', 'InvalidTransactorAccount', 'NumberOfStorageBucketsOutsideOfAllowedContraints', 'NumberOfDistributionBucketsOutsideOfAllowedContraints']
+        _enum: ['ArithmeticError', 'InvalidCidLength', 'NoObjectsOnUpload', 'StorageBucketDoesntExist', 'StorageBucketIsNotBoundToBag', 'StorageBucketIsBoundToBag', 'NoStorageBucketInvitation', 'StorageProviderAlreadySet', 'StorageProviderMustBeSet', 'DifferentStorageProviderInvited', 'InvitedStorageProvider', 'StorageBucketIdCollectionsAreEmpty', 'StorageBucketsNumberViolatesDynamicBagCreationPolicy', 'DistributionBucketsViolatesDynamicBagCreationPolicy', 'EmptyContentId', 'ZeroObjectSize', 'InvalidStateBloatBondSourceAccount', 'InvalidStorageProvider', 'InsufficientBalance', 'DataObjectDoesntExist', 'UploadingBlocked', 'DataObjectIdCollectionIsEmpty', 'SourceAndDestinationBagsAreEqual', 'DataObjectBlacklisted', 'BlacklistSizeLimitExceeded', 'VoucherMaxObjectSizeLimitExceeded', 'VoucherMaxObjectNumberLimitExceeded', 'StorageBucketObjectNumberLimitReached', 'StorageBucketObjectSizeLimitReached', 'InsufficientTreasuryBalance', 'CannotDeleteNonEmptyStorageBucket', 'DataObjectIdParamsAreEmpty', 'StorageBucketsPerBagLimitTooLow', 'StorageBucketsPerBagLimitTooHigh', 'StorageBucketPerBagLimitExceeded', 'StorageBucketDoesntAcceptNewBags', 'DynamicBagExists', 'DynamicBagDoesntExist', 'StorageProviderOperatorDoesntExist', 'DataSizeFeeChanged', 'DataObjectStateBloatBondChanged', 'CannotDeleteNonEmptyDynamicBag', 'MaxDistributionBucketFamilyNumberLimitExceeded', 'DistributionBucketFamilyDoesntExist', 'DistributionBucketDoesntExist', 'DistributionBucketIdCollectionsAreEmpty', 'DistributionBucketDoesntAcceptNewBags', 'MaxDistributionBucketNumberPerBagLimitExceeded', 'DistributionBucketIsNotBoundToBag', 'DistributionBucketIsBoundToBag', 'DistributionBucketsPerBagLimitTooLow', 'DistributionBucketsPerBagLimitTooHigh', 'DistributionProviderOperatorDoesntExist', 'DistributionProviderOperatorAlreadyInvited', 'DistributionProviderOperatorSet', 'NoDistributionBucketInvitation', 'MustBeDistributionProviderOperatorForBucket', 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached', 'DistributionFamilyBoundToBagCreationPolicy', 'MaxDataObjectSizeExceeded', 'InvalidTransactorAccount', 'NumberOfStorageBucketsOutsideOfAllowedContraints', 'NumberOfDistributionBucketsOutsideOfAllowedContraints', 'CallDisabled']
     },
     /**
-     * Lookup535: pallet_project_token::types::AccountData<pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, Balance, pallet_project_token::types::StakingStatus<Balance>, JoyBalance>
+     * Lookup567: pallet_project_token::types::AccountData<pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletProjectTokenAccountData: {
         vestingSchedules: 'BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>',
         amount: 'u128',
         splitStakingStatus: 'Option<PalletProjectTokenStakingStatus>',
-        bloatBond: 'u128',
+        bloatBond: 'PalletCommonBloatBondRepayableBloatBond',
         nextVestingTransferId: 'u64',
         lastSaleTotalPurchasedAmount: 'Option<(u32,u128)>'
     },
     /**
-     * Lookup536: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+     * Lookup568: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
      **/
     PalletProjectTokenVestingSchedule: {
         linearVestingStartBlock: 'u32',
@@ -4075,14 +4399,14 @@ exports.default = {
         burnedAmount: 'u128'
     },
     /**
-     * Lookup537: pallet_project_token::types::StakingStatus<Balance>
+     * Lookup569: pallet_project_token::types::StakingStatus<Balance>
      **/
     PalletProjectTokenStakingStatus: {
         splitId: 'u32',
         amount: 'u128'
     },
     /**
-     * Lookup544: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+     * Lookup576: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
      **/
     PalletProjectTokenTokenData: {
         totalSupply: 'u128',
@@ -4098,7 +4422,7 @@ exports.default = {
         nextRevenueSplitId: 'u32'
     },
     /**
-     * Lookup545: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+     * Lookup577: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitState: {
         _enum: {
@@ -4107,7 +4431,7 @@ exports.default = {
         }
     },
     /**
-     * Lookup546: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+     * Lookup578: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
      **/
     PalletProjectTokenRevenueSplitInfo: {
         allocation: 'u128',
@@ -4115,14 +4439,14 @@ exports.default = {
         dividendsClaimed: 'u128'
     },
     /**
-     * Lookup547: pallet_project_token::types::Timeline<BlockNumber>
+     * Lookup579: pallet_project_token::types::Timeline<BlockNumber>
      **/
     PalletProjectTokenTimeline: {
         start: 'u32',
         duration: 'u32'
     },
     /**
-     * Lookup549: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+     * Lookup581: pallet_project_token::types::PatronageData<Balance, BlockNumber>
      **/
     PalletProjectTokenPatronageData: {
         rate: 'Perquintill',
@@ -4130,13 +4454,13 @@ exports.default = {
         lastUnclaimedPatronageTallyBlock: 'u32'
     },
     /**
-     * Lookup551: pallet_project_token::errors::Error<T>
+     * Lookup583: pallet_project_token::errors::Error<T>
      **/
     PalletProjectTokenErrorsError: {
-        _enum: ['InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'MerkleProofVerificationFailure', 'TargetPatronageRateIsHigherThanCurrentRate', 'TokenSymbolAlreadyInUse', 'AccountAlreadyExists', 'TransferDestinationMemberDoesNotExist', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount']
+        _enum: ['InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'MerkleProofVerificationFailure', 'TargetPatronageRateIsHigherThanCurrentRate', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TransferDestinationMemberDoesNotExist', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount']
     },
     /**
-     * Lookup552: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+     * Lookup584: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
      **/
     PalletProposalsEngineProposal: {
         parameters: 'PalletProposalsEngineProposalParameters',
@@ -4149,7 +4473,7 @@ exports.default = {
         stakingAccountId: 'Option<AccountId32>'
     },
     /**
-     * Lookup553: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+     * Lookup585: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
      **/
     PalletProposalsEngineProposalParameters: {
         votingPeriod: 'u32',
@@ -4162,7 +4486,7 @@ exports.default = {
         constitutionality: 'u32'
     },
     /**
-     * Lookup554: pallet_proposals_engine::types::VotingResults
+     * Lookup586: pallet_proposals_engine::types::VotingResults
      **/
     PalletProposalsEngineVotingResults: {
         abstentions: 'u32',
@@ -4171,13 +4495,13 @@ exports.default = {
         slashes: 'u32'
     },
     /**
-     * Lookup556: pallet_proposals_engine::Error<T>
+     * Lookup588: pallet_proposals_engine::Error<T>
      **/
     PalletProposalsEngineError: {
         _enum: ['EmptyTitleProvided', 'EmptyDescriptionProvided', 'TitleIsTooLong', 'DescriptionIsTooLong', 'ProposalNotFound', 'ProposalFinalized', 'AlreadyVoted', 'NotAuthor', 'MaxActiveProposalNumberExceeded', 'EmptyStake', 'StakeShouldBeEmpty', 'StakeDiffersFromRequired', 'InvalidParameterApprovalThreshold', 'InvalidParameterSlashingThreshold', 'RequireRootOrigin', 'ProposalHasVotes', 'ZeroExactExecutionBlock', 'InvalidExactExecutionBlock', 'InsufficientBalanceForStake', 'ConflictingStakes', 'InvalidStakingAccountForMember']
     },
     /**
-     * Lookup557: pallet_proposals_discussion::types::DiscussionThread<ThreadAuthorId, BlockNumber, MemberId>
+     * Lookup589: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber>
      **/
     PalletProposalsDiscussionDiscussionThread: {
         activatedAt: 'u32',
@@ -4185,27 +4509,27 @@ exports.default = {
         mode: 'PalletProposalsDiscussionThreadMode'
     },
     /**
-     * Lookup558: pallet_proposals_discussion::types::DiscussionPost<PostAuthorId, Balance, BlockNumber>
+     * Lookup590: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
      **/
     PalletProposalsDiscussionDiscussionPost: {
         authorId: 'u64',
-        cleanupPayOff: 'u128',
+        cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
         lastEdited: 'u32'
     },
     /**
-     * Lookup559: pallet_proposals_discussion::Error<T>
+     * Lookup591: pallet_proposals_discussion::Error<T>
      **/
     PalletProposalsDiscussionError: {
-        _enum: ['ThreadDoesntExist', 'PostDoesntExist', 'RequireRootOrigin', 'CannotPostOnClosedThread', 'NotAuthorOrCouncilor', 'MaxWhiteListSizeExceeded', 'InsufficientBalanceForPost', 'CannotDeletePost']
+        _enum: ['ThreadDoesntExist', 'PostDoesntExist', 'RequireRootOrigin', 'CannotPostOnClosedThread', 'NotAuthorOrCouncilor', 'MaxWhiteListSizeExceeded', 'WhitelistedMemberDoesNotExist', 'InsufficientBalanceForPost', 'CannotDeletePost']
     },
     /**
-     * Lookup560: pallet_proposals_codex::Error<T>
+     * Lookup592: pallet_proposals_codex::Error<T>
      **/
     PalletProposalsCodexError: {
-        _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout']
+        _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout', 'InvalidLeadWorkerId', 'InvalidLeadOpeningId', 'InvalidLeadApplicationId', 'InvalidProposalId']
     },
     /**
-     * Lookup561: pallet_working_group::types::Opening<BlockNumber, Balance>
+     * Lookup593: pallet_working_group::types::Opening<BlockNumber, Balance>
      **/
     PalletWorkingGroupOpening: {
         openingType: 'PalletWorkingGroupOpeningType',
@@ -4216,7 +4540,7 @@ exports.default = {
         creationStake: 'u128'
     },
     /**
-     * Lookup562: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId>
+     * Lookup594: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId>
      **/
     PalletWorkingGroupJobApplication: {
         roleAccountId: 'AccountId32',
@@ -4227,7 +4551,7 @@ exports.default = {
         openingId: 'u64'
     },
     /**
-     * Lookup563: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+     * Lookup595: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
      **/
     PalletWorkingGroupGroupWorker: {
         memberId: 'u64',
@@ -4241,13 +4565,13 @@ exports.default = {
         createdAt: 'u32'
     },
     /**
-     * Lookup564: pallet_working_group::errors::Error<T, I>
+     * Lookup596: pallet_working_group::errors::Error<T, I>
      **/
     PalletWorkingGroupErrorsError: {
         _enum: ['StakeBalanceCannotBeZero', 'OpeningDoesNotExist', 'CannotHireMultipleLeaders', 'WorkerApplicationDoesNotExist', 'MaxActiveWorkerNumberExceeded', 'SuccessfulWorkerApplicationDoesNotExist', 'CannotHireLeaderWhenLeaderExists', 'IsNotLeadAccount', 'CurrentLeadNotSet', 'WorkerDoesNotExist', 'InvalidMemberOrigin', 'SignerIsNotWorkerRoleAccount', 'BelowMinimumStakes', 'InsufficientBalanceToCoverStake', 'ApplicationStakeDoesntMatchOpening', 'OriginIsNotApplicant', 'WorkerIsLeaving', 'CannotRewardWithZero', 'InvalidStakingAccountForMember', 'ConflictStakesOnAccount', 'WorkerHasNoReward', 'UnstakingPeriodLessThanMinimum', 'CannotSpendZero', 'InsufficientBudgetForSpending', 'NoApplicationsProvided', 'CannotDecreaseStakeDeltaGreaterThanStake', 'ApplicationsNotForOpening', 'WorkerStorageValueTooLong', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'InsufficientBalanceForTransfer']
     },
     /**
-     * Lookup574: sp_runtime::MultiSignature
+     * Lookup606: sp_runtime::MultiSignature
      **/
     SpRuntimeMultiSignature: {
         _enum: {
@@ -4257,39 +4581,39 @@ exports.default = {
         }
     },
     /**
-     * Lookup575: sp_core::ecdsa::Signature
+     * Lookup607: sp_core::ecdsa::Signature
      **/
     SpCoreEcdsaSignature: '[u8;65]',
     /**
-     * Lookup578: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+     * Lookup610: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
      **/
     FrameSystemExtensionsCheckNonZeroSender: 'Null',
     /**
-     * Lookup579: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+     * Lookup611: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
      **/
     FrameSystemExtensionsCheckSpecVersion: 'Null',
     /**
-     * Lookup580: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+     * Lookup612: frame_system::extensions::check_tx_version::CheckTxVersion<T>
      **/
     FrameSystemExtensionsCheckTxVersion: 'Null',
     /**
-     * Lookup581: frame_system::extensions::check_genesis::CheckGenesis<T>
+     * Lookup613: frame_system::extensions::check_genesis::CheckGenesis<T>
      **/
     FrameSystemExtensionsCheckGenesis: 'Null',
     /**
-     * Lookup584: frame_system::extensions::check_nonce::CheckNonce<T>
+     * Lookup616: frame_system::extensions::check_nonce::CheckNonce<T>
      **/
     FrameSystemExtensionsCheckNonce: 'Compact<u32>',
     /**
-     * Lookup585: frame_system::extensions::check_weight::CheckWeight<T>
+     * Lookup617: frame_system::extensions::check_weight::CheckWeight<T>
      **/
     FrameSystemExtensionsCheckWeight: 'Null',
     /**
-     * Lookup586: pallet_transaction_payment::ChargeTransactionPayment<T>
+     * Lookup618: pallet_transaction_payment::ChargeTransactionPayment<T>
      **/
     PalletTransactionPaymentChargeTransactionPayment: 'Compact<u128>',
     /**
-     * Lookup587: joystream_node_runtime::Runtime
+     * Lookup619: joystream_node_runtime::Runtime
      **/
     JoystreamNodeRuntimeRuntime: 'Null'
 };
diff --git a/augment/registry.d.ts b/augment/registry.d.ts
index fd9aa53c545127a3e43c5224e7a78d992595b9ed..7fa640340e83bbdc83ed794bb8fe612beea2a501 100644
--- a/augment/registry.d.ts
+++ b/augment/registry.d.ts
@@ -1,4 +1,4 @@
-import type { FinalityGrandpaEquivocationPrecommit, FinalityGrandpaEquivocationPrevote, FinalityGrandpaPrecommit, FinalityGrandpaPrevote, FrameSupportDispatchRawOrigin, FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchClass, FrameSupportWeightsDispatchInfo, FrameSupportWeightsPays, FrameSupportWeightsPerDispatchClassU32, FrameSupportWeightsPerDispatchClassU64, FrameSupportWeightsPerDispatchClassWeightsPerClass, FrameSupportWeightsRuntimeDbWeight, FrameSystemAccountInfo, FrameSystemCall, FrameSystemError, FrameSystemEvent, FrameSystemEventRecord, FrameSystemExtensionsCheckGenesis, FrameSystemExtensionsCheckNonZeroSender, FrameSystemExtensionsCheckNonce, FrameSystemExtensionsCheckSpecVersion, FrameSystemExtensionsCheckTxVersion, FrameSystemExtensionsCheckWeight, FrameSystemLastRuntimeUpgradeInfo, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, FrameSystemLimitsWeightsPerClass, FrameSystemPhase, JoystreamNodeRuntimeNposSolution16, JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeRuntime, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipCall, PalletAuthorshipError, PalletAuthorshipUncleEntryItem, PalletBabeCall, PalletBabeError, PalletBagsListCall, PalletBagsListError, PalletBagsListEvent, PalletBagsListListBag, PalletBagsListListListError, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesCall, PalletBalancesError, PalletBalancesEvent, PalletBalancesReasons, PalletBalancesReleases, PalletBalancesReserveData, PalletCommonBalanceKind, PalletCommonConstraintsBoundedValueConstraint, PalletCommonFundingRequestParameters, PalletCommonWorkingGroup, PalletConstitutionCall, PalletConstitutionConstitutionInfo, PalletConstitutionEvent, PalletContentCall, PalletContentChannelActionPermission, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelOwner, PalletContentChannelPayoutsPayloadParametersRecord, PalletContentChannelRecord, PalletContentChannelTransferStatus, PalletContentChannelUpdateParametersRecord, PalletContentErrorsError, PalletContentInitTransferParameters, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionBid, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesEnglishAuctionRecord, PalletContentNftTypesInitTransactionalStatusRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesNftOwner, PalletContentNftTypesOpenAuctionBidRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentNftTypesOpenAuctionRecord, PalletContentNftTypesOwnedNft, PalletContentNftTypesTransactionalStatusRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroup, PalletContentPermissionsCuratorGroupContentModerationAction, PalletContentPermissionsCuratorGroupPausableChannelFeature, PalletContentProofElementRecord, PalletContentPullPaymentElement, PalletContentRawEvent, PalletContentSide, PalletContentStorageAssetsRecord, PalletContentTransferCommitmentParameters, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoRecord, PalletContentVideoUpdateParametersRecord, PalletCouncilCall, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStage, PalletCouncilCouncilStageAnnouncing, PalletCouncilCouncilStageElection, PalletCouncilCouncilStageUpdate, PalletCouncilError, PalletCouncilRawEvent, PalletElectionProviderMultiPhaseCall, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhaseError, PalletElectionProviderMultiPhaseEvent, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCall, PalletForumCategory, PalletForumError, PalletForumExtendedPostIdObject, PalletForumPost, PalletForumPrivilegedActor, PalletForumRawEvent, PalletForumThread, PalletGrandpaCall, PalletGrandpaError, PalletGrandpaEvent, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineCall, PalletImOnlineError, PalletImOnlineEvent, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Public, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCall, PalletMembershipCreateFoundingMemberParameters, PalletMembershipError, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMembershipMembershipObject, PalletMembershipRawEvent, PalletMembershipStakingAccountMemberBinding, PalletOffencesEvent, PalletProjectTokenAccountData, PalletProjectTokenCall, PalletProjectTokenErrorsError, PalletProjectTokenEventsRawEvent, PalletProjectTokenMerkleProof, PalletProjectTokenMerkleSide, PalletProjectTokenPatronageData, PalletProjectTokenPayment, PalletProjectTokenPaymentWithVesting, PalletProjectTokenRevenueSplitInfo, PalletProjectTokenRevenueSplitState, PalletProjectTokenSingleDataObjectUploadParams, PalletProjectTokenStakingStatus, PalletProjectTokenTimeline, PalletProjectTokenTokenAllocation, PalletProjectTokenTokenData, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransferPolicy, PalletProjectTokenTransferPolicyParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProjectTokenVestingSchedule, PalletProjectTokenVestingScheduleParams, PalletProjectTokenVestingSource, PalletProjectTokenWhitelistParams, PalletProposalsCodexCall, PalletProposalsCodexCreateOpeningParameters, PalletProposalsCodexError, PalletProposalsCodexFillOpeningParameters, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsCodexRawEvent, PalletProposalsCodexTerminateRoleParameters, PalletProposalsDiscussionCall, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsDiscussionError, PalletProposalsDiscussionRawEvent, PalletProposalsDiscussionThreadMode, PalletProposalsEngineCall, PalletProposalsEngineError, PalletProposalsEngineProposal, PalletProposalsEngineProposalParameters, PalletProposalsEngineProposalStatusesApprovedProposalDecision, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineRawEvent, PalletProposalsEngineVoteKind, PalletProposalsEngineVotingResults, PalletReferendumCall, PalletReferendumCastVote, PalletReferendumError, PalletReferendumInstance1, PalletReferendumOptionResult, PalletReferendumRawEvent, PalletReferendumReferendumStage, PalletReferendumReferendumStageRevealing, PalletReferendumReferendumStageVoting, PalletSessionCall, PalletSessionError, PalletSessionEvent, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingIndividualExposure, PalletStakingNominations, PalletStakingPalletCall, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletError, PalletStakingPalletEvent, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingUnlockChunk, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageCall, PalletStorageDataObject, PalletStorageDataObjectCreationParameters, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketIdRecord, PalletStorageDistributionBucketRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageError, PalletStorageRawEvent, PalletStorageStaticBagId, PalletStorageStorageBucketOperatorStatus, PalletStorageStorageBucketRecord, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletSudoCall, PalletSudoError, PalletSudoEvent, PalletTimestampCall, PalletTransactionPaymentChargeTransactionPayment, PalletTransactionPaymentReleases, PalletUtilityCall, PalletUtilityError, PalletUtilityEvent, PalletUtilityRawEvent, PalletVestingCall, PalletVestingError, PalletVestingEvent, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupCall, PalletWorkingGroupErrorsError, PalletWorkingGroupGroupWorker, PalletWorkingGroupInstance1, PalletWorkingGroupInstance2, PalletWorkingGroupInstance3, PalletWorkingGroupInstance4, PalletWorkingGroupInstance5, PalletWorkingGroupInstance6, PalletWorkingGroupInstance7, PalletWorkingGroupInstance8, PalletWorkingGroupInstance9, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, PalletWorkingGroupOpeningType, PalletWorkingGroupRawEventInstance1, PalletWorkingGroupRawEventInstance2, PalletWorkingGroupRawEventInstance3, PalletWorkingGroupRawEventInstance4, PalletWorkingGroupRawEventInstance5, PalletWorkingGroupRawEventInstance6, PalletWorkingGroupRawEventInstance7, PalletWorkingGroupRawEventInstance8, PalletWorkingGroupRawEventInstance9, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakeParameters, PalletWorkingGroupStakePolicy, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAllowedSlots, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpConsensusBabeDigestsPrimaryPreDigest, SpConsensusBabeDigestsSecondaryPlainPreDigest, SpConsensusBabeDigestsSecondaryVRFPreDigest, SpConsensusSlotsEquivocationProof, SpCoreCryptoKeyTypeId, SpCoreEcdsaSignature, SpCoreEd25519Public, SpCoreEd25519Signature, SpCoreOffchainOpaqueNetworkState, SpCoreSr25519Public, SpCoreSr25519Signature, SpCoreVoid, SpFinalityGrandpaAppPublic, SpFinalityGrandpaAppSignature, SpFinalityGrandpaEquivocation, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeArithmeticError, SpRuntimeBlakeTwo256, SpRuntimeDigest, SpRuntimeDigestDigestItem, SpRuntimeDispatchError, SpRuntimeHeader, SpRuntimeModuleError, SpRuntimeMultiSignature, SpRuntimeTokenError, SpRuntimeTransactionalError, SpSessionMembershipProof, SpStakingOffenceOffenceDetails, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
+import type { FinalityGrandpaEquivocationPrecommit, FinalityGrandpaEquivocationPrevote, FinalityGrandpaPrecommit, FinalityGrandpaPrevote, FrameSupportDispatchRawOrigin, FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchClass, FrameSupportWeightsDispatchInfo, FrameSupportWeightsPays, FrameSupportWeightsPerDispatchClassU32, FrameSupportWeightsPerDispatchClassU64, FrameSupportWeightsPerDispatchClassWeightsPerClass, FrameSupportWeightsRuntimeDbWeight, FrameSystemAccountInfo, FrameSystemCall, FrameSystemError, FrameSystemEvent, FrameSystemEventRecord, FrameSystemExtensionsCheckGenesis, FrameSystemExtensionsCheckNonZeroSender, FrameSystemExtensionsCheckNonce, FrameSystemExtensionsCheckSpecVersion, FrameSystemExtensionsCheckTxVersion, FrameSystemExtensionsCheckWeight, FrameSystemLastRuntimeUpgradeInfo, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, FrameSystemLimitsWeightsPerClass, FrameSystemPhase, JoystreamNodeRuntimeNposSolution16, JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeRuntime, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipCall, PalletAuthorshipError, PalletAuthorshipUncleEntryItem, PalletBabeCall, PalletBabeError, PalletBagsListCall, PalletBagsListError, PalletBagsListEvent, PalletBagsListListBag, PalletBagsListListListError, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesCall, PalletBalancesError, PalletBalancesEvent, PalletBalancesReasons, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyAssuranceContractType, PalletBountyBountyActor, PalletBountyBountyMilestone, PalletBountyBountyParameters, PalletBountyBountyRecord, PalletBountyCall, PalletBountyContribution, PalletBountyEntryRecord, PalletBountyError, PalletBountyFundingType, PalletBountyOracleWorkEntryJudgment, PalletBountyRawEvent, PalletCommonBalanceKind, PalletCommonBloatBondRepayableBloatBond, PalletCommonConstraintsBoundedValueConstraint, PalletCommonFundingRequestParameters, PalletCommonProofElementRecord, PalletCommonSide, PalletCommonWorkingGroup, PalletConstitutionCall, PalletConstitutionConstitutionInfo, PalletConstitutionEvent, PalletContentCall, PalletContentChannelActionPermission, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelOwner, PalletContentChannelPayoutsPayloadParametersRecord, PalletContentChannelRecord, PalletContentChannelTransferStatus, PalletContentChannelUpdateParametersRecord, PalletContentErrorsError, PalletContentInitTransferParameters, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionBid, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesEnglishAuctionRecord, PalletContentNftTypesInitTransactionalStatusRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesNftOwner, PalletContentNftTypesOpenAuctionBidRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentNftTypesOpenAuctionRecord, PalletContentNftTypesOwnedNft, PalletContentNftTypesTransactionalStatusRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroup, PalletContentPermissionsCuratorGroupContentModerationAction, PalletContentPermissionsCuratorGroupPausableChannelFeature, PalletContentPullPaymentElement, PalletContentRawEvent, PalletContentStorageAssetsRecord, PalletContentTransferCommitmentParametersBTreeMap, PalletContentTransferCommitmentParametersBoundedBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoRecord, PalletContentVideoUpdateParametersRecord, PalletCouncilCall, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStage, PalletCouncilCouncilStageAnnouncing, PalletCouncilCouncilStageElection, PalletCouncilCouncilStageIdle, PalletCouncilCouncilStageUpdate, PalletCouncilError, PalletCouncilRawEvent, PalletElectionProviderMultiPhaseCall, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhaseError, PalletElectionProviderMultiPhaseEvent, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCall, PalletForumCategory, PalletForumError, PalletForumExtendedPostIdObject, PalletForumPost, PalletForumPrivilegedActor, PalletForumRawEvent, PalletForumThread, PalletGrandpaCall, PalletGrandpaError, PalletGrandpaEvent, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineCall, PalletImOnlineError, PalletImOnlineEvent, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Public, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCall, PalletMembershipCreateFoundingMemberParameters, PalletMembershipError, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMembershipMembershipObject, PalletMembershipRawEvent, PalletMembershipStakingAccountMemberBinding, PalletMultisigCall, PalletMultisigError, PalletMultisigEvent, PalletMultisigMultisig, PalletMultisigTimepoint, PalletOffencesEvent, PalletProjectTokenAccountData, PalletProjectTokenCall, PalletProjectTokenErrorsError, PalletProjectTokenEventsRawEvent, PalletProjectTokenMerkleProof, PalletProjectTokenMerkleSide, PalletProjectTokenPatronageData, PalletProjectTokenPayment, PalletProjectTokenPaymentWithVesting, PalletProjectTokenRevenueSplitInfo, PalletProjectTokenRevenueSplitState, PalletProjectTokenSingleDataObjectUploadParams, PalletProjectTokenStakingStatus, PalletProjectTokenTimeline, PalletProjectTokenTokenAllocation, PalletProjectTokenTokenData, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransferPolicy, PalletProjectTokenTransferPolicyParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProjectTokenVestingSchedule, PalletProjectTokenVestingScheduleParams, PalletProjectTokenVestingSource, PalletProjectTokenWhitelistParams, PalletProposalsCodexCall, PalletProposalsCodexCreateOpeningParameters, PalletProposalsCodexError, PalletProposalsCodexFillOpeningParameters, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsCodexRawEvent, PalletProposalsCodexTerminateRoleParameters, PalletProposalsDiscussionCall, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsDiscussionError, PalletProposalsDiscussionRawEvent, PalletProposalsDiscussionThreadMode, PalletProposalsEngineCall, PalletProposalsEngineError, PalletProposalsEngineProposal, PalletProposalsEngineProposalParameters, PalletProposalsEngineProposalStatusesApprovedProposalDecision, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineRawEvent, PalletProposalsEngineVoteKind, PalletProposalsEngineVotingResults, PalletReferendumCall, PalletReferendumCastVote, PalletReferendumError, PalletReferendumInstance1, PalletReferendumOptionResult, PalletReferendumRawEvent, PalletReferendumReferendumStage, PalletReferendumReferendumStageRevealing, PalletReferendumReferendumStageVoting, PalletSessionCall, PalletSessionError, PalletSessionEvent, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingIndividualExposure, PalletStakingNominations, PalletStakingPalletCall, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletError, PalletStakingPalletEvent, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingUnlockChunk, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageCall, PalletStorageDataObject, PalletStorageDataObjectCreationParameters, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketIdRecord, PalletStorageDistributionBucketRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageError, PalletStorageRawEvent, PalletStorageStaticBagId, PalletStorageStorageBucketOperatorStatus, PalletStorageStorageBucketRecord, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletSudoCall, PalletSudoError, PalletSudoEvent, PalletTimestampCall, PalletTransactionPaymentChargeTransactionPayment, PalletTransactionPaymentReleases, PalletUtilityCall, PalletUtilityError, PalletUtilityEvent, PalletUtilityRawEvent, PalletVestingCall, PalletVestingError, PalletVestingEvent, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupCall, PalletWorkingGroupErrorsError, PalletWorkingGroupGroupWorker, PalletWorkingGroupInstance1, PalletWorkingGroupInstance2, PalletWorkingGroupInstance3, PalletWorkingGroupInstance4, PalletWorkingGroupInstance5, PalletWorkingGroupInstance6, PalletWorkingGroupInstance7, PalletWorkingGroupInstance8, PalletWorkingGroupInstance9, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, PalletWorkingGroupOpeningType, PalletWorkingGroupRawEventInstance1, PalletWorkingGroupRawEventInstance2, PalletWorkingGroupRawEventInstance3, PalletWorkingGroupRawEventInstance4, PalletWorkingGroupRawEventInstance5, PalletWorkingGroupRawEventInstance6, PalletWorkingGroupRawEventInstance7, PalletWorkingGroupRawEventInstance8, PalletWorkingGroupRawEventInstance9, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakeParameters, PalletWorkingGroupStakePolicy, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAllowedSlots, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpConsensusBabeDigestsPrimaryPreDigest, SpConsensusBabeDigestsSecondaryPlainPreDigest, SpConsensusBabeDigestsSecondaryVRFPreDigest, SpConsensusSlotsEquivocationProof, SpCoreCryptoKeyTypeId, SpCoreEcdsaSignature, SpCoreEd25519Public, SpCoreEd25519Signature, SpCoreOffchainOpaqueNetworkState, SpCoreSr25519Public, SpCoreSr25519Signature, SpCoreVoid, SpFinalityGrandpaAppPublic, SpFinalityGrandpaAppSignature, SpFinalityGrandpaEquivocation, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeArithmeticError, SpRuntimeBlakeTwo256, SpRuntimeDigest, SpRuntimeDigestDigestItem, SpRuntimeDispatchError, SpRuntimeHeader, SpRuntimeModuleError, SpRuntimeMultiSignature, SpRuntimeTokenError, SpRuntimeTransactionalError, SpSessionMembershipProof, SpStakingOffenceOffenceDetails, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
 declare module '@polkadot/types/types/registry' {
     interface InterfaceTypes {
         FinalityGrandpaEquivocationPrecommit: FinalityGrandpaEquivocationPrecommit;
@@ -53,15 +53,31 @@ declare module '@polkadot/types/types/registry' {
         PalletBalancesReasons: PalletBalancesReasons;
         PalletBalancesReleases: PalletBalancesReleases;
         PalletBalancesReserveData: PalletBalancesReserveData;
+        PalletBountyAssuranceContractType: PalletBountyAssuranceContractType;
+        PalletBountyBountyActor: PalletBountyBountyActor;
+        PalletBountyBountyMilestone: PalletBountyBountyMilestone;
+        PalletBountyBountyParameters: PalletBountyBountyParameters;
+        PalletBountyBountyRecord: PalletBountyBountyRecord;
+        PalletBountyCall: PalletBountyCall;
+        PalletBountyContribution: PalletBountyContribution;
+        PalletBountyEntryRecord: PalletBountyEntryRecord;
+        PalletBountyError: PalletBountyError;
+        PalletBountyFundingType: PalletBountyFundingType;
+        PalletBountyOracleWorkEntryJudgment: PalletBountyOracleWorkEntryJudgment;
+        PalletBountyRawEvent: PalletBountyRawEvent;
         PalletCommonBalanceKind: PalletCommonBalanceKind;
+        PalletCommonBloatBondRepayableBloatBond: PalletCommonBloatBondRepayableBloatBond;
         PalletCommonConstraintsBoundedValueConstraint: PalletCommonConstraintsBoundedValueConstraint;
         PalletCommonFundingRequestParameters: PalletCommonFundingRequestParameters;
+        PalletCommonProofElementRecord: PalletCommonProofElementRecord;
+        PalletCommonSide: PalletCommonSide;
         PalletCommonWorkingGroup: PalletCommonWorkingGroup;
         PalletConstitutionCall: PalletConstitutionCall;
         PalletConstitutionConstitutionInfo: PalletConstitutionConstitutionInfo;
         PalletConstitutionEvent: PalletConstitutionEvent;
         PalletContentCall: PalletContentCall;
         PalletContentChannelActionPermission: PalletContentChannelActionPermission;
+        PalletContentChannelBagWitness: PalletContentChannelBagWitness;
         PalletContentChannelCreationParametersRecord: PalletContentChannelCreationParametersRecord;
         PalletContentChannelFundsDestination: PalletContentChannelFundsDestination;
         PalletContentChannelOwner: PalletContentChannelOwner;
@@ -90,12 +106,11 @@ declare module '@polkadot/types/types/registry' {
         PalletContentPermissionsCuratorGroup: PalletContentPermissionsCuratorGroup;
         PalletContentPermissionsCuratorGroupContentModerationAction: PalletContentPermissionsCuratorGroupContentModerationAction;
         PalletContentPermissionsCuratorGroupPausableChannelFeature: PalletContentPermissionsCuratorGroupPausableChannelFeature;
-        PalletContentProofElementRecord: PalletContentProofElementRecord;
         PalletContentPullPaymentElement: PalletContentPullPaymentElement;
         PalletContentRawEvent: PalletContentRawEvent;
-        PalletContentSide: PalletContentSide;
         PalletContentStorageAssetsRecord: PalletContentStorageAssetsRecord;
-        PalletContentTransferCommitmentParameters: PalletContentTransferCommitmentParameters;
+        PalletContentTransferCommitmentParametersBTreeMap: PalletContentTransferCommitmentParametersBTreeMap;
+        PalletContentTransferCommitmentParametersBoundedBTreeMap: PalletContentTransferCommitmentParametersBoundedBTreeMap;
         PalletContentUpdateChannelPayoutsParametersRecord: PalletContentUpdateChannelPayoutsParametersRecord;
         PalletContentVideoCreationParametersRecord: PalletContentVideoCreationParametersRecord;
         PalletContentVideoRecord: PalletContentVideoRecord;
@@ -106,6 +121,7 @@ declare module '@polkadot/types/types/registry' {
         PalletCouncilCouncilStage: PalletCouncilCouncilStage;
         PalletCouncilCouncilStageAnnouncing: PalletCouncilCouncilStageAnnouncing;
         PalletCouncilCouncilStageElection: PalletCouncilCouncilStageElection;
+        PalletCouncilCouncilStageIdle: PalletCouncilCouncilStageIdle;
         PalletCouncilCouncilStageUpdate: PalletCouncilCouncilStageUpdate;
         PalletCouncilError: PalletCouncilError;
         PalletCouncilRawEvent: PalletCouncilRawEvent;
@@ -148,6 +164,11 @@ declare module '@polkadot/types/types/registry' {
         PalletMembershipMembershipObject: PalletMembershipMembershipObject;
         PalletMembershipRawEvent: PalletMembershipRawEvent;
         PalletMembershipStakingAccountMemberBinding: PalletMembershipStakingAccountMemberBinding;
+        PalletMultisigCall: PalletMultisigCall;
+        PalletMultisigError: PalletMultisigError;
+        PalletMultisigEvent: PalletMultisigEvent;
+        PalletMultisigMultisig: PalletMultisigMultisig;
+        PalletMultisigTimepoint: PalletMultisigTimepoint;
         PalletOffencesEvent: PalletOffencesEvent;
         PalletProjectTokenAccountData: PalletProjectTokenAccountData;
         PalletProjectTokenCall: PalletProjectTokenCall;
diff --git a/augment/registry.js b/augment/registry.js
index c56161d96a47321e024185a89aca087b6af4585f..e27d37b2ff1bfd30fa2bbc0cbb38eed6013870cc 100644
--- a/augment/registry.js
+++ b/augment/registry.js
@@ -1,4 +1,3 @@
-"use strict";
 // Auto-generated via `yarn polkadot-types-from-defs`, do not edit
 /* eslint-disable */
-Object.defineProperty(exports, "__esModule", { value: true });
+export {};
diff --git a/augment/types-lookup.d.ts b/augment/types-lookup.d.ts
index 885bdcba9cee11e07e483adb4a33be7d9f638267..a2d875a02f71aa1202c940e4f8c635a31bc726f4 100644
--- a/augment/types-lookup.d.ts
+++ b/augment/types-lookup.d.ts
@@ -1,5 +1,5 @@
 declare module '@polkadot/types/lookup' {
-    import type { BTreeMap, BTreeSet, Bytes, Compact, Enum, Null, Option, Result, Struct, Text, U8aFixed, Vec, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+    import type { BTreeMap, BTreeSet, Bytes, Compact, Enum, Null, Option, Result, Struct, Text, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
     import type { ITuple } from '@polkadot/types-codec/types';
     import type { AccountId32, Call, H256, PerU16, Perbill, Percent, Permill, Perquintill } from '@polkadot/types/interfaces/runtime';
     import type { Event } from '@polkadot/types/interfaces/system';
@@ -404,17 +404,57 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'VestingUpdated' | 'VestingCompleted';
     }
-    /** @name PalletCouncilRawEvent (61) */
+    /** @name PalletMultisigEvent (61) */
+    interface PalletMultisigEvent extends Enum {
+        readonly isNewMultisig: boolean;
+        readonly asNewMultisig: {
+            readonly approving: AccountId32;
+            readonly multisig: AccountId32;
+            readonly callHash: U8aFixed;
+        } & Struct;
+        readonly isMultisigApproval: boolean;
+        readonly asMultisigApproval: {
+            readonly approving: AccountId32;
+            readonly timepoint: PalletMultisigTimepoint;
+            readonly multisig: AccountId32;
+            readonly callHash: U8aFixed;
+        } & Struct;
+        readonly isMultisigExecuted: boolean;
+        readonly asMultisigExecuted: {
+            readonly approving: AccountId32;
+            readonly timepoint: PalletMultisigTimepoint;
+            readonly multisig: AccountId32;
+            readonly callHash: U8aFixed;
+            readonly result: Result<Null, SpRuntimeDispatchError>;
+        } & Struct;
+        readonly isMultisigCancelled: boolean;
+        readonly asMultisigCancelled: {
+            readonly cancelling: AccountId32;
+            readonly timepoint: PalletMultisigTimepoint;
+            readonly multisig: AccountId32;
+            readonly callHash: U8aFixed;
+        } & Struct;
+        readonly type: 'NewMultisig' | 'MultisigApproval' | 'MultisigExecuted' | 'MultisigCancelled';
+    }
+    /** @name PalletMultisigTimepoint (62) */
+    interface PalletMultisigTimepoint extends Struct {
+        readonly height: u32;
+        readonly index: u32;
+    }
+    /** @name PalletCouncilRawEvent (63) */
     interface PalletCouncilRawEvent extends Enum {
         readonly isAnnouncingPeriodStarted: boolean;
+        readonly asAnnouncingPeriodStarted: u32;
         readonly isNotEnoughCandidates: boolean;
+        readonly asNotEnoughCandidates: u32;
         readonly isVotingPeriodStarted: boolean;
         readonly asVotingPeriodStarted: u64;
         readonly isNewCandidate: boolean;
         readonly asNewCandidate: ITuple<[u64, AccountId32, AccountId32, u128]>;
         readonly isNewCouncilElected: boolean;
-        readonly asNewCouncilElected: Vec<u64>;
+        readonly asNewCouncilElected: ITuple<[Vec<u64>, u32]>;
         readonly isNewCouncilNotElected: boolean;
+        readonly asNewCouncilNotElected: u32;
         readonly isCandidacyStakeRelease: boolean;
         readonly asCandidacyStakeRelease: u64;
         readonly isCandidacyWithdraw: boolean;
@@ -443,13 +483,14 @@ declare module '@polkadot/types/lookup' {
         readonly asCandidateRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'AnnouncingPeriodStarted' | 'NotEnoughCandidates' | 'VotingPeriodStarted' | 'NewCandidate' | 'NewCouncilElected' | 'NewCouncilNotElected' | 'CandidacyStakeRelease' | 'CandidacyWithdraw' | 'CandidacyNoteSet' | 'RewardPayment' | 'BudgetBalanceSet' | 'BudgetRefill' | 'BudgetRefillPlanned' | 'BudgetIncrementUpdated' | 'CouncilorRewardUpdated' | 'RequestFunded' | 'CouncilBudgetFunded' | 'CouncilorRemarked' | 'CandidateRemarked';
     }
-    /** @name PalletReferendumRawEvent (63) */
+    /** @name PalletReferendumRawEvent (65) */
     interface PalletReferendumRawEvent extends Enum {
         readonly isReferendumStarted: boolean;
-        readonly asReferendumStarted: u64;
+        readonly asReferendumStarted: ITuple<[u64, u32]>;
         readonly isReferendumStartedForcefully: boolean;
-        readonly asReferendumStartedForcefully: u64;
+        readonly asReferendumStartedForcefully: ITuple<[u64, u32]>;
         readonly isRevealingStageStarted: boolean;
+        readonly asRevealingStageStarted: u32;
         readonly isReferendumFinished: boolean;
         readonly asReferendumFinished: Vec<PalletReferendumOptionResult>;
         readonly isVoteCast: boolean;
@@ -460,21 +501,21 @@ declare module '@polkadot/types/lookup' {
         readonly asStakeReleased: AccountId32;
         readonly type: 'ReferendumStarted' | 'ReferendumStartedForcefully' | 'RevealingStageStarted' | 'ReferendumFinished' | 'VoteCast' | 'VoteRevealed' | 'StakeReleased';
     }
-    /** @name PalletReferendumInstance1 (64) */
+    /** @name PalletReferendumInstance1 (66) */
     type PalletReferendumInstance1 = Null;
-    /** @name PalletReferendumOptionResult (66) */
+    /** @name PalletReferendumOptionResult (68) */
     interface PalletReferendumOptionResult extends Struct {
         readonly optionId: u64;
         readonly votePower: u128;
     }
-    /** @name PalletMembershipRawEvent (67) */
+    /** @name PalletMembershipRawEvent (69) */
     interface PalletMembershipRawEvent extends Enum {
         readonly isMemberInvited: boolean;
         readonly asMemberInvited: ITuple<[u64, PalletMembershipInviteMembershipParameters]>;
         readonly isMembershipGifted: boolean;
         readonly asMembershipGifted: ITuple<[u64, PalletMembershipGiftMembershipParameters]>;
         readonly isMembershipBought: boolean;
-        readonly asMembershipBought: ITuple<[u64, PalletMembershipBuyMembershipParameters]>;
+        readonly asMembershipBought: ITuple<[u64, PalletMembershipBuyMembershipParameters, u32]>;
         readonly isMemberProfileUpdated: boolean;
         readonly asMemberProfileUpdated: ITuple<[u64, Option<Bytes>, Option<Bytes>]>;
         readonly isMemberAccountsUpdated: boolean;
@@ -502,10 +543,10 @@ declare module '@polkadot/types/lookup' {
         readonly isMemberRemarked: boolean;
         readonly asMemberRemarked: ITuple<[u64, Bytes]>;
         readonly isFoundingMemberCreated: boolean;
-        readonly asFoundingMemberCreated: ITuple<[u64, PalletMembershipCreateFoundingMemberParameters]>;
+        readonly asFoundingMemberCreated: ITuple<[u64, PalletMembershipCreateFoundingMemberParameters, u32]>;
         readonly type: 'MemberInvited' | 'MembershipGifted' | 'MembershipBought' | 'MemberProfileUpdated' | 'MemberAccountsUpdated' | 'MemberVerificationStatusUpdated' | 'ReferralCutUpdated' | 'InvitesTransferred' | 'MembershipPriceUpdated' | 'InitialInvitationBalanceUpdated' | 'LeaderInvitationQuotaUpdated' | 'InitialInvitationCountUpdated' | 'StakingAccountAdded' | 'StakingAccountRemoved' | 'StakingAccountConfirmed' | 'MemberRemarked' | 'FoundingMemberCreated';
     }
-    /** @name PalletMembershipBuyMembershipParameters (68) */
+    /** @name PalletMembershipBuyMembershipParameters (70) */
     interface PalletMembershipBuyMembershipParameters extends Struct {
         readonly rootAccount: AccountId32;
         readonly controllerAccount: AccountId32;
@@ -513,7 +554,7 @@ declare module '@polkadot/types/lookup' {
         readonly metadata: Bytes;
         readonly referrerId: Option<u64>;
     }
-    /** @name PalletMembershipInviteMembershipParameters (71) */
+    /** @name PalletMembershipInviteMembershipParameters (73) */
     interface PalletMembershipInviteMembershipParameters extends Struct {
         readonly invitingMemberId: u64;
         readonly rootAccount: AccountId32;
@@ -521,14 +562,14 @@ declare module '@polkadot/types/lookup' {
         readonly handle: Option<Bytes>;
         readonly metadata: Bytes;
     }
-    /** @name PalletMembershipCreateFoundingMemberParameters (72) */
+    /** @name PalletMembershipCreateFoundingMemberParameters (74) */
     interface PalletMembershipCreateFoundingMemberParameters extends Struct {
         readonly rootAccount: AccountId32;
         readonly controllerAccount: AccountId32;
         readonly handle: Bytes;
         readonly metadata: Bytes;
     }
-    /** @name PalletMembershipGiftMembershipParameters (73) */
+    /** @name PalletMembershipGiftMembershipParameters (75) */
     interface PalletMembershipGiftMembershipParameters extends Struct {
         readonly rootAccount: AccountId32;
         readonly controllerAccount: AccountId32;
@@ -539,7 +580,7 @@ declare module '@polkadot/types/lookup' {
         readonly creditRootAccount: u128;
         readonly applyRootAccountInvitationLock: Option<u128>;
     }
-    /** @name PalletForumRawEvent (75) */
+    /** @name PalletForumRawEvent (77) */
     interface PalletForumRawEvent extends Enum {
         readonly isCategoryCreated: boolean;
         readonly asCategoryCreated: ITuple<[u64, Option<u64>, Bytes, Bytes]>;
@@ -571,34 +612,132 @@ declare module '@polkadot/types/lookup' {
         readonly asPostDeleted: ITuple<[Bytes, u64, BTreeMap<PalletForumExtendedPostIdObject, bool>]>;
         readonly isPostTextUpdated: boolean;
         readonly asPostTextUpdated: ITuple<[u64, u64, u64, u64, Bytes]>;
-        readonly isPostReacted: boolean;
-        readonly asPostReacted: ITuple<[u64, u64, u64, u64, u64]>;
         readonly isCategoryStickyThreadUpdate: boolean;
         readonly asCategoryStickyThreadUpdate: ITuple<[u64, Vec<u64>, PalletForumPrivilegedActor]>;
         readonly isCategoryMembershipOfModeratorUpdated: boolean;
         readonly asCategoryMembershipOfModeratorUpdated: ITuple<[u64, u64, bool]>;
-        readonly type: 'CategoryCreated' | 'CategoryArchivalStatusUpdated' | 'CategoryTitleUpdated' | 'CategoryDescriptionUpdated' | 'CategoryDeleted' | 'ThreadCreated' | 'ThreadModerated' | 'ThreadUpdated' | 'ThreadMetadataUpdated' | 'ThreadDeleted' | 'ThreadMoved' | 'PostAdded' | 'PostModerated' | 'PostDeleted' | 'PostTextUpdated' | 'PostReacted' | 'CategoryStickyThreadUpdate' | 'CategoryMembershipOfModeratorUpdated';
+        readonly type: 'CategoryCreated' | 'CategoryArchivalStatusUpdated' | 'CategoryTitleUpdated' | 'CategoryDescriptionUpdated' | 'CategoryDeleted' | 'ThreadCreated' | 'ThreadModerated' | 'ThreadUpdated' | 'ThreadMetadataUpdated' | 'ThreadDeleted' | 'ThreadMoved' | 'PostAdded' | 'PostModerated' | 'PostDeleted' | 'PostTextUpdated' | 'CategoryStickyThreadUpdate' | 'CategoryMembershipOfModeratorUpdated';
     }
-    /** @name PalletForumPrivilegedActor (76) */
+    /** @name PalletForumPrivilegedActor (78) */
     interface PalletForumPrivilegedActor extends Enum {
         readonly isLead: boolean;
         readonly isModerator: boolean;
         readonly asModerator: u64;
         readonly type: 'Lead' | 'Moderator';
     }
-    /** @name PalletForumExtendedPostIdObject (77) */
+    /** @name PalletForumExtendedPostIdObject (79) */
     interface PalletForumExtendedPostIdObject extends Struct {
         readonly categoryId: u64;
         readonly threadId: u64;
         readonly postId: u64;
     }
-    /** @name PalletConstitutionEvent (81) */
+    /** @name PalletConstitutionEvent (83) */
     interface PalletConstitutionEvent extends Enum {
         readonly isConstutionAmended: boolean;
         readonly asConstutionAmended: ITuple<[Bytes, Bytes]>;
         readonly type: 'ConstutionAmended';
     }
-    /** @name PalletUtilityRawEvent (82) */
+    /** @name PalletBountyRawEvent (84) */
+    interface PalletBountyRawEvent extends Enum {
+        readonly isBountyCreated: boolean;
+        readonly asBountyCreated: ITuple<[u64, PalletBountyBountyParameters, Bytes]>;
+        readonly isBountyOracleSwitched: boolean;
+        readonly asBountyOracleSwitched: ITuple<[u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+        readonly isBountyTerminated: boolean;
+        readonly asBountyTerminated: ITuple<[u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+        readonly isBountyFunded: boolean;
+        readonly asBountyFunded: ITuple<[u64, PalletBountyBountyActor, u128]>;
+        readonly isBountyMaxFundingReached: boolean;
+        readonly asBountyMaxFundingReached: u64;
+        readonly isBountyFundingWithdrawal: boolean;
+        readonly asBountyFundingWithdrawal: ITuple<[u64, PalletBountyBountyActor]>;
+        readonly isBountyCreatorCherryWithdrawal: boolean;
+        readonly asBountyCreatorCherryWithdrawal: ITuple<[u64, PalletBountyBountyActor]>;
+        readonly isBountyCreatorOracleRewardWithdrawal: boolean;
+        readonly asBountyCreatorOracleRewardWithdrawal: ITuple<[u64, PalletBountyBountyActor]>;
+        readonly isBountyOracleRewardWithdrawal: boolean;
+        readonly asBountyOracleRewardWithdrawal: ITuple<[u64, PalletBountyBountyActor, u128]>;
+        readonly isBountyRemoved: boolean;
+        readonly asBountyRemoved: u64;
+        readonly isWorkEntryAnnounced: boolean;
+        readonly asWorkEntryAnnounced: ITuple<[u64, u64, u64, AccountId32, Bytes]>;
+        readonly isWorkSubmitted: boolean;
+        readonly asWorkSubmitted: ITuple<[u64, u64, u64, Bytes]>;
+        readonly isOracleJudgmentSubmitted: boolean;
+        readonly asOracleJudgmentSubmitted: ITuple<[u64, PalletBountyBountyActor, BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, Bytes]>;
+        readonly isWorkEntrantFundsWithdrawn: boolean;
+        readonly asWorkEntrantFundsWithdrawn: ITuple<[u64, u64, u64]>;
+        readonly isBountyContributorRemarked: boolean;
+        readonly asBountyContributorRemarked: ITuple<[PalletBountyBountyActor, u64, Bytes]>;
+        readonly isBountyOracleRemarked: boolean;
+        readonly asBountyOracleRemarked: ITuple<[PalletBountyBountyActor, u64, Bytes]>;
+        readonly isBountyEntrantRemarked: boolean;
+        readonly asBountyEntrantRemarked: ITuple<[u64, u64, u64, Bytes]>;
+        readonly isBountyCreatorRemarked: boolean;
+        readonly asBountyCreatorRemarked: ITuple<[PalletBountyBountyActor, u64, Bytes]>;
+        readonly isWorkSubmissionPeriodEnded: boolean;
+        readonly asWorkSubmissionPeriodEnded: ITuple<[u64, PalletBountyBountyActor]>;
+        readonly isWorkEntrantStakeUnlocked: boolean;
+        readonly asWorkEntrantStakeUnlocked: ITuple<[u64, u64, AccountId32]>;
+        readonly isWorkEntrantStakeSlashed: boolean;
+        readonly asWorkEntrantStakeSlashed: ITuple<[u64, u64, AccountId32, u128]>;
+        readonly isFunderStateBloatBondWithdrawn: boolean;
+        readonly asFunderStateBloatBondWithdrawn: ITuple<[u64, PalletBountyBountyActor, u128]>;
+        readonly isCreatorStateBloatBondWithdrawn: boolean;
+        readonly asCreatorStateBloatBondWithdrawn: ITuple<[u64, PalletBountyBountyActor, u128]>;
+        readonly type: 'BountyCreated' | 'BountyOracleSwitched' | 'BountyTerminated' | 'BountyFunded' | 'BountyMaxFundingReached' | 'BountyFundingWithdrawal' | 'BountyCreatorCherryWithdrawal' | 'BountyCreatorOracleRewardWithdrawal' | 'BountyOracleRewardWithdrawal' | 'BountyRemoved' | 'WorkEntryAnnounced' | 'WorkSubmitted' | 'OracleJudgmentSubmitted' | 'WorkEntrantFundsWithdrawn' | 'BountyContributorRemarked' | 'BountyOracleRemarked' | 'BountyEntrantRemarked' | 'BountyCreatorRemarked' | 'WorkSubmissionPeriodEnded' | 'WorkEntrantStakeUnlocked' | 'WorkEntrantStakeSlashed' | 'FunderStateBloatBondWithdrawn' | 'CreatorStateBloatBondWithdrawn';
+    }
+    /** @name PalletBountyBountyParameters (85) */
+    interface PalletBountyBountyParameters extends Struct {
+        readonly oracle: PalletBountyBountyActor;
+        readonly contractType: PalletBountyAssuranceContractType;
+        readonly creator: PalletBountyBountyActor;
+        readonly cherry: u128;
+        readonly oracleReward: u128;
+        readonly entrantStake: u128;
+        readonly fundingType: PalletBountyFundingType;
+    }
+    /** @name PalletBountyBountyActor (86) */
+    interface PalletBountyBountyActor extends Enum {
+        readonly isCouncil: boolean;
+        readonly isMember: boolean;
+        readonly asMember: u64;
+        readonly type: 'Council' | 'Member';
+    }
+    /** @name PalletBountyAssuranceContractType (87) */
+    interface PalletBountyAssuranceContractType extends Enum {
+        readonly isOpen: boolean;
+        readonly isClosed: boolean;
+        readonly asClosed: BTreeSet<u64>;
+        readonly type: 'Open' | 'Closed';
+    }
+    /** @name PalletBountyFundingType (89) */
+    interface PalletBountyFundingType extends Enum {
+        readonly isPerpetual: boolean;
+        readonly asPerpetual: {
+            readonly target: u128;
+        } & Struct;
+        readonly isLimited: boolean;
+        readonly asLimited: {
+            readonly target: u128;
+            readonly fundingPeriod: u32;
+        } & Struct;
+        readonly type: 'Perpetual' | 'Limited';
+    }
+    /** @name PalletBountyOracleWorkEntryJudgment (91) */
+    interface PalletBountyOracleWorkEntryJudgment extends Enum {
+        readonly isWinner: boolean;
+        readonly asWinner: {
+            readonly reward: u128;
+        } & Struct;
+        readonly isRejected: boolean;
+        readonly asRejected: {
+            readonly slashingShare: Perbill;
+            readonly actionJustification: Bytes;
+        } & Struct;
+        readonly type: 'Winner' | 'Rejected';
+    }
+    /** @name PalletUtilityRawEvent (94) */
     interface PalletUtilityRawEvent extends Enum {
         readonly isSignaled: boolean;
         readonly asSignaled: Bytes;
@@ -610,7 +749,7 @@ declare module '@polkadot/types/lookup' {
         readonly asTokensBurned: ITuple<[AccountId32, u128]>;
         readonly type: 'Signaled' | 'RuntimeUpgraded' | 'UpdatedWorkingGroupBudget' | 'TokensBurned';
     }
-    /** @name PalletCommonWorkingGroup (83) */
+    /** @name PalletCommonWorkingGroup (95) */
     interface PalletCommonWorkingGroup extends Enum {
         readonly isForum: boolean;
         readonly isStorage: boolean;
@@ -623,13 +762,13 @@ declare module '@polkadot/types/lookup' {
         readonly isMembership: boolean;
         readonly type: 'Forum' | 'Storage' | 'Content' | 'OperationsAlpha' | 'Gateway' | 'Distribution' | 'OperationsBeta' | 'OperationsGamma' | 'Membership';
     }
-    /** @name PalletCommonBalanceKind (84) */
+    /** @name PalletCommonBalanceKind (96) */
     interface PalletCommonBalanceKind extends Enum {
         readonly isPositive: boolean;
         readonly isNegative: boolean;
         readonly type: 'Positive' | 'Negative';
     }
-    /** @name PalletContentRawEvent (85) */
+    /** @name PalletContentRawEvent (97) */
     interface PalletContentRawEvent extends Enum {
         readonly isCuratorGroupCreated: boolean;
         readonly asCuratorGroupCreated: u64;
@@ -732,7 +871,7 @@ declare module '@polkadot/types/lookup' {
         readonly isCancelChannelTransfer: boolean;
         readonly asCancelChannelTransfer: ITuple<[u64, PalletContentPermissionsContentActor]>;
         readonly isChannelTransferAccepted: boolean;
-        readonly asChannelTransferAccepted: ITuple<[u64, PalletContentTransferCommitmentParameters]>;
+        readonly asChannelTransferAccepted: ITuple<[u64, PalletContentTransferCommitmentParametersBTreeMap]>;
         readonly isGlobalNftLimitUpdated: boolean;
         readonly asGlobalNftLimitUpdated: ITuple<[PalletContentNftLimitPeriod, u64]>;
         readonly isChannelNftLimitUpdated: boolean;
@@ -743,7 +882,7 @@ declare module '@polkadot/types/lookup' {
         readonly asCreatorTokenIssued: ITuple<[PalletContentPermissionsContentActor, u64, u64]>;
         readonly type: 'CuratorGroupCreated' | 'CuratorGroupPermissionsUpdated' | 'CuratorGroupStatusSet' | 'CuratorAdded' | 'CuratorRemoved' | 'ChannelCreated' | 'ChannelUpdated' | 'ChannelPrivilegeLevelUpdated' | 'ChannelStateBloatBondValueUpdated' | 'VideoStateBloatBondValueUpdated' | 'ChannelAssetsRemoved' | 'ChannelDeleted' | 'ChannelDeletedByModerator' | 'ChannelVisibilitySetByModerator' | 'ChannelPausedFeaturesUpdatedByModerator' | 'ChannelAssetsDeletedByModerator' | 'ChannelFundsWithdrawn' | 'ChannelRewardClaimedAndWithdrawn' | 'VideoCreated' | 'VideoUpdated' | 'VideoDeleted' | 'VideoDeletedByModerator' | 'VideoVisibilitySetByModerator' | 'VideoAssetsDeletedByModerator' | 'ChannelPayoutsUpdated' | 'ChannelRewardUpdated' | 'CouncilRewardClaimed' | 'EnglishAuctionStarted' | 'OpenAuctionStarted' | 'NftIssued' | 'NftDestroyed' | 'AuctionBidMade' | 'AuctionBidCanceled' | 'AuctionCanceled' | 'EnglishAuctionSettled' | 'BidMadeCompletingAuction' | 'OpenAuctionBidAccepted' | 'OfferStarted' | 'OfferAccepted' | 'OfferCanceled' | 'NftSellOrderMade' | 'NftBought' | 'BuyNowCanceled' | 'BuyNowPriceUpdated' | 'NftSlingedBackToTheOriginalArtist' | 'ChannelOwnerRemarked' | 'ChannelAgentRemarked' | 'NftOwnerRemarked' | 'InitializedChannelTransfer' | 'CancelChannelTransfer' | 'ChannelTransferAccepted' | 'GlobalNftLimitUpdated' | 'ChannelNftLimitUpdated' | 'ToggledNftLimits' | 'CreatorTokenIssued';
     }
-    /** @name PalletContentPermissionsContentActor (86) */
+    /** @name PalletContentPermissionsContentActor (98) */
     interface PalletContentPermissionsContentActor extends Enum {
         readonly isCurator: boolean;
         readonly asCurator: ITuple<[u64, u64]>;
@@ -752,7 +891,7 @@ declare module '@polkadot/types/lookup' {
         readonly isLead: boolean;
         readonly type: 'Curator' | 'Member' | 'Lead';
     }
-    /** @name PalletContentChannelRecord (87) */
+    /** @name PalletContentChannelRecord (99) */
     interface PalletContentChannelRecord extends Struct {
         readonly owner: PalletContentChannelOwner;
         readonly numVideos: u64;
@@ -767,17 +906,9 @@ declare module '@polkadot/types/lookup' {
         readonly dailyNftCounter: PalletContentNftCounter;
         readonly weeklyNftCounter: PalletContentNftCounter;
         readonly creatorTokenId: Option<u64>;
-        readonly channelStateBloatBond: u128;
-    }
-    /** @name PalletContentChannelOwner (88) */
-    interface PalletContentChannelOwner extends Enum {
-        readonly isMember: boolean;
-        readonly asMember: u64;
-        readonly isCuratorGroup: boolean;
-        readonly asCuratorGroup: u64;
-        readonly type: 'Member' | 'CuratorGroup';
+        readonly channelStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
     }
-    /** @name PalletContentChannelActionPermission (91) */
+    /** @name PalletContentChannelActionPermission (103) */
     interface PalletContentChannelActionPermission extends Enum {
         readonly isUpdateChannelMetadata: boolean;
         readonly isManageNonVideoChannelAssets: boolean;
@@ -802,7 +933,20 @@ declare module '@polkadot/types/lookup' {
         readonly isDeissueCreatorToken: boolean;
         readonly type: 'UpdateChannelMetadata' | 'ManageNonVideoChannelAssets' | 'ManageChannelCollaborators' | 'UpdateVideoMetadata' | 'AddVideo' | 'ManageVideoAssets' | 'DeleteChannel' | 'DeleteVideo' | 'ManageVideoNfts' | 'AgentRemark' | 'TransferChannel' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'IssueCreatorToken' | 'ClaimCreatorTokenPatronage' | 'InitAndManageCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRate' | 'ManageRevenueSplits' | 'DeissueCreatorToken';
     }
-    /** @name PalletContentPermissionsCuratorGroupPausableChannelFeature (96) */
+    /** @name PalletCommonBloatBondRepayableBloatBond (108) */
+    interface PalletCommonBloatBondRepayableBloatBond extends Struct {
+        readonly repaymentRestrictedTo: Option<AccountId32>;
+        readonly amount: u128;
+    }
+    /** @name PalletContentChannelOwner (109) */
+    interface PalletContentChannelOwner extends Enum {
+        readonly isMember: boolean;
+        readonly asMember: u64;
+        readonly isCuratorGroup: boolean;
+        readonly asCuratorGroup: u64;
+        readonly type: 'Member' | 'CuratorGroup';
+    }
+    /** @name PalletContentPermissionsCuratorGroupPausableChannelFeature (111) */
     interface PalletContentPermissionsCuratorGroupPausableChannelFeature extends Enum {
         readonly isChannelFundsTransfer: boolean;
         readonly isCreatorCashout: boolean;
@@ -813,35 +957,35 @@ declare module '@polkadot/types/lookup' {
         readonly isCreatorTokenIssuance: boolean;
         readonly type: 'ChannelFundsTransfer' | 'CreatorCashout' | 'VideoNftIssuance' | 'VideoCreation' | 'VideoUpdate' | 'ChannelUpdate' | 'CreatorTokenIssuance';
     }
-    /** @name PalletContentChannelTransferStatus (98) */
+    /** @name PalletContentChannelTransferStatus (113) */
     interface PalletContentChannelTransferStatus extends Enum {
         readonly isNoActiveTransfer: boolean;
         readonly isPendingTransfer: boolean;
         readonly asPendingTransfer: PalletContentPendingTransfer;
         readonly type: 'NoActiveTransfer' | 'PendingTransfer';
     }
-    /** @name PalletContentPendingTransfer (99) */
+    /** @name PalletContentPendingTransfer (114) */
     interface PalletContentPendingTransfer extends Struct {
         readonly newOwner: PalletContentChannelOwner;
-        readonly transferParams: PalletContentTransferCommitmentParameters;
+        readonly transferParams: PalletContentTransferCommitmentParametersBoundedBTreeMap;
     }
-    /** @name PalletContentTransferCommitmentParameters (100) */
-    interface PalletContentTransferCommitmentParameters extends Struct {
+    /** @name PalletContentTransferCommitmentParametersBoundedBTreeMap (115) */
+    interface PalletContentTransferCommitmentParametersBoundedBTreeMap extends Struct {
         readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>;
         readonly price: u128;
         readonly transferId: u64;
     }
-    /** @name PalletContentLimitPerPeriod (102) */
+    /** @name PalletContentLimitPerPeriod (116) */
     interface PalletContentLimitPerPeriod extends Struct {
         readonly limit: u64;
         readonly blockNumberPeriod: u32;
     }
-    /** @name PalletContentNftCounter (103) */
+    /** @name PalletContentNftCounter (117) */
     interface PalletContentNftCounter extends Struct {
         readonly counter: u64;
         readonly lastUpdated: u32;
     }
-    /** @name PalletContentNftTypesEnglishAuctionParamsRecord (104) */
+    /** @name PalletContentNftTypesEnglishAuctionParamsRecord (118) */
     interface PalletContentNftTypesEnglishAuctionParamsRecord extends Struct {
         readonly startingPrice: u128;
         readonly buyNowPrice: Option<u128>;
@@ -851,7 +995,7 @@ declare module '@polkadot/types/lookup' {
         readonly extensionPeriod: u32;
         readonly minBidStep: u128;
     }
-    /** @name PalletContentNftTypesOpenAuctionParamsRecord (106) */
+    /** @name PalletContentNftTypesOpenAuctionParamsRecord (120) */
     interface PalletContentNftTypesOpenAuctionParamsRecord extends Struct {
         readonly startingPrice: u128;
         readonly buyNowPrice: Option<u128>;
@@ -859,14 +1003,14 @@ declare module '@polkadot/types/lookup' {
         readonly whitelist: BTreeSet<u64>;
         readonly bidLockDuration: u32;
     }
-    /** @name PalletContentNftTypesNftIssuanceParametersRecord (107) */
+    /** @name PalletContentNftTypesNftIssuanceParametersRecord (121) */
     interface PalletContentNftTypesNftIssuanceParametersRecord extends Struct {
         readonly royalty: Option<Perbill>;
         readonly nftMetadata: Bytes;
         readonly nonChannelOwner: Option<u64>;
         readonly initTransactionalStatus: PalletContentNftTypesInitTransactionalStatusRecord;
     }
-    /** @name PalletContentNftTypesInitTransactionalStatusRecord (108) */
+    /** @name PalletContentNftTypesInitTransactionalStatusRecord (122) */
     interface PalletContentNftTypesInitTransactionalStatusRecord extends Enum {
         readonly isIdle: boolean;
         readonly isBuyNow: boolean;
@@ -879,7 +1023,7 @@ declare module '@polkadot/types/lookup' {
         readonly asOpenAuction: PalletContentNftTypesOpenAuctionParamsRecord;
         readonly type: 'Idle' | 'BuyNow' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction';
     }
-    /** @name PalletContentChannelCreationParametersRecord (110) */
+    /** @name PalletContentChannelCreationParametersRecord (124) */
     interface PalletContentChannelCreationParametersRecord extends Struct {
         readonly assets: Option<PalletContentStorageAssetsRecord>;
         readonly meta: Option<Bytes>;
@@ -889,46 +1033,49 @@ declare module '@polkadot/types/lookup' {
         readonly expectedChannelStateBloatBond: u128;
         readonly expectedDataObjectStateBloatBond: u128;
     }
-    /** @name PalletContentStorageAssetsRecord (111) */
+    /** @name PalletContentStorageAssetsRecord (125) */
     interface PalletContentStorageAssetsRecord extends Struct {
         readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
         readonly expectedDataSizeFee: u128;
     }
-    /** @name PalletStorageDataObjectCreationParameters (113) */
+    /** @name PalletStorageDataObjectCreationParameters (127) */
     interface PalletStorageDataObjectCreationParameters extends Struct {
         readonly size_: u64;
         readonly ipfsContentId: Bytes;
     }
-    /** @name PalletStorageDistributionBucketIdRecord (114) */
+    /** @name PalletStorageDistributionBucketIdRecord (128) */
     interface PalletStorageDistributionBucketIdRecord extends Struct {
         readonly distributionBucketFamilyId: u64;
         readonly distributionBucketIndex: u64;
     }
-    /** @name PalletContentChannelUpdateParametersRecord (118) */
+    /** @name PalletContentChannelUpdateParametersRecord (132) */
     interface PalletContentChannelUpdateParametersRecord extends Struct {
         readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
         readonly newMeta: Option<Bytes>;
         readonly assetsToRemove: BTreeSet<u64>;
         readonly collaborators: Option<BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>>;
         readonly expectedDataObjectStateBloatBond: u128;
+        readonly storageBucketsNumWitness: Option<u32>;
     }
-    /** @name PalletContentVideoCreationParametersRecord (120) */
+    /** @name PalletContentVideoCreationParametersRecord (134) */
     interface PalletContentVideoCreationParametersRecord extends Struct {
         readonly assets: Option<PalletContentStorageAssetsRecord>;
         readonly meta: Option<Bytes>;
         readonly autoIssueNft: Option<PalletContentNftTypesNftIssuanceParametersRecord>;
         readonly expectedVideoStateBloatBond: u128;
         readonly expectedDataObjectStateBloatBond: u128;
+        readonly storageBucketsNumWitness: u32;
     }
-    /** @name PalletContentVideoUpdateParametersRecord (122) */
+    /** @name PalletContentVideoUpdateParametersRecord (136) */
     interface PalletContentVideoUpdateParametersRecord extends Struct {
         readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
         readonly newMeta: Option<Bytes>;
         readonly assetsToRemove: BTreeSet<u64>;
         readonly autoIssueNft: Option<PalletContentNftTypesNftIssuanceParametersRecord>;
         readonly expectedDataObjectStateBloatBond: u128;
+        readonly storageBucketsNumWitness: Option<u32>;
     }
-    /** @name PalletContentPermissionsCuratorGroupContentModerationAction (125) */
+    /** @name PalletContentPermissionsCuratorGroupContentModerationAction (139) */
     interface PalletContentPermissionsCuratorGroupContentModerationAction extends Enum {
         readonly isHideVideo: boolean;
         readonly isHideChannel: boolean;
@@ -942,7 +1089,13 @@ declare module '@polkadot/types/lookup' {
         readonly isUpdateChannelNftLimits: boolean;
         readonly type: 'HideVideo' | 'HideChannel' | 'ChangeChannelFeatureStatus' | 'DeleteVideo' | 'DeleteChannel' | 'DeleteVideoAssets' | 'DeleteNonVideoChannelAssets' | 'UpdateChannelNftLimits';
     }
-    /** @name PalletContentUpdateChannelPayoutsParametersRecord (129) */
+    /** @name PalletContentTransferCommitmentParametersBTreeMap (143) */
+    interface PalletContentTransferCommitmentParametersBTreeMap extends Struct {
+        readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>;
+        readonly price: u128;
+        readonly transferId: u64;
+    }
+    /** @name PalletContentUpdateChannelPayoutsParametersRecord (144) */
     interface PalletContentUpdateChannelPayoutsParametersRecord extends Struct {
         readonly commitment: Option<H256>;
         readonly payload: Option<PalletContentChannelPayoutsPayloadParametersRecord>;
@@ -950,27 +1103,27 @@ declare module '@polkadot/types/lookup' {
         readonly maxCashoutAllowed: Option<u128>;
         readonly channelCashoutsEnabled: Option<bool>;
     }
-    /** @name PalletContentChannelPayoutsPayloadParametersRecord (130) */
+    /** @name PalletContentChannelPayoutsPayloadParametersRecord (145) */
     interface PalletContentChannelPayoutsPayloadParametersRecord extends Struct {
         readonly uploaderAccount: AccountId32;
         readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
         readonly expectedDataSizeFee: u128;
         readonly expectedDataObjectStateBloatBond: u128;
     }
-    /** @name PalletContentChannelFundsDestination (134) */
+    /** @name PalletContentChannelFundsDestination (149) */
     interface PalletContentChannelFundsDestination extends Enum {
         readonly isAccountId: boolean;
         readonly asAccountId: AccountId32;
         readonly isCouncilBudget: boolean;
         readonly type: 'AccountId' | 'CouncilBudget';
     }
-    /** @name PalletContentNftLimitPeriod (135) */
+    /** @name PalletContentNftLimitPeriod (150) */
     interface PalletContentNftLimitPeriod extends Enum {
         readonly isDaily: boolean;
         readonly isWeekly: boolean;
         readonly type: 'Daily' | 'Weekly';
     }
-    /** @name PalletStorageRawEvent (136) */
+    /** @name PalletStorageRawEvent (151) */
     interface PalletStorageRawEvent extends Enum {
         readonly isStorageBucketCreated: boolean;
         readonly asStorageBucketCreated: ITuple<[u64, Option<u64>, bool, u64, u64]>;
@@ -979,7 +1132,7 @@ declare module '@polkadot/types/lookup' {
         readonly isStorageBucketsUpdatedForBag: boolean;
         readonly asStorageBucketsUpdatedForBag: ITuple<[PalletStorageBagIdType, BTreeSet<u64>, BTreeSet<u64>]>;
         readonly isDataObjectsUploaded: boolean;
-        readonly asDataObjectsUploaded: ITuple<[Vec<u64>, PalletStorageUploadParametersRecord, u128]>;
+        readonly asDataObjectsUploaded: ITuple<[BTreeSet<u64>, PalletStorageUploadParametersRecord, u128]>;
         readonly isStorageOperatorMetadataSet: boolean;
         readonly asStorageOperatorMetadataSet: ITuple<[u64, u64, Bytes]>;
         readonly isStorageBucketVoucherLimitsSet: boolean;
@@ -1009,17 +1162,15 @@ declare module '@polkadot/types/lookup' {
         readonly isUpdateBlacklist: boolean;
         readonly asUpdateBlacklist: ITuple<[BTreeSet<Bytes>, BTreeSet<Bytes>]>;
         readonly isDynamicBagDeleted: boolean;
-        readonly asDynamicBagDeleted: ITuple<[AccountId32, PalletStorageDynamicBagIdType]>;
+        readonly asDynamicBagDeleted: PalletStorageDynamicBagIdType;
         readonly isDynamicBagCreated: boolean;
-        readonly asDynamicBagCreated: ITuple<[PalletStorageDynamicBagIdType, BTreeSet<u64>, BTreeSet<PalletStorageDistributionBucketIdRecord>]>;
+        readonly asDynamicBagCreated: ITuple<[PalletStorageDynBagCreationParametersRecord, BTreeSet<u64>]>;
         readonly isVoucherChanged: boolean;
         readonly asVoucherChanged: ITuple<[u64, PalletStorageVoucher]>;
         readonly isStorageBucketDeleted: boolean;
         readonly asStorageBucketDeleted: u64;
         readonly isNumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: boolean;
         readonly asNumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: ITuple<[PalletStorageDynamicBagType, u64]>;
-        readonly isBagObjectsChanged: boolean;
-        readonly asBagObjectsChanged: ITuple<[PalletStorageBagIdType, u64, u64]>;
         readonly isDistributionBucketFamilyCreated: boolean;
         readonly asDistributionBucketFamilyCreated: u64;
         readonly isDistributionBucketFamilyDeleted: boolean;
@@ -1053,14 +1204,14 @@ declare module '@polkadot/types/lookup' {
         readonly isDataObjectStateBloatBondValueUpdated: boolean;
         readonly asDataObjectStateBloatBondValueUpdated: u128;
         readonly isDataObjectsUpdated: boolean;
-        readonly asDataObjectsUpdated: ITuple<[PalletStorageUploadParametersRecord, BTreeSet<u64>]>;
+        readonly asDataObjectsUpdated: ITuple<[PalletStorageUploadParametersRecord, BTreeSet<u64>, BTreeSet<u64>]>;
         readonly isStorageOperatorRemarked: boolean;
         readonly asStorageOperatorRemarked: ITuple<[u64, u64, Bytes]>;
         readonly isDistributionOperatorRemarked: boolean;
         readonly asDistributionOperatorRemarked: ITuple<[u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
-        readonly type: 'StorageBucketCreated' | 'StorageBucketInvitationAccepted' | 'StorageBucketsUpdatedForBag' | 'DataObjectsUploaded' | 'StorageOperatorMetadataSet' | 'StorageBucketVoucherLimitsSet' | 'PendingDataObjectsAccepted' | 'StorageBucketInvitationCancelled' | 'StorageBucketOperatorInvited' | 'StorageBucketOperatorRemoved' | 'UploadingBlockStatusUpdated' | 'DataObjectPerMegabyteFeeUpdated' | 'StorageBucketsPerBagLimitUpdated' | 'StorageBucketsVoucherMaxLimitsUpdated' | 'DataObjectsMoved' | 'DataObjectsDeleted' | 'StorageBucketStatusUpdated' | 'UpdateBlacklist' | 'DynamicBagDeleted' | 'DynamicBagCreated' | 'VoucherChanged' | 'StorageBucketDeleted' | 'NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated' | 'BagObjectsChanged' | 'DistributionBucketFamilyCreated' | 'DistributionBucketFamilyDeleted' | 'DistributionBucketCreated' | 'DistributionBucketStatusUpdated' | 'DistributionBucketDeleted' | 'DistributionBucketsUpdatedForBag' | 'DistributionBucketsPerBagLimitUpdated' | 'DistributionBucketModeUpdated' | 'FamiliesInDynamicBagCreationPolicyUpdated' | 'DistributionBucketOperatorInvited' | 'DistributionBucketInvitationCancelled' | 'DistributionBucketInvitationAccepted' | 'DistributionBucketMetadataSet' | 'DistributionBucketOperatorRemoved' | 'DistributionBucketFamilyMetadataSet' | 'DataObjectStateBloatBondValueUpdated' | 'DataObjectsUpdated' | 'StorageOperatorRemarked' | 'DistributionOperatorRemarked';
+        readonly type: 'StorageBucketCreated' | 'StorageBucketInvitationAccepted' | 'StorageBucketsUpdatedForBag' | 'DataObjectsUploaded' | 'StorageOperatorMetadataSet' | 'StorageBucketVoucherLimitsSet' | 'PendingDataObjectsAccepted' | 'StorageBucketInvitationCancelled' | 'StorageBucketOperatorInvited' | 'StorageBucketOperatorRemoved' | 'UploadingBlockStatusUpdated' | 'DataObjectPerMegabyteFeeUpdated' | 'StorageBucketsPerBagLimitUpdated' | 'StorageBucketsVoucherMaxLimitsUpdated' | 'DataObjectsMoved' | 'DataObjectsDeleted' | 'StorageBucketStatusUpdated' | 'UpdateBlacklist' | 'DynamicBagDeleted' | 'DynamicBagCreated' | 'VoucherChanged' | 'StorageBucketDeleted' | 'NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated' | 'DistributionBucketFamilyCreated' | 'DistributionBucketFamilyDeleted' | 'DistributionBucketCreated' | 'DistributionBucketStatusUpdated' | 'DistributionBucketDeleted' | 'DistributionBucketsUpdatedForBag' | 'DistributionBucketsPerBagLimitUpdated' | 'DistributionBucketModeUpdated' | 'FamiliesInDynamicBagCreationPolicyUpdated' | 'DistributionBucketOperatorInvited' | 'DistributionBucketInvitationCancelled' | 'DistributionBucketInvitationAccepted' | 'DistributionBucketMetadataSet' | 'DistributionBucketOperatorRemoved' | 'DistributionBucketFamilyMetadataSet' | 'DataObjectStateBloatBondValueUpdated' | 'DataObjectsUpdated' | 'StorageOperatorRemarked' | 'DistributionOperatorRemarked';
     }
-    /** @name PalletStorageUploadParametersRecord (137) */
+    /** @name PalletStorageUploadParametersRecord (152) */
     interface PalletStorageUploadParametersRecord extends Struct {
         readonly bagId: PalletStorageBagIdType;
         readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
@@ -1068,7 +1219,7 @@ declare module '@polkadot/types/lookup' {
         readonly expectedDataSizeFee: u128;
         readonly expectedDataObjectStateBloatBond: u128;
     }
-    /** @name PalletStorageBagIdType (138) */
+    /** @name PalletStorageBagIdType (153) */
     interface PalletStorageBagIdType extends Enum {
         readonly isStatic: boolean;
         readonly asStatic: PalletStorageStaticBagId;
@@ -1076,14 +1227,14 @@ declare module '@polkadot/types/lookup' {
         readonly asDynamic: PalletStorageDynamicBagIdType;
         readonly type: 'Static' | 'Dynamic';
     }
-    /** @name PalletStorageStaticBagId (139) */
+    /** @name PalletStorageStaticBagId (154) */
     interface PalletStorageStaticBagId extends Enum {
         readonly isCouncil: boolean;
         readonly isWorkingGroup: boolean;
         readonly asWorkingGroup: PalletCommonWorkingGroup;
         readonly type: 'Council' | 'WorkingGroup';
     }
-    /** @name PalletStorageDynamicBagIdType (140) */
+    /** @name PalletStorageDynamicBagIdType (155) */
     interface PalletStorageDynamicBagIdType extends Enum {
         readonly isMember: boolean;
         readonly asMember: u64;
@@ -1091,25 +1242,35 @@ declare module '@polkadot/types/lookup' {
         readonly asChannel: u64;
         readonly type: 'Member' | 'Channel';
     }
-    /** @name PalletStorageVoucher (143) */
+    /** @name PalletStorageDynBagCreationParametersRecord (156) */
+    interface PalletStorageDynBagCreationParametersRecord extends Struct {
+        readonly bagId: PalletStorageDynamicBagIdType;
+        readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
+        readonly stateBloatBondSourceAccountId: AccountId32;
+        readonly expectedDataSizeFee: u128;
+        readonly expectedDataObjectStateBloatBond: u128;
+        readonly storageBuckets: BTreeSet<u64>;
+        readonly distributionBuckets: BTreeSet<PalletStorageDistributionBucketIdRecord>;
+    }
+    /** @name PalletStorageVoucher (159) */
     interface PalletStorageVoucher extends Struct {
         readonly sizeLimit: u64;
         readonly objectsLimit: u64;
         readonly sizeUsed: u64;
         readonly objectsUsed: u64;
     }
-    /** @name PalletStorageDynamicBagType (144) */
+    /** @name PalletStorageDynamicBagType (160) */
     interface PalletStorageDynamicBagType extends Enum {
         readonly isMember: boolean;
         readonly isChannel: boolean;
         readonly type: 'Member' | 'Channel';
     }
-    /** @name PalletProjectTokenEventsRawEvent (148) */
+    /** @name PalletProjectTokenEventsRawEvent (164) */
     interface PalletProjectTokenEventsRawEvent extends Enum {
         readonly isTokenAmountTransferred: boolean;
-        readonly asTokenAmountTransferred: ITuple<[u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>]>;
+        readonly asTokenAmountTransferred: ITuple<[u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
         readonly isTokenAmountTransferredByIssuer: boolean;
-        readonly asTokenAmountTransferredByIssuer: ITuple<[u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>]>;
+        readonly asTokenAmountTransferredByIssuer: ITuple<[u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
         readonly isPatronageRateDecreasedTo: boolean;
         readonly asPatronageRateDecreasedTo: ITuple<[u64, Perquintill]>;
         readonly isPatronageCreditClaimed: boolean;
@@ -1144,14 +1305,14 @@ declare module '@polkadot/types/lookup' {
         readonly asTokensBurned: ITuple<[u64, u64, u128]>;
         readonly type: 'TokenAmountTransferred' | 'TokenAmountTransferredByIssuer' | 'PatronageRateDecreasedTo' | 'PatronageCreditClaimed' | 'RevenueSplitIssued' | 'RevenueSplitFinalized' | 'UserParticipatedInSplit' | 'RevenueSplitLeft' | 'MemberJoinedWhitelist' | 'AccountDustedBy' | 'TokenDeissued' | 'TokenIssued' | 'TokenSaleInitialized' | 'UpcomingTokenSaleUpdated' | 'TokensPurchasedOnSale' | 'TokenSaleFinalized' | 'TransferPolicyChangedToPermissionless' | 'TokensBurned';
     }
-    /** @name PalletProjectTokenTransferPolicy (149) */
+    /** @name PalletProjectTokenTransferPolicy (165) */
     interface PalletProjectTokenTransferPolicy extends Enum {
         readonly isPermissionless: boolean;
         readonly isPermissioned: boolean;
         readonly asPermissioned: H256;
         readonly type: 'Permissionless' | 'Permissioned';
     }
-    /** @name PalletProjectTokenTokenIssuanceParameters (150) */
+    /** @name PalletProjectTokenTokenIssuanceParameters (166) */
     interface PalletProjectTokenTokenIssuanceParameters extends Struct {
         readonly initialAllocation: BTreeMap<u64, PalletProjectTokenTokenAllocation>;
         readonly symbol: H256;
@@ -1159,36 +1320,36 @@ declare module '@polkadot/types/lookup' {
         readonly patronageRate: Permill;
         readonly revenueSplitRate: Permill;
     }
-    /** @name PalletProjectTokenTokenAllocation (151) */
+    /** @name PalletProjectTokenTokenAllocation (167) */
     interface PalletProjectTokenTokenAllocation extends Struct {
         readonly amount: u128;
         readonly vestingScheduleParams: Option<PalletProjectTokenVestingScheduleParams>;
     }
-    /** @name PalletProjectTokenVestingScheduleParams (152) */
+    /** @name PalletProjectTokenVestingScheduleParams (168) */
     interface PalletProjectTokenVestingScheduleParams extends Struct {
         readonly linearVestingDuration: u32;
         readonly blocksBeforeCliff: u32;
         readonly cliffAmountPercentage: Permill;
     }
-    /** @name PalletProjectTokenTransferPolicyParams (155) */
+    /** @name PalletProjectTokenTransferPolicyParams (171) */
     interface PalletProjectTokenTransferPolicyParams extends Enum {
         readonly isPermissionless: boolean;
         readonly isPermissioned: boolean;
         readonly asPermissioned: PalletProjectTokenWhitelistParams;
         readonly type: 'Permissionless' | 'Permissioned';
     }
-    /** @name PalletProjectTokenWhitelistParams (156) */
+    /** @name PalletProjectTokenWhitelistParams (172) */
     interface PalletProjectTokenWhitelistParams extends Struct {
         readonly commitment: H256;
         readonly payload: Option<PalletProjectTokenSingleDataObjectUploadParams>;
     }
-    /** @name PalletProjectTokenSingleDataObjectUploadParams (157) */
+    /** @name PalletProjectTokenSingleDataObjectUploadParams (173) */
     interface PalletProjectTokenSingleDataObjectUploadParams extends Struct {
         readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
         readonly expectedDataSizeFee: u128;
         readonly expectedDataObjectStateBloatBond: u128;
     }
-    /** @name PalletProjectTokenValidated (164) */
+    /** @name PalletProjectTokenValidated (180) */
     interface PalletProjectTokenValidated extends Enum {
         readonly isExisting: boolean;
         readonly asExisting: u64;
@@ -1196,18 +1357,17 @@ declare module '@polkadot/types/lookup' {
         readonly asNonExisting: u64;
         readonly type: 'Existing' | 'NonExisting';
     }
-    /** @name PalletProjectTokenValidatedPayment (165) */
+    /** @name PalletProjectTokenValidatedPayment (181) */
     interface PalletProjectTokenValidatedPayment extends Struct {
         readonly payment: PalletProjectTokenPaymentWithVesting;
         readonly vestingCleanupCandidate: Option<PalletProjectTokenVestingSource>;
     }
-    /** @name PalletProjectTokenPaymentWithVesting (166) */
+    /** @name PalletProjectTokenPaymentWithVesting (182) */
     interface PalletProjectTokenPaymentWithVesting extends Struct {
-        readonly remark: Bytes;
         readonly amount: u128;
         readonly vestingSchedule: Option<PalletProjectTokenVestingScheduleParams>;
     }
-    /** @name PalletProjectTokenVestingSource (168) */
+    /** @name PalletProjectTokenVestingSource (184) */
     interface PalletProjectTokenVestingSource extends Enum {
         readonly isInitialIssuance: boolean;
         readonly isSale: boolean;
@@ -1216,7 +1376,7 @@ declare module '@polkadot/types/lookup' {
         readonly asIssuerTransfer: u64;
         readonly type: 'InitialIssuance' | 'Sale' | 'IssuerTransfer';
     }
-    /** @name PalletProjectTokenTokenSale (172) */
+    /** @name PalletProjectTokenTokenSale (188) */
     interface PalletProjectTokenTokenSale extends Struct {
         readonly unitPrice: u128;
         readonly quantityLeft: u128;
@@ -1229,7 +1389,7 @@ declare module '@polkadot/types/lookup' {
         readonly capPerMember: Option<u128>;
         readonly autoFinalize: bool;
     }
-    /** @name PalletProposalsEngineRawEvent (174) */
+    /** @name PalletProposalsEngineRawEvent (190) */
     interface PalletProposalsEngineRawEvent extends Enum {
         readonly isProposalStatusUpdated: boolean;
         readonly asProposalStatusUpdated: ITuple<[u32, PalletProposalsEngineProposalStatusesProposalStatus]>;
@@ -1245,7 +1405,7 @@ declare module '@polkadot/types/lookup' {
         readonly asProposerRemarked: ITuple<[u64, u32, Bytes]>;
         readonly type: 'ProposalStatusUpdated' | 'ProposalDecisionMade' | 'ProposalExecuted' | 'Voted' | 'ProposalCancelled' | 'ProposerRemarked';
     }
-    /** @name PalletProposalsEngineProposalStatusesProposalStatus (175) */
+    /** @name PalletProposalsEngineProposalStatusesProposalStatus (191) */
     interface PalletProposalsEngineProposalStatusesProposalStatus extends Enum {
         readonly isActive: boolean;
         readonly isPendingExecution: boolean;
@@ -1253,7 +1413,7 @@ declare module '@polkadot/types/lookup' {
         readonly isPendingConstitutionality: boolean;
         readonly type: 'Active' | 'PendingExecution' | 'PendingConstitutionality';
     }
-    /** @name PalletProposalsEngineProposalStatusesProposalDecision (176) */
+    /** @name PalletProposalsEngineProposalStatusesProposalDecision (192) */
     interface PalletProposalsEngineProposalStatusesProposalDecision extends Enum {
         readonly isCanceled: boolean;
         readonly isCanceledByRuntime: boolean;
@@ -1265,13 +1425,13 @@ declare module '@polkadot/types/lookup' {
         readonly asApproved: PalletProposalsEngineProposalStatusesApprovedProposalDecision;
         readonly type: 'Canceled' | 'CanceledByRuntime' | 'Vetoed' | 'Rejected' | 'Slashed' | 'Expired' | 'Approved';
     }
-    /** @name PalletProposalsEngineProposalStatusesApprovedProposalDecision (177) */
+    /** @name PalletProposalsEngineProposalStatusesApprovedProposalDecision (193) */
     interface PalletProposalsEngineProposalStatusesApprovedProposalDecision extends Enum {
         readonly isPendingExecution: boolean;
         readonly isPendingConstitutionality: boolean;
         readonly type: 'PendingExecution' | 'PendingConstitutionality';
     }
-    /** @name PalletProposalsEngineProposalStatusesExecutionStatus (178) */
+    /** @name PalletProposalsEngineProposalStatusesExecutionStatus (194) */
     interface PalletProposalsEngineProposalStatusesExecutionStatus extends Enum {
         readonly isExecuted: boolean;
         readonly isExecutionFailed: boolean;
@@ -1280,7 +1440,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Executed' | 'ExecutionFailed';
     }
-    /** @name PalletProposalsEngineVoteKind (179) */
+    /** @name PalletProposalsEngineVoteKind (195) */
     interface PalletProposalsEngineVoteKind extends Enum {
         readonly isApprove: boolean;
         readonly isReject: boolean;
@@ -1288,7 +1448,7 @@ declare module '@polkadot/types/lookup' {
         readonly isAbstain: boolean;
         readonly type: 'Approve' | 'Reject' | 'Slash' | 'Abstain';
     }
-    /** @name PalletProposalsDiscussionRawEvent (180) */
+    /** @name PalletProposalsDiscussionRawEvent (196) */
     interface PalletProposalsDiscussionRawEvent extends Enum {
         readonly isThreadCreated: boolean;
         readonly asThreadCreated: ITuple<[u64, u64]>;
@@ -1302,20 +1462,20 @@ declare module '@polkadot/types/lookup' {
         readonly asPostDeleted: ITuple<[u64, u64, u64, bool]>;
         readonly type: 'ThreadCreated' | 'PostCreated' | 'PostUpdated' | 'ThreadModeChanged' | 'PostDeleted';
     }
-    /** @name PalletProposalsDiscussionThreadMode (181) */
+    /** @name PalletProposalsDiscussionThreadMode (197) */
     interface PalletProposalsDiscussionThreadMode extends Enum {
         readonly isOpen: boolean;
         readonly isClosed: boolean;
         readonly asClosed: Vec<u64>;
         readonly type: 'Open' | 'Closed';
     }
-    /** @name PalletProposalsCodexRawEvent (182) */
+    /** @name PalletProposalsCodexRawEvent (198) */
     interface PalletProposalsCodexRawEvent extends Enum {
         readonly isProposalCreated: boolean;
         readonly asProposalCreated: ITuple<[u32, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, u64]>;
         readonly type: 'ProposalCreated';
     }
-    /** @name PalletProposalsCodexGeneralProposalParams (183) */
+    /** @name PalletProposalsCodexGeneralProposalParams (199) */
     interface PalletProposalsCodexGeneralProposalParams extends Struct {
         readonly memberId: u64;
         readonly title: Bytes;
@@ -1323,7 +1483,7 @@ declare module '@polkadot/types/lookup' {
         readonly stakingAccountId: Option<AccountId32>;
         readonly exactExecutionBlock: Option<u32>;
     }
-    /** @name PalletProposalsCodexProposalDetails (184) */
+    /** @name PalletProposalsCodexProposalDetails (200) */
     interface PalletProposalsCodexProposalDetails extends Enum {
         readonly isSignal: boolean;
         readonly asSignal: Bytes;
@@ -1373,36 +1533,36 @@ declare module '@polkadot/types/lookup' {
         readonly asUpdateChannelPayouts: PalletContentUpdateChannelPayoutsParametersRecord;
         readonly type: 'Signal' | 'RuntimeUpgrade' | 'FundingRequest' | 'SetMaxValidatorCount' | 'CreateWorkingGroupLeadOpening' | 'FillWorkingGroupLeadOpening' | 'UpdateWorkingGroupBudget' | 'DecreaseWorkingGroupLeadStake' | 'SlashWorkingGroupLead' | 'SetWorkingGroupLeadReward' | 'TerminateWorkingGroupLead' | 'AmendConstitution' | 'CancelWorkingGroupLeadOpening' | 'SetMembershipPrice' | 'SetCouncilBudgetIncrement' | 'SetCouncilorReward' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'SetMembershipLeadInvitationQuota' | 'SetReferralCut' | 'VetoProposal' | 'UpdateGlobalNftLimit' | 'UpdateChannelPayouts';
     }
-    /** @name PalletCommonFundingRequestParameters (186) */
+    /** @name PalletCommonFundingRequestParameters (202) */
     interface PalletCommonFundingRequestParameters extends Struct {
         readonly account: AccountId32;
         readonly amount: u128;
     }
-    /** @name PalletProposalsCodexCreateOpeningParameters (187) */
+    /** @name PalletProposalsCodexCreateOpeningParameters (203) */
     interface PalletProposalsCodexCreateOpeningParameters extends Struct {
         readonly description: Bytes;
         readonly stakePolicy: PalletWorkingGroupStakePolicy;
         readonly rewardPerBlock: Option<u128>;
         readonly group: PalletCommonWorkingGroup;
     }
-    /** @name PalletWorkingGroupStakePolicy (188) */
+    /** @name PalletWorkingGroupStakePolicy (204) */
     interface PalletWorkingGroupStakePolicy extends Struct {
         readonly stakeAmount: u128;
         readonly leavingUnstakingPeriod: u32;
     }
-    /** @name PalletProposalsCodexFillOpeningParameters (189) */
+    /** @name PalletProposalsCodexFillOpeningParameters (205) */
     interface PalletProposalsCodexFillOpeningParameters extends Struct {
         readonly openingId: u64;
         readonly applicationId: u64;
         readonly workingGroup: PalletCommonWorkingGroup;
     }
-    /** @name PalletProposalsCodexTerminateRoleParameters (190) */
+    /** @name PalletProposalsCodexTerminateRoleParameters (206) */
     interface PalletProposalsCodexTerminateRoleParameters extends Struct {
         readonly workerId: u64;
         readonly slashingAmount: Option<u128>;
         readonly group: PalletCommonWorkingGroup;
     }
-    /** @name PalletWorkingGroupRawEventInstance1 (191) */
+    /** @name PalletWorkingGroupRawEventInstance1 (207) */
     interface PalletWorkingGroupRawEventInstance1 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1457,13 +1617,13 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupOpeningType (195) */
+    /** @name PalletWorkingGroupOpeningType (211) */
     interface PalletWorkingGroupOpeningType extends Enum {
         readonly isLeader: boolean;
         readonly isRegular: boolean;
         readonly type: 'Leader' | 'Regular';
     }
-    /** @name PalletWorkingGroupApplyOnOpeningParams (196) */
+    /** @name PalletWorkingGroupApplyOnOpeningParams (212) */
     interface PalletWorkingGroupApplyOnOpeningParams extends Struct {
         readonly memberId: u64;
         readonly openingId: u64;
@@ -1472,20 +1632,20 @@ declare module '@polkadot/types/lookup' {
         readonly description: Bytes;
         readonly stakeParameters: PalletWorkingGroupStakeParameters;
     }
-    /** @name PalletWorkingGroupStakeParameters (197) */
+    /** @name PalletWorkingGroupStakeParameters (213) */
     interface PalletWorkingGroupStakeParameters extends Struct {
         readonly stake: u128;
         readonly stakingAccountId: AccountId32;
     }
-    /** @name PalletWorkingGroupInstance1 (198) */
+    /** @name PalletWorkingGroupInstance1 (214) */
     type PalletWorkingGroupInstance1 = Null;
-    /** @name PalletWorkingGroupRewardPaymentType (199) */
+    /** @name PalletWorkingGroupRewardPaymentType (215) */
     interface PalletWorkingGroupRewardPaymentType extends Enum {
         readonly isMissedReward: boolean;
         readonly isRegularReward: boolean;
         readonly type: 'MissedReward' | 'RegularReward';
     }
-    /** @name PalletWorkingGroupRawEventInstance2 (200) */
+    /** @name PalletWorkingGroupRawEventInstance2 (216) */
     interface PalletWorkingGroupRawEventInstance2 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1540,9 +1700,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance2 (201) */
+    /** @name PalletWorkingGroupInstance2 (217) */
     type PalletWorkingGroupInstance2 = Null;
-    /** @name PalletWorkingGroupRawEventInstance3 (202) */
+    /** @name PalletWorkingGroupRawEventInstance3 (218) */
     interface PalletWorkingGroupRawEventInstance3 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1597,9 +1757,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance3 (203) */
+    /** @name PalletWorkingGroupInstance3 (219) */
     type PalletWorkingGroupInstance3 = Null;
-    /** @name PalletWorkingGroupRawEventInstance4 (204) */
+    /** @name PalletWorkingGroupRawEventInstance4 (220) */
     interface PalletWorkingGroupRawEventInstance4 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1654,9 +1814,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance4 (205) */
+    /** @name PalletWorkingGroupInstance4 (221) */
     type PalletWorkingGroupInstance4 = Null;
-    /** @name PalletWorkingGroupRawEventInstance5 (206) */
+    /** @name PalletWorkingGroupRawEventInstance5 (222) */
     interface PalletWorkingGroupRawEventInstance5 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1711,9 +1871,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance5 (207) */
+    /** @name PalletWorkingGroupInstance5 (223) */
     type PalletWorkingGroupInstance5 = Null;
-    /** @name PalletWorkingGroupRawEventInstance6 (208) */
+    /** @name PalletWorkingGroupRawEventInstance6 (224) */
     interface PalletWorkingGroupRawEventInstance6 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1768,9 +1928,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance6 (209) */
+    /** @name PalletWorkingGroupInstance6 (225) */
     type PalletWorkingGroupInstance6 = Null;
-    /** @name PalletWorkingGroupRawEventInstance7 (210) */
+    /** @name PalletWorkingGroupRawEventInstance7 (226) */
     interface PalletWorkingGroupRawEventInstance7 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1825,9 +1985,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance7 (211) */
+    /** @name PalletWorkingGroupInstance7 (227) */
     type PalletWorkingGroupInstance7 = Null;
-    /** @name PalletWorkingGroupRawEventInstance8 (212) */
+    /** @name PalletWorkingGroupRawEventInstance8 (228) */
     interface PalletWorkingGroupRawEventInstance8 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1882,9 +2042,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance8 (213) */
+    /** @name PalletWorkingGroupInstance8 (229) */
     type PalletWorkingGroupInstance8 = Null;
-    /** @name PalletWorkingGroupRawEventInstance9 (214) */
+    /** @name PalletWorkingGroupRawEventInstance9 (230) */
     interface PalletWorkingGroupRawEventInstance9 extends Enum {
         readonly isOpeningAdded: boolean;
         readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1939,9 +2099,9 @@ declare module '@polkadot/types/lookup' {
         readonly asWorkerRemarked: ITuple<[u64, Bytes]>;
         readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
     }
-    /** @name PalletWorkingGroupInstance9 (215) */
+    /** @name PalletWorkingGroupInstance9 (231) */
     type PalletWorkingGroupInstance9 = Null;
-    /** @name FrameSystemPhase (216) */
+    /** @name FrameSystemPhase (232) */
     interface FrameSystemPhase extends Enum {
         readonly isApplyExtrinsic: boolean;
         readonly asApplyExtrinsic: u32;
@@ -1949,12 +2109,12 @@ declare module '@polkadot/types/lookup' {
         readonly isInitialization: boolean;
         readonly type: 'ApplyExtrinsic' | 'Finalization' | 'Initialization';
     }
-    /** @name FrameSystemLastRuntimeUpgradeInfo (220) */
+    /** @name FrameSystemLastRuntimeUpgradeInfo (236) */
     interface FrameSystemLastRuntimeUpgradeInfo extends Struct {
         readonly specVersion: Compact<u32>;
         readonly specName: Text;
     }
-    /** @name FrameSystemCall (223) */
+    /** @name FrameSystemCall (239) */
     interface FrameSystemCall extends Enum {
         readonly isFillBlock: boolean;
         readonly asFillBlock: {
@@ -1995,41 +2155,41 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'FillBlock' | 'Remark' | 'SetHeapPages' | 'SetCode' | 'SetCodeWithoutChecks' | 'SetStorage' | 'KillStorage' | 'KillPrefix' | 'RemarkWithEvent';
     }
-    /** @name FrameSystemLimitsBlockWeights (226) */
+    /** @name FrameSystemLimitsBlockWeights (242) */
     interface FrameSystemLimitsBlockWeights extends Struct {
         readonly baseBlock: u64;
         readonly maxBlock: u64;
         readonly perClass: FrameSupportWeightsPerDispatchClassWeightsPerClass;
     }
-    /** @name FrameSupportWeightsPerDispatchClassWeightsPerClass (227) */
+    /** @name FrameSupportWeightsPerDispatchClassWeightsPerClass (243) */
     interface FrameSupportWeightsPerDispatchClassWeightsPerClass extends Struct {
         readonly normal: FrameSystemLimitsWeightsPerClass;
         readonly operational: FrameSystemLimitsWeightsPerClass;
         readonly mandatory: FrameSystemLimitsWeightsPerClass;
     }
-    /** @name FrameSystemLimitsWeightsPerClass (228) */
+    /** @name FrameSystemLimitsWeightsPerClass (244) */
     interface FrameSystemLimitsWeightsPerClass extends Struct {
         readonly baseExtrinsic: u64;
         readonly maxExtrinsic: Option<u64>;
         readonly maxTotal: Option<u64>;
         readonly reserved: Option<u64>;
     }
-    /** @name FrameSystemLimitsBlockLength (229) */
+    /** @name FrameSystemLimitsBlockLength (245) */
     interface FrameSystemLimitsBlockLength extends Struct {
         readonly max: FrameSupportWeightsPerDispatchClassU32;
     }
-    /** @name FrameSupportWeightsPerDispatchClassU32 (230) */
+    /** @name FrameSupportWeightsPerDispatchClassU32 (246) */
     interface FrameSupportWeightsPerDispatchClassU32 extends Struct {
         readonly normal: u32;
         readonly operational: u32;
         readonly mandatory: u32;
     }
-    /** @name FrameSupportWeightsRuntimeDbWeight (231) */
+    /** @name FrameSupportWeightsRuntimeDbWeight (247) */
     interface FrameSupportWeightsRuntimeDbWeight extends Struct {
         readonly read: u64;
         readonly write: u64;
     }
-    /** @name SpVersionRuntimeVersion (232) */
+    /** @name SpVersionRuntimeVersion (248) */
     interface SpVersionRuntimeVersion extends Struct {
         readonly specName: Text;
         readonly implName: Text;
@@ -2040,7 +2200,7 @@ declare module '@polkadot/types/lookup' {
         readonly transactionVersion: u32;
         readonly stateVersion: u8;
     }
-    /** @name FrameSystemError (238) */
+    /** @name FrameSystemError (254) */
     interface FrameSystemError extends Enum {
         readonly isInvalidSpecName: boolean;
         readonly isSpecVersionNeedsToIncrease: boolean;
@@ -2050,7 +2210,7 @@ declare module '@polkadot/types/lookup' {
         readonly isCallFiltered: boolean;
         readonly type: 'InvalidSpecName' | 'SpecVersionNeedsToIncrease' | 'FailedToExtractRuntimeVersion' | 'NonDefaultComposite' | 'NonZeroRefCount' | 'CallFiltered';
     }
-    /** @name PalletUtilityCall (239) */
+    /** @name PalletUtilityCall (255) */
     interface PalletUtilityCall extends Enum {
         readonly isBatch: boolean;
         readonly asBatch: {
@@ -2076,7 +2236,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Batch' | 'AsDerivative' | 'BatchAll' | 'DispatchAs' | 'ForceBatch';
     }
-    /** @name PalletBabeCall (242) */
+    /** @name PalletBabeCall (258) */
     interface PalletBabeCall extends Enum {
         readonly isReportEquivocation: boolean;
         readonly asReportEquivocation: {
@@ -2094,14 +2254,14 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'PlanConfigChange';
     }
-    /** @name SpConsensusSlotsEquivocationProof (243) */
+    /** @name SpConsensusSlotsEquivocationProof (259) */
     interface SpConsensusSlotsEquivocationProof extends Struct {
         readonly offender: SpConsensusBabeAppPublic;
         readonly slot: u64;
         readonly firstHeader: SpRuntimeHeader;
         readonly secondHeader: SpRuntimeHeader;
     }
-    /** @name SpRuntimeHeader (244) */
+    /** @name SpRuntimeHeader (260) */
     interface SpRuntimeHeader extends Struct {
         readonly parentHash: H256;
         readonly number: Compact<u32>;
@@ -2109,18 +2269,18 @@ declare module '@polkadot/types/lookup' {
         readonly extrinsicsRoot: H256;
         readonly digest: SpRuntimeDigest;
     }
-    /** @name SpRuntimeBlakeTwo256 (245) */
+    /** @name SpRuntimeBlakeTwo256 (261) */
     type SpRuntimeBlakeTwo256 = Null;
-    /** @name SpConsensusBabeAppPublic (246) */
+    /** @name SpConsensusBabeAppPublic (262) */
     interface SpConsensusBabeAppPublic extends SpCoreSr25519Public {
     }
-    /** @name SpSessionMembershipProof (248) */
+    /** @name SpSessionMembershipProof (264) */
     interface SpSessionMembershipProof extends Struct {
         readonly session: u32;
         readonly trieNodes: Vec<Bytes>;
         readonly validatorCount: u32;
     }
-    /** @name SpConsensusBabeDigestsNextConfigDescriptor (249) */
+    /** @name SpConsensusBabeDigestsNextConfigDescriptor (265) */
     interface SpConsensusBabeDigestsNextConfigDescriptor extends Enum {
         readonly isV1: boolean;
         readonly asV1: {
@@ -2129,14 +2289,14 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'V1';
     }
-    /** @name SpConsensusBabeAllowedSlots (250) */
+    /** @name SpConsensusBabeAllowedSlots (266) */
     interface SpConsensusBabeAllowedSlots extends Enum {
         readonly isPrimarySlots: boolean;
         readonly isPrimaryAndSecondaryPlainSlots: boolean;
         readonly isPrimaryAndSecondaryVRFSlots: boolean;
         readonly type: 'PrimarySlots' | 'PrimaryAndSecondaryPlainSlots' | 'PrimaryAndSecondaryVRFSlots';
     }
-    /** @name PalletTimestampCall (251) */
+    /** @name PalletTimestampCall (267) */
     interface PalletTimestampCall extends Enum {
         readonly isSet: boolean;
         readonly asSet: {
@@ -2144,7 +2304,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Set';
     }
-    /** @name PalletAuthorshipCall (253) */
+    /** @name PalletAuthorshipCall (269) */
     interface PalletAuthorshipCall extends Enum {
         readonly isSetUncles: boolean;
         readonly asSetUncles: {
@@ -2152,7 +2312,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'SetUncles';
     }
-    /** @name PalletBalancesCall (255) */
+    /** @name PalletBalancesCall (271) */
     interface PalletBalancesCall extends Enum {
         readonly isTransfer: boolean;
         readonly asTransfer: {
@@ -2188,7 +2348,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Transfer' | 'SetBalance' | 'ForceTransfer' | 'TransferKeepAlive' | 'TransferAll' | 'ForceUnreserve';
     }
-    /** @name PalletElectionProviderMultiPhaseCall (256) */
+    /** @name PalletElectionProviderMultiPhaseCall (272) */
     interface PalletElectionProviderMultiPhaseCall extends Enum {
         readonly isSubmitUnsigned: boolean;
         readonly asSubmitUnsigned: {
@@ -2214,13 +2374,13 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'SubmitUnsigned' | 'SetMinimumUntrustedScore' | 'SetEmergencyElectionResult' | 'Submit' | 'GovernanceFallback';
     }
-    /** @name PalletElectionProviderMultiPhaseRawSolution (257) */
+    /** @name PalletElectionProviderMultiPhaseRawSolution (273) */
     interface PalletElectionProviderMultiPhaseRawSolution extends Struct {
         readonly solution: JoystreamNodeRuntimeNposSolution16;
         readonly score: SpNposElectionsElectionScore;
         readonly round: u32;
     }
-    /** @name JoystreamNodeRuntimeNposSolution16 (258) */
+    /** @name JoystreamNodeRuntimeNposSolution16 (274) */
     interface JoystreamNodeRuntimeNposSolution16 extends Struct {
         readonly votes1: Vec<ITuple<[Compact<u32>, Compact<u16>]>>;
         readonly votes2: Vec<ITuple<[Compact<u32>, ITuple<[Compact<u16>, Compact<PerU16>]>, Compact<u16>]>>;
@@ -2239,23 +2399,23 @@ declare module '@polkadot/types/lookup' {
         readonly votes15: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
         readonly votes16: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
     }
-    /** @name SpNposElectionsElectionScore (309) */
+    /** @name SpNposElectionsElectionScore (325) */
     interface SpNposElectionsElectionScore extends Struct {
         readonly minimalStake: u128;
         readonly sumStake: u128;
         readonly sumStakeSquared: u128;
     }
-    /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (310) */
+    /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (326) */
     interface PalletElectionProviderMultiPhaseSolutionOrSnapshotSize extends Struct {
         readonly voters: Compact<u32>;
         readonly targets: Compact<u32>;
     }
-    /** @name SpNposElectionsSupport (314) */
+    /** @name SpNposElectionsSupport (330) */
     interface SpNposElectionsSupport extends Struct {
         readonly total: u128;
         readonly voters: Vec<ITuple<[AccountId32, u128]>>;
     }
-    /** @name PalletStakingPalletCall (317) */
+    /** @name PalletStakingPalletCall (333) */
     interface PalletStakingPalletCall extends Enum {
         readonly isBond: boolean;
         readonly asBond: {
@@ -2363,7 +2523,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Bond' | 'BondExtra' | 'Unbond' | 'WithdrawUnbonded' | 'Validate' | 'Nominate' | 'Chill' | 'SetPayee' | 'SetController' | 'SetValidatorCount' | 'IncreaseValidatorCount' | 'ScaleValidatorCount' | 'ForceNoEras' | 'ForceNewEra' | 'SetInvulnerables' | 'ForceUnstake' | 'ForceNewEraAlways' | 'CancelDeferredSlash' | 'PayoutStakers' | 'Rebond' | 'SetHistoryDepth' | 'ReapStash' | 'Kick' | 'SetStakingConfigs' | 'ChillOther' | 'ForceApplyMinCommission';
     }
-    /** @name PalletStakingRewardDestination (318) */
+    /** @name PalletStakingRewardDestination (334) */
     interface PalletStakingRewardDestination extends Enum {
         readonly isStaked: boolean;
         readonly isStash: boolean;
@@ -2373,7 +2533,7 @@ declare module '@polkadot/types/lookup' {
         readonly isNone: boolean;
         readonly type: 'Staked' | 'Stash' | 'Controller' | 'Account' | 'None';
     }
-    /** @name PalletStakingPalletConfigOpU128 (322) */
+    /** @name PalletStakingPalletConfigOpU128 (338) */
     interface PalletStakingPalletConfigOpU128 extends Enum {
         readonly isNoop: boolean;
         readonly isSet: boolean;
@@ -2381,7 +2541,7 @@ declare module '@polkadot/types/lookup' {
         readonly isRemove: boolean;
         readonly type: 'Noop' | 'Set' | 'Remove';
     }
-    /** @name PalletStakingPalletConfigOpU32 (323) */
+    /** @name PalletStakingPalletConfigOpU32 (339) */
     interface PalletStakingPalletConfigOpU32 extends Enum {
         readonly isNoop: boolean;
         readonly isSet: boolean;
@@ -2389,7 +2549,7 @@ declare module '@polkadot/types/lookup' {
         readonly isRemove: boolean;
         readonly type: 'Noop' | 'Set' | 'Remove';
     }
-    /** @name PalletStakingPalletConfigOpPercent (324) */
+    /** @name PalletStakingPalletConfigOpPercent (340) */
     interface PalletStakingPalletConfigOpPercent extends Enum {
         readonly isNoop: boolean;
         readonly isSet: boolean;
@@ -2397,7 +2557,7 @@ declare module '@polkadot/types/lookup' {
         readonly isRemove: boolean;
         readonly type: 'Noop' | 'Set' | 'Remove';
     }
-    /** @name PalletStakingPalletConfigOpPerbill (325) */
+    /** @name PalletStakingPalletConfigOpPerbill (341) */
     interface PalletStakingPalletConfigOpPerbill extends Enum {
         readonly isNoop: boolean;
         readonly isSet: boolean;
@@ -2405,7 +2565,7 @@ declare module '@polkadot/types/lookup' {
         readonly isRemove: boolean;
         readonly type: 'Noop' | 'Set' | 'Remove';
     }
-    /** @name PalletSessionCall (326) */
+    /** @name PalletSessionCall (342) */
     interface PalletSessionCall extends Enum {
         readonly isSetKeys: boolean;
         readonly asSetKeys: {
@@ -2415,17 +2575,17 @@ declare module '@polkadot/types/lookup' {
         readonly isPurgeKeys: boolean;
         readonly type: 'SetKeys' | 'PurgeKeys';
     }
-    /** @name JoystreamNodeRuntimeSessionKeys (327) */
+    /** @name JoystreamNodeRuntimeSessionKeys (343) */
     interface JoystreamNodeRuntimeSessionKeys extends Struct {
         readonly grandpa: SpFinalityGrandpaAppPublic;
         readonly babe: SpConsensusBabeAppPublic;
         readonly imOnline: PalletImOnlineSr25519AppSr25519Public;
         readonly authorityDiscovery: SpAuthorityDiscoveryAppPublic;
     }
-    /** @name SpAuthorityDiscoveryAppPublic (328) */
+    /** @name SpAuthorityDiscoveryAppPublic (344) */
     interface SpAuthorityDiscoveryAppPublic extends SpCoreSr25519Public {
     }
-    /** @name PalletGrandpaCall (329) */
+    /** @name PalletGrandpaCall (345) */
     interface PalletGrandpaCall extends Enum {
         readonly isReportEquivocation: boolean;
         readonly asReportEquivocation: {
@@ -2444,12 +2604,12 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'NoteStalled';
     }
-    /** @name SpFinalityGrandpaEquivocationProof (330) */
+    /** @name SpFinalityGrandpaEquivocationProof (346) */
     interface SpFinalityGrandpaEquivocationProof extends Struct {
         readonly setId: u64;
         readonly equivocation: SpFinalityGrandpaEquivocation;
     }
-    /** @name SpFinalityGrandpaEquivocation (331) */
+    /** @name SpFinalityGrandpaEquivocation (347) */
     interface SpFinalityGrandpaEquivocation extends Enum {
         readonly isPrevote: boolean;
         readonly asPrevote: FinalityGrandpaEquivocationPrevote;
@@ -2457,37 +2617,37 @@ declare module '@polkadot/types/lookup' {
         readonly asPrecommit: FinalityGrandpaEquivocationPrecommit;
         readonly type: 'Prevote' | 'Precommit';
     }
-    /** @name FinalityGrandpaEquivocationPrevote (332) */
+    /** @name FinalityGrandpaEquivocationPrevote (348) */
     interface FinalityGrandpaEquivocationPrevote extends Struct {
         readonly roundNumber: u64;
         readonly identity: SpFinalityGrandpaAppPublic;
         readonly first: ITuple<[FinalityGrandpaPrevote, SpFinalityGrandpaAppSignature]>;
         readonly second: ITuple<[FinalityGrandpaPrevote, SpFinalityGrandpaAppSignature]>;
     }
-    /** @name FinalityGrandpaPrevote (333) */
+    /** @name FinalityGrandpaPrevote (349) */
     interface FinalityGrandpaPrevote extends Struct {
         readonly targetHash: H256;
         readonly targetNumber: u32;
     }
-    /** @name SpFinalityGrandpaAppSignature (334) */
+    /** @name SpFinalityGrandpaAppSignature (350) */
     interface SpFinalityGrandpaAppSignature extends SpCoreEd25519Signature {
     }
-    /** @name SpCoreEd25519Signature (335) */
+    /** @name SpCoreEd25519Signature (351) */
     interface SpCoreEd25519Signature extends U8aFixed {
     }
-    /** @name FinalityGrandpaEquivocationPrecommit (338) */
+    /** @name FinalityGrandpaEquivocationPrecommit (354) */
     interface FinalityGrandpaEquivocationPrecommit extends Struct {
         readonly roundNumber: u64;
         readonly identity: SpFinalityGrandpaAppPublic;
         readonly first: ITuple<[FinalityGrandpaPrecommit, SpFinalityGrandpaAppSignature]>;
         readonly second: ITuple<[FinalityGrandpaPrecommit, SpFinalityGrandpaAppSignature]>;
     }
-    /** @name FinalityGrandpaPrecommit (339) */
+    /** @name FinalityGrandpaPrecommit (355) */
     interface FinalityGrandpaPrecommit extends Struct {
         readonly targetHash: H256;
         readonly targetNumber: u32;
     }
-    /** @name PalletImOnlineCall (341) */
+    /** @name PalletImOnlineCall (357) */
     interface PalletImOnlineCall extends Enum {
         readonly isHeartbeat: boolean;
         readonly asHeartbeat: {
@@ -2496,7 +2656,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Heartbeat';
     }
-    /** @name PalletImOnlineHeartbeat (342) */
+    /** @name PalletImOnlineHeartbeat (358) */
     interface PalletImOnlineHeartbeat extends Struct {
         readonly blockNumber: u32;
         readonly networkState: SpCoreOffchainOpaqueNetworkState;
@@ -2504,18 +2664,18 @@ declare module '@polkadot/types/lookup' {
         readonly authorityIndex: u32;
         readonly validatorsLen: u32;
     }
-    /** @name SpCoreOffchainOpaqueNetworkState (343) */
+    /** @name SpCoreOffchainOpaqueNetworkState (359) */
     interface SpCoreOffchainOpaqueNetworkState extends Struct {
         readonly peerId: Bytes;
         readonly externalAddresses: Vec<Bytes>;
     }
-    /** @name PalletImOnlineSr25519AppSr25519Signature (347) */
+    /** @name PalletImOnlineSr25519AppSr25519Signature (363) */
     interface PalletImOnlineSr25519AppSr25519Signature extends SpCoreSr25519Signature {
     }
-    /** @name SpCoreSr25519Signature (348) */
+    /** @name SpCoreSr25519Signature (364) */
     interface SpCoreSr25519Signature extends U8aFixed {
     }
-    /** @name PalletSudoCall (349) */
+    /** @name PalletSudoCall (365) */
     interface PalletSudoCall extends Enum {
         readonly isSudo: boolean;
         readonly asSudo: {
@@ -2537,7 +2697,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Sudo' | 'SudoUncheckedWeight' | 'SetKey' | 'SudoAs';
     }
-    /** @name PalletBagsListCall (350) */
+    /** @name PalletBagsListCall (366) */
     interface PalletBagsListCall extends Enum {
         readonly isRebag: boolean;
         readonly asRebag: {
@@ -2549,7 +2709,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Rebag' | 'PutInFrontOf';
     }
-    /** @name PalletVestingCall (351) */
+    /** @name PalletVestingCall (367) */
     interface PalletVestingCall extends Enum {
         readonly isVest: boolean;
         readonly isVestOther: boolean;
@@ -2574,13 +2734,46 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Vest' | 'VestOther' | 'VestedTransfer' | 'ForceVestedTransfer' | 'MergeSchedules';
     }
-    /** @name PalletVestingVestingInfo (352) */
+    /** @name PalletVestingVestingInfo (368) */
     interface PalletVestingVestingInfo extends Struct {
         readonly locked: u128;
         readonly perBlock: u128;
         readonly startingBlock: u32;
     }
-    /** @name PalletCouncilCall (353) */
+    /** @name PalletMultisigCall (369) */
+    interface PalletMultisigCall extends Enum {
+        readonly isAsMultiThreshold1: boolean;
+        readonly asAsMultiThreshold1: {
+            readonly otherSignatories: Vec<AccountId32>;
+            readonly call: Call;
+        } & Struct;
+        readonly isAsMulti: boolean;
+        readonly asAsMulti: {
+            readonly threshold: u16;
+            readonly otherSignatories: Vec<AccountId32>;
+            readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
+            readonly call: WrapperKeepOpaque<Call>;
+            readonly storeCall: bool;
+            readonly maxWeight: u64;
+        } & Struct;
+        readonly isApproveAsMulti: boolean;
+        readonly asApproveAsMulti: {
+            readonly threshold: u16;
+            readonly otherSignatories: Vec<AccountId32>;
+            readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
+            readonly callHash: U8aFixed;
+            readonly maxWeight: u64;
+        } & Struct;
+        readonly isCancelAsMulti: boolean;
+        readonly asCancelAsMulti: {
+            readonly threshold: u16;
+            readonly otherSignatories: Vec<AccountId32>;
+            readonly timepoint: PalletMultisigTimepoint;
+            readonly callHash: U8aFixed;
+        } & Struct;
+        readonly type: 'AsMultiThreshold1' | 'AsMulti' | 'ApproveAsMulti' | 'CancelAsMulti';
+    }
+    /** @name PalletCouncilCall (372) */
     interface PalletCouncilCall extends Enum {
         readonly isAnnounceCandidacy: boolean;
         readonly asAnnounceCandidacy: {
@@ -2640,7 +2833,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'AnnounceCandidacy' | 'ReleaseCandidacyStake' | 'WithdrawCandidacy' | 'SetCandidacyNote' | 'SetBudget' | 'PlanBudgetRefill' | 'SetBudgetIncrement' | 'SetCouncilorReward' | 'FundingRequest' | 'FundCouncilBudget' | 'CouncilorRemark' | 'CandidateRemark';
     }
-    /** @name PalletReferendumCall (354) */
+    /** @name PalletReferendumCall (373) */
     interface PalletReferendumCall extends Enum {
         readonly isVote: boolean;
         readonly asVote: {
@@ -2655,7 +2848,7 @@ declare module '@polkadot/types/lookup' {
         readonly isReleaseVoteStake: boolean;
         readonly type: 'Vote' | 'RevealVote' | 'ReleaseVoteStake';
     }
-    /** @name PalletMembershipCall (355) */
+    /** @name PalletMembershipCall (374) */
     interface PalletMembershipCall extends Enum {
         readonly isBuyMembership: boolean;
         readonly asBuyMembership: {
@@ -2737,7 +2930,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'BuyMembership' | 'UpdateProfile' | 'UpdateAccounts' | 'UpdateProfileVerification' | 'SetReferralCut' | 'TransferInvites' | 'InviteMember' | 'GiftMembership' | 'SetMembershipPrice' | 'SetLeaderInvitationQuota' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'AddStakingAccountCandidate' | 'RemoveStakingAccount' | 'ConfirmStakingAccount' | 'MemberRemark' | 'CreateFoundingMember';
     }
-    /** @name PalletForumCall (356) */
+    /** @name PalletForumCall (375) */
     interface PalletForumCall extends Enum {
         readonly isUpdateCategoryMembershipOfModerator: boolean;
         readonly asUpdateCategoryMembershipOfModerator: {
@@ -2817,14 +3010,6 @@ declare module '@polkadot/types/lookup' {
             readonly text: Bytes;
             readonly editable: bool;
         } & Struct;
-        readonly isReactPost: boolean;
-        readonly asReactPost: {
-            readonly forumUserId: u64;
-            readonly categoryId: u64;
-            readonly threadId: u64;
-            readonly postId: u64;
-            readonly react: u64;
-        } & Struct;
         readonly isEditPostText: boolean;
         readonly asEditPostText: {
             readonly forumUserId: u64;
@@ -2853,9 +3038,9 @@ declare module '@polkadot/types/lookup' {
             readonly categoryId: u64;
             readonly stickiedIds: Vec<u64>;
         } & Struct;
-        readonly type: 'UpdateCategoryMembershipOfModerator' | 'CreateCategory' | 'UpdateCategoryArchivalStatus' | 'UpdateCategoryTitle' | 'UpdateCategoryDescription' | 'DeleteCategory' | 'CreateThread' | 'EditThreadMetadata' | 'DeleteThread' | 'MoveThreadToCategory' | 'ModerateThread' | 'AddPost' | 'ReactPost' | 'EditPostText' | 'ModeratePost' | 'DeletePosts' | 'SetStickiedThreads';
+        readonly type: 'UpdateCategoryMembershipOfModerator' | 'CreateCategory' | 'UpdateCategoryArchivalStatus' | 'UpdateCategoryTitle' | 'UpdateCategoryDescription' | 'DeleteCategory' | 'CreateThread' | 'EditThreadMetadata' | 'DeleteThread' | 'MoveThreadToCategory' | 'ModerateThread' | 'AddPost' | 'EditPostText' | 'ModeratePost' | 'DeletePosts' | 'SetStickiedThreads';
     }
-    /** @name PalletConstitutionCall (357) */
+    /** @name PalletConstitutionCall (376) */
     interface PalletConstitutionCall extends Enum {
         readonly isAmendConstitution: boolean;
         readonly asAmendConstitution: {
@@ -2863,7 +3048,95 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'AmendConstitution';
     }
-    /** @name PalletContentCall (359) */
+    /** @name PalletBountyCall (377) */
+    interface PalletBountyCall extends Enum {
+        readonly isCreateBounty: boolean;
+        readonly asCreateBounty: {
+            readonly params: PalletBountyBountyParameters;
+            readonly metadata: Bytes;
+        } & Struct;
+        readonly isFundBounty: boolean;
+        readonly asFundBounty: {
+            readonly funder: PalletBountyBountyActor;
+            readonly bountyId: u64;
+            readonly amount: u128;
+        } & Struct;
+        readonly isTerminateBounty: boolean;
+        readonly asTerminateBounty: {
+            readonly bountyId: u64;
+        } & Struct;
+        readonly isSwitchOracle: boolean;
+        readonly asSwitchOracle: {
+            readonly newOracle: PalletBountyBountyActor;
+            readonly bountyId: u64;
+        } & Struct;
+        readonly isWithdrawFunding: boolean;
+        readonly asWithdrawFunding: {
+            readonly funder: PalletBountyBountyActor;
+            readonly bountyId: u64;
+        } & Struct;
+        readonly isAnnounceWorkEntry: boolean;
+        readonly asAnnounceWorkEntry: {
+            readonly memberId: u64;
+            readonly bountyId: u64;
+            readonly stakingAccountId: AccountId32;
+            readonly workDescription: Bytes;
+        } & Struct;
+        readonly isSubmitWork: boolean;
+        readonly asSubmitWork: {
+            readonly memberId: u64;
+            readonly bountyId: u64;
+            readonly entryId: u64;
+            readonly workData: Bytes;
+        } & Struct;
+        readonly isEndWorkingPeriod: boolean;
+        readonly asEndWorkingPeriod: {
+            readonly bountyId: u64;
+        } & Struct;
+        readonly isSubmitOracleJudgment: boolean;
+        readonly asSubmitOracleJudgment: {
+            readonly bountyId: u64;
+            readonly judgment: BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>;
+            readonly rationale: Bytes;
+        } & Struct;
+        readonly isWithdrawEntrantStake: boolean;
+        readonly asWithdrawEntrantStake: {
+            readonly memberId: u64;
+            readonly bountyId: u64;
+            readonly entryId: u64;
+        } & Struct;
+        readonly isWithdrawOracleReward: boolean;
+        readonly asWithdrawOracleReward: {
+            readonly bountyId: u64;
+        } & Struct;
+        readonly isContributorRemark: boolean;
+        readonly asContributorRemark: {
+            readonly contributor: PalletBountyBountyActor;
+            readonly bountyId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly isOracleRemark: boolean;
+        readonly asOracleRemark: {
+            readonly oracle: PalletBountyBountyActor;
+            readonly bountyId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly isEntrantRemark: boolean;
+        readonly asEntrantRemark: {
+            readonly entrantId: u64;
+            readonly bountyId: u64;
+            readonly entryId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly isCreatorRemark: boolean;
+        readonly asCreatorRemark: {
+            readonly creator: PalletBountyBountyActor;
+            readonly bountyId: u64;
+            readonly msg: Bytes;
+        } & Struct;
+        readonly type: 'CreateBounty' | 'FundBounty' | 'TerminateBounty' | 'SwitchOracle' | 'WithdrawFunding' | 'AnnounceWorkEntry' | 'SubmitWork' | 'EndWorkingPeriod' | 'SubmitOracleJudgment' | 'WithdrawEntrantStake' | 'WithdrawOracleReward' | 'ContributorRemark' | 'OracleRemark' | 'EntrantRemark' | 'CreatorRemark';
+    }
+    /** @name PalletContentCall (379) */
     interface PalletContentCall extends Enum {
         readonly isCreateCuratorGroup: boolean;
         readonly asCreateCuratorGroup: {
@@ -2918,6 +3191,7 @@ declare module '@polkadot/types/lookup' {
         readonly asDeleteChannel: {
             readonly actor: PalletContentPermissionsContentActor;
             readonly channelId: u64;
+            readonly channelBagWitness: PalletContentChannelBagWitness;
             readonly numObjectsToDelete: u64;
         } & Struct;
         readonly isDeleteChannelAssetsAsModerator: boolean;
@@ -2925,12 +3199,14 @@ declare module '@polkadot/types/lookup' {
             readonly actor: PalletContentPermissionsContentActor;
             readonly channelId: u64;
             readonly assetsToRemove: BTreeSet<u64>;
+            readonly storageBucketsNumWitness: u32;
             readonly rationale: Bytes;
         } & Struct;
         readonly isDeleteChannelAsModerator: boolean;
         readonly asDeleteChannelAsModerator: {
             readonly actor: PalletContentPermissionsContentActor;
             readonly channelId: u64;
+            readonly channelBagWitness: PalletContentChannelBagWitness;
             readonly numObjectsToDelete: u64;
             readonly rationale: Bytes;
         } & Struct;
@@ -2958,11 +3234,13 @@ declare module '@polkadot/types/lookup' {
             readonly actor: PalletContentPermissionsContentActor;
             readonly videoId: u64;
             readonly numObjectsToDelete: u64;
+            readonly storageBucketsNumWitness: Option<u32>;
         } & Struct;
         readonly isDeleteVideoAssetsAsModerator: boolean;
         readonly asDeleteVideoAssetsAsModerator: {
             readonly actor: PalletContentPermissionsContentActor;
             readonly videoId: u64;
+            readonly storageBucketsNumWitness: u32;
             readonly assetsToRemove: BTreeSet<u64>;
             readonly rationale: Bytes;
         } & Struct;
@@ -2970,6 +3248,7 @@ declare module '@polkadot/types/lookup' {
         readonly asDeleteVideoAsModerator: {
             readonly actor: PalletContentPermissionsContentActor;
             readonly videoId: u64;
+            readonly storageBucketsNumWitness: Option<u32>;
             readonly numObjectsToDelete: u64;
             readonly rationale: Bytes;
         } & Struct;
@@ -2987,7 +3266,7 @@ declare module '@polkadot/types/lookup' {
         readonly isClaimChannelReward: boolean;
         readonly asClaimChannelReward: {
             readonly actor: PalletContentPermissionsContentActor;
-            readonly proof: Vec<PalletContentProofElementRecord>;
+            readonly proof: Vec<PalletCommonProofElementRecord>;
             readonly item: PalletContentPullPaymentElement;
         } & Struct;
         readonly isWithdrawFromChannelBalance: boolean;
@@ -3007,7 +3286,7 @@ declare module '@polkadot/types/lookup' {
         readonly isClaimAndWithdrawChannelReward: boolean;
         readonly asClaimAndWithdrawChannelReward: {
             readonly actor: PalletContentPermissionsContentActor;
-            readonly proof: Vec<PalletContentProofElementRecord>;
+            readonly proof: Vec<PalletCommonProofElementRecord>;
             readonly item: PalletContentPullPaymentElement;
         } & Struct;
         readonly isIssueNft: boolean;
@@ -3151,7 +3430,7 @@ declare module '@polkadot/types/lookup' {
         readonly isAcceptChannelTransfer: boolean;
         readonly asAcceptChannelTransfer: {
             readonly channelId: u64;
-            readonly commitmentParams: PalletContentTransferCommitmentParameters;
+            readonly commitmentParams: PalletContentTransferCommitmentParametersBTreeMap;
         } & Struct;
         readonly isUpdateGlobalNftLimit: boolean;
         readonly asUpdateGlobalNftLimit: {
@@ -3189,6 +3468,7 @@ declare module '@polkadot/types/lookup' {
             readonly actor: PalletContentPermissionsContentActor;
             readonly channelId: u64;
             readonly outputs: PalletProjectTokenTransfersPaymentWithVesting;
+            readonly metadata: Bytes;
         } & Struct;
         readonly isMakeCreatorTokenPermissionless: boolean;
         readonly asMakeCreatorTokenPermissionless: {
@@ -3230,30 +3510,35 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'CreateCuratorGroup' | 'UpdateCuratorGroupPermissions' | 'SetCuratorGroupStatus' | 'AddCuratorToGroup' | 'RemoveCuratorFromGroup' | 'CreateChannel' | 'UpdateChannel' | 'UpdateChannelPrivilegeLevel' | 'SetChannelPausedFeaturesAsModerator' | 'DeleteChannel' | 'DeleteChannelAssetsAsModerator' | 'DeleteChannelAsModerator' | 'SetChannelVisibilityAsModerator' | 'CreateVideo' | 'UpdateVideo' | 'DeleteVideo' | 'DeleteVideoAssetsAsModerator' | 'DeleteVideoAsModerator' | 'SetVideoVisibilityAsModerator' | 'UpdateChannelPayouts' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'UpdateChannelStateBloatBond' | 'UpdateVideoStateBloatBond' | 'ClaimAndWithdrawChannelReward' | 'IssueNft' | 'DestroyNft' | 'StartOpenAuction' | 'StartEnglishAuction' | 'CancelEnglishAuction' | 'CancelOpenAuction' | 'CancelOffer' | 'CancelBuyNow' | 'UpdateBuyNowPrice' | 'MakeOpenAuctionBid' | 'MakeEnglishAuctionBid' | 'CancelOpenAuctionBid' | 'SettleEnglishAuction' | 'PickOpenAuctionWinner' | 'OfferNft' | 'SlingNftBack' | 'AcceptIncomingOffer' | 'SellNft' | 'BuyNft' | 'ToggleNftLimits' | 'ChannelOwnerRemark' | 'ChannelAgentRemark' | 'NftOwnerRemark' | 'InitializeChannelTransfer' | 'CancelChannelTransfer' | 'AcceptChannelTransfer' | 'UpdateGlobalNftLimit' | 'UpdateChannelNftLimit' | 'IssueCreatorToken' | 'InitCreatorTokenSale' | 'UpdateUpcomingCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRateTo' | 'ClaimCreatorTokenPatronageCredit' | 'IssueRevenueSplit' | 'FinalizeRevenueSplit' | 'FinalizeCreatorTokenSale' | 'DeissueCreatorToken';
     }
-    /** @name PalletContentProofElementRecord (361) */
-    interface PalletContentProofElementRecord extends Struct {
+    /** @name PalletContentChannelBagWitness (380) */
+    interface PalletContentChannelBagWitness extends Struct {
+        readonly storageBucketsNum: u32;
+        readonly distributionBucketsNum: u32;
+    }
+    /** @name PalletCommonProofElementRecord (382) */
+    interface PalletCommonProofElementRecord extends Struct {
         readonly hash_: H256;
-        readonly side: PalletContentSide;
+        readonly side: PalletCommonSide;
     }
-    /** @name PalletContentSide (362) */
-    interface PalletContentSide extends Enum {
+    /** @name PalletCommonSide (383) */
+    interface PalletCommonSide extends Enum {
         readonly isLeft: boolean;
         readonly isRight: boolean;
         readonly type: 'Left' | 'Right';
     }
-    /** @name PalletContentPullPaymentElement (363) */
+    /** @name PalletContentPullPaymentElement (384) */
     interface PalletContentPullPaymentElement extends Struct {
         readonly channelId: u64;
         readonly cumulativeRewardEarned: u128;
         readonly reason: H256;
     }
-    /** @name PalletContentInitTransferParameters (364) */
+    /** @name PalletContentInitTransferParameters (385) */
     interface PalletContentInitTransferParameters extends Struct {
         readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>;
         readonly price: u128;
         readonly newOwner: PalletContentChannelOwner;
     }
-    /** @name PalletProjectTokenTokenSaleParams (365) */
+    /** @name PalletProjectTokenTokenSaleParams (386) */
     interface PalletProjectTokenTokenSaleParams extends Struct {
         readonly unitPrice: u128;
         readonly upperBoundQuantity: u128;
@@ -3263,10 +3548,10 @@ declare module '@polkadot/types/lookup' {
         readonly capPerMember: Option<u128>;
         readonly metadata: Option<Bytes>;
     }
-    /** @name PalletProjectTokenTransfersPaymentWithVesting (366) */
+    /** @name PalletProjectTokenTransfersPaymentWithVesting (387) */
     interface PalletProjectTokenTransfersPaymentWithVesting extends BTreeMap<u64, PalletProjectTokenPaymentWithVesting> {
     }
-    /** @name PalletStorageCall (370) */
+    /** @name PalletStorageCall (391) */
     interface PalletStorageCall extends Enum {
         readonly isDeleteStorageBucket: boolean;
         readonly asDeleteStorageBucket: {
@@ -3434,10 +3719,6 @@ declare module '@polkadot/types/lookup' {
         readonly asSudoUploadDataObjects: {
             readonly params: PalletStorageUploadParametersRecord;
         } & Struct;
-        readonly isSudoCreateDynamicBag: boolean;
-        readonly asSudoCreateDynamicBag: {
-            readonly params: PalletStorageDynBagCreationParametersRecord;
-        } & Struct;
         readonly isStorageOperatorRemark: boolean;
         readonly asStorageOperatorRemark: {
             readonly workerId: u64;
@@ -3450,25 +3731,16 @@ declare module '@polkadot/types/lookup' {
             readonly distributionBucketId: PalletStorageDistributionBucketIdRecord;
             readonly msg: Bytes;
         } & Struct;
-        readonly type: 'DeleteStorageBucket' | 'UpdateUploadingBlockedStatus' | 'UpdateDataSizeFee' | 'UpdateStorageBucketsPerBagLimit' | 'UpdateStorageBucketsVoucherMaxLimits' | 'UpdateDataObjectStateBloatBond' | 'UpdateNumberOfStorageBucketsInDynamicBagCreationPolicy' | 'UpdateBlacklist' | 'CreateStorageBucket' | 'UpdateStorageBucketsForBag' | 'CancelStorageBucketOperatorInvite' | 'InviteStorageBucketOperator' | 'RemoveStorageBucketOperator' | 'UpdateStorageBucketStatus' | 'SetStorageBucketVoucherLimits' | 'AcceptStorageBucketInvitation' | 'SetStorageOperatorMetadata' | 'AcceptPendingDataObjects' | 'CreateDistributionBucketFamily' | 'DeleteDistributionBucketFamily' | 'CreateDistributionBucket' | 'UpdateDistributionBucketStatus' | 'DeleteDistributionBucket' | 'UpdateDistributionBucketsForBag' | 'UpdateDistributionBucketsPerBagLimit' | 'UpdateDistributionBucketMode' | 'UpdateFamiliesInDynamicBagCreationPolicy' | 'InviteDistributionBucketOperator' | 'CancelDistributionBucketOperatorInvite' | 'RemoveDistributionBucketOperator' | 'SetDistributionBucketFamilyMetadata' | 'AcceptDistributionBucketInvitation' | 'SetDistributionOperatorMetadata' | 'SudoUploadDataObjects' | 'SudoCreateDynamicBag' | 'StorageOperatorRemark' | 'DistributionOperatorRemark';
-    }
-    /** @name PalletStorageDynBagCreationParametersRecord (371) */
-    interface PalletStorageDynBagCreationParametersRecord extends Struct {
-        readonly bagId: PalletStorageDynamicBagIdType;
-        readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
-        readonly stateBloatBondSourceAccountId: AccountId32;
-        readonly expectedDataSizeFee: u128;
-        readonly expectedDataObjectStateBloatBond: u128;
-        readonly storageBuckets: BTreeSet<u64>;
-        readonly distributionBuckets: BTreeSet<PalletStorageDistributionBucketIdRecord>;
+        readonly type: 'DeleteStorageBucket' | 'UpdateUploadingBlockedStatus' | 'UpdateDataSizeFee' | 'UpdateStorageBucketsPerBagLimit' | 'UpdateStorageBucketsVoucherMaxLimits' | 'UpdateDataObjectStateBloatBond' | 'UpdateNumberOfStorageBucketsInDynamicBagCreationPolicy' | 'UpdateBlacklist' | 'CreateStorageBucket' | 'UpdateStorageBucketsForBag' | 'CancelStorageBucketOperatorInvite' | 'InviteStorageBucketOperator' | 'RemoveStorageBucketOperator' | 'UpdateStorageBucketStatus' | 'SetStorageBucketVoucherLimits' | 'AcceptStorageBucketInvitation' | 'SetStorageOperatorMetadata' | 'AcceptPendingDataObjects' | 'CreateDistributionBucketFamily' | 'DeleteDistributionBucketFamily' | 'CreateDistributionBucket' | 'UpdateDistributionBucketStatus' | 'DeleteDistributionBucket' | 'UpdateDistributionBucketsForBag' | 'UpdateDistributionBucketsPerBagLimit' | 'UpdateDistributionBucketMode' | 'UpdateFamiliesInDynamicBagCreationPolicy' | 'InviteDistributionBucketOperator' | 'CancelDistributionBucketOperatorInvite' | 'RemoveDistributionBucketOperator' | 'SetDistributionBucketFamilyMetadata' | 'AcceptDistributionBucketInvitation' | 'SetDistributionOperatorMetadata' | 'SudoUploadDataObjects' | 'StorageOperatorRemark' | 'DistributionOperatorRemark';
     }
-    /** @name PalletProjectTokenCall (372) */
+    /** @name PalletProjectTokenCall (392) */
     interface PalletProjectTokenCall extends Enum {
         readonly isTransfer: boolean;
         readonly asTransfer: {
             readonly srcMemberId: u64;
             readonly tokenId: u64;
             readonly outputs: PalletProjectTokenTransfersPayment;
+            readonly metadata: Bytes;
         } & Struct;
         readonly isBurn: boolean;
         readonly asBurn: {
@@ -3506,24 +3778,23 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Transfer' | 'Burn' | 'DustAccount' | 'JoinWhitelist' | 'PurchaseTokensOnSale' | 'ParticipateInSplit' | 'ExitRevenueSplit';
     }
-    /** @name PalletProjectTokenTransfersPayment (373) */
+    /** @name PalletProjectTokenTransfersPayment (393) */
     interface PalletProjectTokenTransfersPayment extends BTreeMap<u64, PalletProjectTokenPayment> {
     }
-    /** @name PalletProjectTokenPayment (374) */
+    /** @name PalletProjectTokenPayment (394) */
     interface PalletProjectTokenPayment extends Struct {
-        readonly remark: Bytes;
         readonly amount: u128;
     }
-    /** @name PalletProjectTokenMerkleProof (378) */
+    /** @name PalletProjectTokenMerkleProof (398) */
     interface PalletProjectTokenMerkleProof extends Vec<ITuple<[H256, PalletProjectTokenMerkleSide]>> {
     }
-    /** @name PalletProjectTokenMerkleSide (381) */
+    /** @name PalletProjectTokenMerkleSide (401) */
     interface PalletProjectTokenMerkleSide extends Enum {
         readonly isRight: boolean;
         readonly isLeft: boolean;
         readonly type: 'Right' | 'Left';
     }
-    /** @name PalletProposalsEngineCall (382) */
+    /** @name PalletProposalsEngineCall (402) */
     interface PalletProposalsEngineCall extends Enum {
         readonly isVote: boolean;
         readonly asVote: {
@@ -3549,7 +3820,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Vote' | 'CancelProposal' | 'VetoProposal' | 'ProposerRemark';
     }
-    /** @name PalletProposalsDiscussionCall (383) */
+    /** @name PalletProposalsDiscussionCall (403) */
     interface PalletProposalsDiscussionCall extends Enum {
         readonly isAddPost: boolean;
         readonly asAddPost: {
@@ -3579,7 +3850,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'AddPost' | 'DeletePost' | 'UpdatePost' | 'ChangeThreadMode';
     }
-    /** @name PalletProposalsCodexCall (384) */
+    /** @name PalletProposalsCodexCall (404) */
     interface PalletProposalsCodexCall extends Enum {
         readonly isCreateProposal: boolean;
         readonly asCreateProposal: {
@@ -3588,7 +3859,7 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'CreateProposal';
     }
-    /** @name PalletWorkingGroupCall (385) */
+    /** @name PalletWorkingGroupCall (405) */
     interface PalletWorkingGroupCall extends Enum {
         readonly isAddOpening: boolean;
         readonly asAddOpening: {
@@ -3692,14 +3963,14 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'AddOpening' | 'ApplyOnOpening' | 'FillOpening' | 'UpdateRoleAccount' | 'LeaveRole' | 'TerminateRole' | 'SlashStake' | 'DecreaseStake' | 'IncreaseStake' | 'WithdrawApplication' | 'CancelOpening' | 'SetBudget' | 'UpdateRewardAccount' | 'UpdateRewardAmount' | 'SetStatusText' | 'SpendFromBudget' | 'UpdateRoleStorage' | 'FundWorkingGroupBudget' | 'LeadRemark' | 'WorkerRemark';
     }
-    /** @name JoystreamNodeRuntimeOriginCaller (394) */
+    /** @name JoystreamNodeRuntimeOriginCaller (414) */
     interface JoystreamNodeRuntimeOriginCaller extends Enum {
         readonly isSystem: boolean;
         readonly asSystem: FrameSupportDispatchRawOrigin;
         readonly isVoid: boolean;
         readonly type: 'System' | 'Void';
     }
-    /** @name FrameSupportDispatchRawOrigin (395) */
+    /** @name FrameSupportDispatchRawOrigin (415) */
     interface FrameSupportDispatchRawOrigin extends Enum {
         readonly isRoot: boolean;
         readonly isSigned: boolean;
@@ -3707,14 +3978,14 @@ declare module '@polkadot/types/lookup' {
         readonly isNone: boolean;
         readonly type: 'Root' | 'Signed' | 'None';
     }
-    /** @name SpCoreVoid (396) */
+    /** @name SpCoreVoid (416) */
     type SpCoreVoid = Null;
-    /** @name PalletUtilityError (397) */
+    /** @name PalletUtilityError (417) */
     interface PalletUtilityError extends Enum {
         readonly isTooManyCalls: boolean;
         readonly type: 'TooManyCalls';
     }
-    /** @name SpConsensusBabeDigestsPreDigest (404) */
+    /** @name SpConsensusBabeDigestsPreDigest (424) */
     interface SpConsensusBabeDigestsPreDigest extends Enum {
         readonly isPrimary: boolean;
         readonly asPrimary: SpConsensusBabeDigestsPrimaryPreDigest;
@@ -3724,31 +3995,31 @@ declare module '@polkadot/types/lookup' {
         readonly asSecondaryVRF: SpConsensusBabeDigestsSecondaryVRFPreDigest;
         readonly type: 'Primary' | 'SecondaryPlain' | 'SecondaryVRF';
     }
-    /** @name SpConsensusBabeDigestsPrimaryPreDigest (405) */
+    /** @name SpConsensusBabeDigestsPrimaryPreDigest (425) */
     interface SpConsensusBabeDigestsPrimaryPreDigest extends Struct {
         readonly authorityIndex: u32;
         readonly slot: u64;
         readonly vrfOutput: U8aFixed;
         readonly vrfProof: U8aFixed;
     }
-    /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (406) */
+    /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (426) */
     interface SpConsensusBabeDigestsSecondaryPlainPreDigest extends Struct {
         readonly authorityIndex: u32;
         readonly slot: u64;
     }
-    /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (407) */
+    /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (427) */
     interface SpConsensusBabeDigestsSecondaryVRFPreDigest extends Struct {
         readonly authorityIndex: u32;
         readonly slot: u64;
         readonly vrfOutput: U8aFixed;
         readonly vrfProof: U8aFixed;
     }
-    /** @name SpConsensusBabeBabeEpochConfiguration (409) */
+    /** @name SpConsensusBabeBabeEpochConfiguration (429) */
     interface SpConsensusBabeBabeEpochConfiguration extends Struct {
         readonly c: ITuple<[u64, u64]>;
         readonly allowedSlots: SpConsensusBabeAllowedSlots;
     }
-    /** @name PalletBabeError (410) */
+    /** @name PalletBabeError (430) */
     interface PalletBabeError extends Enum {
         readonly isInvalidEquivocationProof: boolean;
         readonly isInvalidKeyOwnershipProof: boolean;
@@ -3756,7 +4027,7 @@ declare module '@polkadot/types/lookup' {
         readonly isInvalidConfiguration: boolean;
         readonly type: 'InvalidEquivocationProof' | 'InvalidKeyOwnershipProof' | 'DuplicateOffenceReport' | 'InvalidConfiguration';
     }
-    /** @name PalletAuthorshipUncleEntryItem (412) */
+    /** @name PalletAuthorshipUncleEntryItem (432) */
     interface PalletAuthorshipUncleEntryItem extends Enum {
         readonly isInclusionHeight: boolean;
         readonly asInclusionHeight: u32;
@@ -3764,7 +4035,7 @@ declare module '@polkadot/types/lookup' {
         readonly asUncle: ITuple<[H256, Option<AccountId32>]>;
         readonly type: 'InclusionHeight' | 'Uncle';
     }
-    /** @name PalletAuthorshipError (413) */
+    /** @name PalletAuthorshipError (433) */
     interface PalletAuthorshipError extends Enum {
         readonly isInvalidUncleParent: boolean;
         readonly isUnclesAlreadySet: boolean;
@@ -3775,31 +4046,31 @@ declare module '@polkadot/types/lookup' {
         readonly isOldUncle: boolean;
         readonly type: 'InvalidUncleParent' | 'UnclesAlreadySet' | 'TooManyUncles' | 'GenesisUncle' | 'TooHighUncle' | 'UncleAlreadyIncluded' | 'OldUncle';
     }
-    /** @name PalletBalancesBalanceLock (415) */
+    /** @name PalletBalancesBalanceLock (435) */
     interface PalletBalancesBalanceLock extends Struct {
         readonly id: U8aFixed;
         readonly amount: u128;
         readonly reasons: PalletBalancesReasons;
     }
-    /** @name PalletBalancesReasons (416) */
+    /** @name PalletBalancesReasons (436) */
     interface PalletBalancesReasons extends Enum {
         readonly isFee: boolean;
         readonly isMisc: boolean;
         readonly isAll: boolean;
         readonly type: 'Fee' | 'Misc' | 'All';
     }
-    /** @name PalletBalancesReserveData (419) */
+    /** @name PalletBalancesReserveData (439) */
     interface PalletBalancesReserveData extends Struct {
         readonly id: U8aFixed;
         readonly amount: u128;
     }
-    /** @name PalletBalancesReleases (421) */
+    /** @name PalletBalancesReleases (441) */
     interface PalletBalancesReleases extends Enum {
         readonly isV100: boolean;
         readonly isV200: boolean;
         readonly type: 'V100' | 'V200';
     }
-    /** @name PalletBalancesError (422) */
+    /** @name PalletBalancesError (442) */
     interface PalletBalancesError extends Enum {
         readonly isVestingBalance: boolean;
         readonly isLiquidityRestrictions: boolean;
@@ -3811,13 +4082,13 @@ declare module '@polkadot/types/lookup' {
         readonly isTooManyReserves: boolean;
         readonly type: 'VestingBalance' | 'LiquidityRestrictions' | 'InsufficientBalance' | 'ExistentialDeposit' | 'KeepAlive' | 'ExistingVestingSchedule' | 'DeadAccount' | 'TooManyReserves';
     }
-    /** @name PalletTransactionPaymentReleases (424) */
+    /** @name PalletTransactionPaymentReleases (444) */
     interface PalletTransactionPaymentReleases extends Enum {
         readonly isV1Ancient: boolean;
         readonly isV2: boolean;
         readonly type: 'V1Ancient' | 'V2';
     }
-    /** @name PalletElectionProviderMultiPhasePhase (425) */
+    /** @name PalletElectionProviderMultiPhasePhase (445) */
     interface PalletElectionProviderMultiPhasePhase extends Enum {
         readonly isOff: boolean;
         readonly isSigned: boolean;
@@ -3826,25 +4097,25 @@ declare module '@polkadot/types/lookup' {
         readonly isEmergency: boolean;
         readonly type: 'Off' | 'Signed' | 'Unsigned' | 'Emergency';
     }
-    /** @name PalletElectionProviderMultiPhaseReadySolution (427) */
+    /** @name PalletElectionProviderMultiPhaseReadySolution (447) */
     interface PalletElectionProviderMultiPhaseReadySolution extends Struct {
         readonly supports: Vec<ITuple<[AccountId32, SpNposElectionsSupport]>>;
         readonly score: SpNposElectionsElectionScore;
         readonly compute: PalletElectionProviderMultiPhaseElectionCompute;
     }
-    /** @name PalletElectionProviderMultiPhaseRoundSnapshot (428) */
+    /** @name PalletElectionProviderMultiPhaseRoundSnapshot (448) */
     interface PalletElectionProviderMultiPhaseRoundSnapshot extends Struct {
         readonly voters: Vec<ITuple<[AccountId32, u64, Vec<AccountId32>]>>;
         readonly targets: Vec<AccountId32>;
     }
-    /** @name PalletElectionProviderMultiPhaseSignedSignedSubmission (436) */
+    /** @name PalletElectionProviderMultiPhaseSignedSignedSubmission (456) */
     interface PalletElectionProviderMultiPhaseSignedSignedSubmission extends Struct {
         readonly who: AccountId32;
         readonly deposit: u128;
         readonly rawSolution: PalletElectionProviderMultiPhaseRawSolution;
         readonly callFee: u128;
     }
-    /** @name PalletElectionProviderMultiPhaseError (437) */
+    /** @name PalletElectionProviderMultiPhaseError (457) */
     interface PalletElectionProviderMultiPhaseError extends Enum {
         readonly isPreDispatchEarlySubmission: boolean;
         readonly isPreDispatchWrongWinnerCount: boolean;
@@ -3860,7 +4131,7 @@ declare module '@polkadot/types/lookup' {
         readonly isFallbackFailed: boolean;
         readonly type: 'PreDispatchEarlySubmission' | 'PreDispatchWrongWinnerCount' | 'PreDispatchWeakSubmission' | 'SignedQueueFull' | 'SignedCannotPayDeposit' | 'SignedInvalidWitness' | 'SignedTooMuchWeight' | 'OcwCallWrongEra' | 'MissingSnapshotMetadata' | 'InvalidSubmissionIndex' | 'CallNotAllowed' | 'FallbackFailed';
     }
-    /** @name PalletStakingStakingLedger (438) */
+    /** @name PalletStakingStakingLedger (458) */
     interface PalletStakingStakingLedger extends Struct {
         readonly stash: AccountId32;
         readonly total: Compact<u128>;
@@ -3868,28 +4139,28 @@ declare module '@polkadot/types/lookup' {
         readonly unlocking: Vec<PalletStakingUnlockChunk>;
         readonly claimedRewards: Vec<u32>;
     }
-    /** @name PalletStakingUnlockChunk (440) */
+    /** @name PalletStakingUnlockChunk (460) */
     interface PalletStakingUnlockChunk extends Struct {
         readonly value: Compact<u128>;
         readonly era: Compact<u32>;
     }
-    /** @name PalletStakingNominations (442) */
+    /** @name PalletStakingNominations (462) */
     interface PalletStakingNominations extends Struct {
         readonly targets: Vec<AccountId32>;
         readonly submittedIn: u32;
         readonly suppressed: bool;
     }
-    /** @name PalletStakingActiveEraInfo (443) */
+    /** @name PalletStakingActiveEraInfo (463) */
     interface PalletStakingActiveEraInfo extends Struct {
         readonly index: u32;
         readonly start: Option<u64>;
     }
-    /** @name PalletStakingEraRewardPoints (445) */
+    /** @name PalletStakingEraRewardPoints (465) */
     interface PalletStakingEraRewardPoints extends Struct {
         readonly total: u32;
         readonly individual: BTreeMap<AccountId32, u32>;
     }
-    /** @name PalletStakingForcing (449) */
+    /** @name PalletStakingForcing (469) */
     interface PalletStakingForcing extends Enum {
         readonly isNotForcing: boolean;
         readonly isForceNew: boolean;
@@ -3897,7 +4168,7 @@ declare module '@polkadot/types/lookup' {
         readonly isForceAlways: boolean;
         readonly type: 'NotForcing' | 'ForceNew' | 'ForceNone' | 'ForceAlways';
     }
-    /** @name PalletStakingUnappliedSlash (451) */
+    /** @name PalletStakingUnappliedSlash (471) */
     interface PalletStakingUnappliedSlash extends Struct {
         readonly validator: AccountId32;
         readonly own: u128;
@@ -3905,19 +4176,19 @@ declare module '@polkadot/types/lookup' {
         readonly reporters: Vec<AccountId32>;
         readonly payout: u128;
     }
-    /** @name PalletStakingSlashingSlashingSpans (453) */
+    /** @name PalletStakingSlashingSlashingSpans (473) */
     interface PalletStakingSlashingSlashingSpans extends Struct {
         readonly spanIndex: u32;
         readonly lastStart: u32;
         readonly lastNonzeroSlash: u32;
         readonly prior: Vec<u32>;
     }
-    /** @name PalletStakingSlashingSpanRecord (454) */
+    /** @name PalletStakingSlashingSpanRecord (474) */
     interface PalletStakingSlashingSpanRecord extends Struct {
         readonly slashed: u128;
         readonly paidOut: u128;
     }
-    /** @name PalletStakingReleases (457) */
+    /** @name PalletStakingReleases (477) */
     interface PalletStakingReleases extends Enum {
         readonly isV100Ancient: boolean;
         readonly isV200: boolean;
@@ -3930,7 +4201,7 @@ declare module '@polkadot/types/lookup' {
         readonly isV900: boolean;
         readonly type: 'V100Ancient' | 'V200' | 'V300' | 'V400' | 'V500' | 'V600' | 'V700' | 'V800' | 'V900';
     }
-    /** @name PalletStakingPalletError (458) */
+    /** @name PalletStakingPalletError (478) */
     interface PalletStakingPalletError extends Enum {
         readonly isNotController: boolean;
         readonly isNotStash: boolean;
@@ -3956,12 +4227,13 @@ declare module '@polkadot/types/lookup' {
         readonly isTooManyNominators: boolean;
         readonly isTooManyValidators: boolean;
         readonly isCommissionTooLow: boolean;
-        readonly type: 'NotController' | 'NotStash' | 'AlreadyBonded' | 'AlreadyPaired' | 'EmptyTargets' | 'DuplicateIndex' | 'InvalidSlashIndex' | 'InsufficientBond' | 'NoMoreChunks' | 'NoUnlockChunk' | 'FundedTarget' | 'InvalidEraToReward' | 'InvalidNumberOfNominations' | 'NotSortedAndUnique' | 'AlreadyClaimed' | 'IncorrectHistoryDepth' | 'IncorrectSlashingSpans' | 'BadState' | 'TooManyTargets' | 'BadTarget' | 'CannotChillOther' | 'TooManyNominators' | 'TooManyValidators' | 'CommissionTooLow';
+        readonly isBondingRestricted: boolean;
+        readonly type: 'NotController' | 'NotStash' | 'AlreadyBonded' | 'AlreadyPaired' | 'EmptyTargets' | 'DuplicateIndex' | 'InvalidSlashIndex' | 'InsufficientBond' | 'NoMoreChunks' | 'NoUnlockChunk' | 'FundedTarget' | 'InvalidEraToReward' | 'InvalidNumberOfNominations' | 'NotSortedAndUnique' | 'AlreadyClaimed' | 'IncorrectHistoryDepth' | 'IncorrectSlashingSpans' | 'BadState' | 'TooManyTargets' | 'BadTarget' | 'CannotChillOther' | 'TooManyNominators' | 'TooManyValidators' | 'CommissionTooLow' | 'BondingRestricted';
     }
-    /** @name SpCoreCryptoKeyTypeId (462) */
+    /** @name SpCoreCryptoKeyTypeId (482) */
     interface SpCoreCryptoKeyTypeId extends U8aFixed {
     }
-    /** @name PalletSessionError (463) */
+    /** @name PalletSessionError (483) */
     interface PalletSessionError extends Enum {
         readonly isInvalidProof: boolean;
         readonly isNoAssociatedValidatorId: boolean;
@@ -3970,7 +4242,7 @@ declare module '@polkadot/types/lookup' {
         readonly isNoAccount: boolean;
         readonly type: 'InvalidProof' | 'NoAssociatedValidatorId' | 'DuplicatedKey' | 'NoKeys' | 'NoAccount';
     }
-    /** @name PalletGrandpaStoredState (465) */
+    /** @name PalletGrandpaStoredState (485) */
     interface PalletGrandpaStoredState extends Enum {
         readonly isLive: boolean;
         readonly isPendingPause: boolean;
@@ -3986,14 +4258,14 @@ declare module '@polkadot/types/lookup' {
         } & Struct;
         readonly type: 'Live' | 'PendingPause' | 'Paused' | 'PendingResume';
     }
-    /** @name PalletGrandpaStoredPendingChange (466) */
+    /** @name PalletGrandpaStoredPendingChange (486) */
     interface PalletGrandpaStoredPendingChange extends Struct {
         readonly scheduledAt: u32;
         readonly delay: u32;
         readonly nextAuthorities: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>>;
         readonly forced: Option<u32>;
     }
-    /** @name PalletGrandpaError (468) */
+    /** @name PalletGrandpaError (488) */
     interface PalletGrandpaError extends Enum {
         readonly isPauseFailed: boolean;
         readonly isResumeFailed: boolean;
@@ -4004,28 +4276,28 @@ declare module '@polkadot/types/lookup' {
         readonly isDuplicateOffenceReport: boolean;
         readonly type: 'PauseFailed' | 'ResumeFailed' | 'ChangePending' | 'TooSoon' | 'InvalidKeyOwnershipProof' | 'InvalidEquivocationProof' | 'DuplicateOffenceReport';
     }
-    /** @name PalletImOnlineBoundedOpaqueNetworkState (474) */
+    /** @name PalletImOnlineBoundedOpaqueNetworkState (494) */
     interface PalletImOnlineBoundedOpaqueNetworkState extends Struct {
         readonly peerId: Bytes;
         readonly externalAddresses: Vec<Bytes>;
     }
-    /** @name PalletImOnlineError (478) */
+    /** @name PalletImOnlineError (498) */
     interface PalletImOnlineError extends Enum {
         readonly isInvalidKey: boolean;
         readonly isDuplicatedHeartbeat: boolean;
         readonly type: 'InvalidKey' | 'DuplicatedHeartbeat';
     }
-    /** @name SpStakingOffenceOffenceDetails (479) */
+    /** @name SpStakingOffenceOffenceDetails (499) */
     interface SpStakingOffenceOffenceDetails extends Struct {
         readonly offender: ITuple<[AccountId32, PalletStakingExposure]>;
         readonly reporters: Vec<AccountId32>;
     }
-    /** @name PalletSudoError (482) */
+    /** @name PalletSudoError (502) */
     interface PalletSudoError extends Enum {
         readonly isRequireSudo: boolean;
         readonly type: 'RequireSudo';
     }
-    /** @name PalletBagsListListNode (483) */
+    /** @name PalletBagsListListNode (503) */
     interface PalletBagsListListNode extends Struct {
         readonly id: AccountId32;
         readonly prev: Option<AccountId32>;
@@ -4033,18 +4305,18 @@ declare module '@polkadot/types/lookup' {
         readonly bagUpper: u64;
         readonly score: u64;
     }
-    /** @name PalletBagsListListBag (484) */
+    /** @name PalletBagsListListBag (504) */
     interface PalletBagsListListBag extends Struct {
         readonly head: Option<AccountId32>;
         readonly tail: Option<AccountId32>;
     }
-    /** @name PalletBagsListError (485) */
+    /** @name PalletBagsListError (505) */
     interface PalletBagsListError extends Enum {
         readonly isList: boolean;
         readonly asList: PalletBagsListListListError;
         readonly type: 'List';
     }
-    /** @name PalletBagsListListListError (486) */
+    /** @name PalletBagsListListListError (506) */
     interface PalletBagsListListListError extends Enum {
         readonly isDuplicate: boolean;
         readonly isNotHeavier: boolean;
@@ -4052,13 +4324,13 @@ declare module '@polkadot/types/lookup' {
         readonly isNodeNotFound: boolean;
         readonly type: 'Duplicate' | 'NotHeavier' | 'NotInSameBag' | 'NodeNotFound';
     }
-    /** @name PalletVestingReleases (489) */
+    /** @name PalletVestingReleases (509) */
     interface PalletVestingReleases extends Enum {
         readonly isV0: boolean;
         readonly isV1: boolean;
         readonly type: 'V0' | 'V1';
     }
-    /** @name PalletVestingError (490) */
+    /** @name PalletVestingError (510) */
     interface PalletVestingError extends Enum {
         readonly isNotVesting: boolean;
         readonly isAtMaxVestingSchedules: boolean;
@@ -4067,29 +4339,60 @@ declare module '@polkadot/types/lookup' {
         readonly isInvalidScheduleParams: boolean;
         readonly type: 'NotVesting' | 'AtMaxVestingSchedules' | 'AmountLow' | 'ScheduleIndexOutOfBounds' | 'InvalidScheduleParams';
     }
-    /** @name PalletCouncilCouncilStageUpdate (491) */
+    /** @name PalletMultisigMultisig (512) */
+    interface PalletMultisigMultisig extends Struct {
+        readonly when: PalletMultisigTimepoint;
+        readonly deposit: u128;
+        readonly depositor: AccountId32;
+        readonly approvals: Vec<AccountId32>;
+    }
+    /** @name PalletMultisigError (514) */
+    interface PalletMultisigError extends Enum {
+        readonly isMinimumThreshold: boolean;
+        readonly isAlreadyApproved: boolean;
+        readonly isNoApprovalsNeeded: boolean;
+        readonly isTooFewSignatories: boolean;
+        readonly isTooManySignatories: boolean;
+        readonly isSignatoriesOutOfOrder: boolean;
+        readonly isSenderInSignatories: boolean;
+        readonly isNotFound: boolean;
+        readonly isNotOwner: boolean;
+        readonly isNoTimepoint: boolean;
+        readonly isWrongTimepoint: boolean;
+        readonly isUnexpectedTimepoint: boolean;
+        readonly isMaxWeightTooLow: boolean;
+        readonly isAlreadyStored: boolean;
+        readonly type: 'MinimumThreshold' | 'AlreadyApproved' | 'NoApprovalsNeeded' | 'TooFewSignatories' | 'TooManySignatories' | 'SignatoriesOutOfOrder' | 'SenderInSignatories' | 'NotFound' | 'NotOwner' | 'NoTimepoint' | 'WrongTimepoint' | 'UnexpectedTimepoint' | 'MaxWeightTooLow' | 'AlreadyStored';
+    }
+    /** @name PalletCouncilCouncilStageUpdate (515) */
     interface PalletCouncilCouncilStageUpdate extends Struct {
         readonly stage: PalletCouncilCouncilStage;
         readonly changedAt: u32;
     }
-    /** @name PalletCouncilCouncilStage (492) */
+    /** @name PalletCouncilCouncilStage (516) */
     interface PalletCouncilCouncilStage extends Enum {
         readonly isAnnouncing: boolean;
         readonly asAnnouncing: PalletCouncilCouncilStageAnnouncing;
         readonly isElection: boolean;
         readonly asElection: PalletCouncilCouncilStageElection;
         readonly isIdle: boolean;
+        readonly asIdle: PalletCouncilCouncilStageIdle;
         readonly type: 'Announcing' | 'Election' | 'Idle';
     }
-    /** @name PalletCouncilCouncilStageAnnouncing (493) */
+    /** @name PalletCouncilCouncilStageAnnouncing (517) */
     interface PalletCouncilCouncilStageAnnouncing extends Struct {
         readonly candidatesCount: u64;
+        readonly endsAt: u32;
     }
-    /** @name PalletCouncilCouncilStageElection (494) */
+    /** @name PalletCouncilCouncilStageElection (518) */
     interface PalletCouncilCouncilStageElection extends Struct {
         readonly candidatesCount: u64;
     }
-    /** @name PalletCouncilCouncilMember (496) */
+    /** @name PalletCouncilCouncilStageIdle (519) */
+    interface PalletCouncilCouncilStageIdle extends Struct {
+        readonly endsAt: u32;
+    }
+    /** @name PalletCouncilCouncilMember (521) */
     interface PalletCouncilCouncilMember extends Struct {
         readonly stakingAccountId: AccountId32;
         readonly rewardAccountId: AccountId32;
@@ -4098,7 +4401,7 @@ declare module '@polkadot/types/lookup' {
         readonly lastPaymentBlock: u32;
         readonly unpaidReward: u128;
     }
-    /** @name PalletCouncilCandidate (497) */
+    /** @name PalletCouncilCandidate (522) */
     interface PalletCouncilCandidate extends Struct {
         readonly stakingAccountId: AccountId32;
         readonly rewardAccountId: AccountId32;
@@ -4107,7 +4410,7 @@ declare module '@polkadot/types/lookup' {
         readonly votePower: u128;
         readonly noteHash: Option<H256>;
     }
-    /** @name PalletCouncilError (498) */
+    /** @name PalletCouncilError (523) */
     interface PalletCouncilError extends Enum {
         readonly isBadOrigin: boolean;
         readonly isCantCandidateNow: boolean;
@@ -4134,7 +4437,7 @@ declare module '@polkadot/types/lookup' {
         readonly isInsufficientBalanceForTransfer: boolean;
         readonly type: 'BadOrigin' | 'CantCandidateNow' | 'CantReleaseStakeNow' | 'CandidacyStakeTooLow' | 'CantCandidateTwice' | 'ConflictingStake' | 'StakeStillNeeded' | 'NoStake' | 'InsufficientBalanceForStaking' | 'CantVoteForYourself' | 'MemberIdNotMatchAccount' | 'InvalidAccountToStakeReuse' | 'NotCandidatingNow' | 'CantWithdrawCandidacyNow' | 'NotCouncilor' | 'InsufficientFundsForFundingRequest' | 'ZeroBalanceFundRequest' | 'RepeatedFundRequestAccount' | 'EmptyFundingRequests' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'CandidateDoesNotExist' | 'InsufficientBalanceForTransfer';
     }
-    /** @name PalletReferendumReferendumStage (499) */
+    /** @name PalletReferendumReferendumStage (524) */
     interface PalletReferendumReferendumStage extends Enum {
         readonly isInactive: boolean;
         readonly isVoting: boolean;
@@ -4143,27 +4446,29 @@ declare module '@polkadot/types/lookup' {
         readonly asRevealing: PalletReferendumReferendumStageRevealing;
         readonly type: 'Inactive' | 'Voting' | 'Revealing';
     }
-    /** @name PalletReferendumReferendumStageVoting (500) */
+    /** @name PalletReferendumReferendumStageVoting (525) */
     interface PalletReferendumReferendumStageVoting extends Struct {
         readonly started: u32;
         readonly winningTargetCount: u64;
         readonly currentCycleId: u64;
+        readonly endsAt: u32;
     }
-    /** @name PalletReferendumReferendumStageRevealing (501) */
+    /** @name PalletReferendumReferendumStageRevealing (526) */
     interface PalletReferendumReferendumStageRevealing extends Struct {
         readonly started: u32;
         readonly winningTargetCount: u64;
         readonly intermediateWinners: Vec<PalletReferendumOptionResult>;
         readonly currentCycleId: u64;
+        readonly endsAt: u32;
     }
-    /** @name PalletReferendumCastVote (502) */
+    /** @name PalletReferendumCastVote (527) */
     interface PalletReferendumCastVote extends Struct {
         readonly commitment: H256;
         readonly cycleId: u64;
         readonly stake: u128;
         readonly voteFor: Option<u64>;
     }
-    /** @name PalletReferendumError (503) */
+    /** @name PalletReferendumError (528) */
     interface PalletReferendumError extends Enum {
         readonly isBadOrigin: boolean;
         readonly isReferendumNotRunning: boolean;
@@ -4180,7 +4485,7 @@ declare module '@polkadot/types/lookup' {
         readonly isUnstakingForbidden: boolean;
         readonly type: 'BadOrigin' | 'ReferendumNotRunning' | 'RevealingNotInProgress' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToStake' | 'InsufficientStake' | 'InvalidReveal' | 'InvalidVote' | 'VoteNotExisting' | 'AlreadyVotedThisCycle' | 'UnstakingVoteInSameCycle' | 'SaltTooLong' | 'UnstakingForbidden';
     }
-    /** @name PalletMembershipMembershipObject (504) */
+    /** @name PalletMembershipMembershipObject (529) */
     interface PalletMembershipMembershipObject extends Struct {
         readonly handleHash: Bytes;
         readonly rootAccount: AccountId32;
@@ -4188,12 +4493,12 @@ declare module '@polkadot/types/lookup' {
         readonly verified: bool;
         readonly invites: u32;
     }
-    /** @name PalletMembershipStakingAccountMemberBinding (505) */
+    /** @name PalletMembershipStakingAccountMemberBinding (530) */
     interface PalletMembershipStakingAccountMemberBinding extends Struct {
         readonly memberId: u64;
         readonly confirmed: bool;
     }
-    /** @name PalletMembershipError (506) */
+    /** @name PalletMembershipError (531) */
     interface PalletMembershipError extends Enum {
         readonly isNotEnoughBalanceToBuyMembership: boolean;
         readonly isControllerAccountRequired: boolean;
@@ -4218,7 +4523,7 @@ declare module '@polkadot/types/lookup' {
         readonly isInsufficientBalanceToGift: boolean;
         readonly type: 'NotEnoughBalanceToBuyMembership' | 'ControllerAccountRequired' | 'RootAccountRequired' | 'UnsignedOrigin' | 'MemberProfileNotFound' | 'HandleAlreadyRegistered' | 'HandleMustBeProvidedDuringRegistration' | 'ReferrerIsNotMember' | 'CannotTransferInvitesForNotMember' | 'NotEnoughInvites' | 'WorkingGroupLeaderNotSet' | 'StakingAccountIsAlreadyRegistered' | 'StakingAccountDoesntExist' | 'StakingAccountAlreadyConfirmed' | 'WorkingGroupBudgetIsNotSufficientForInviting' | 'ConflictingLock' | 'CannotExceedReferralCutPercentLimit' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToCoverStake' | 'GifLockExceedsCredit' | 'InsufficientBalanceToGift';
     }
-    /** @name PalletForumCategory (507) */
+    /** @name PalletForumCategory (532) */
     interface PalletForumCategory extends Struct {
         readonly titleHash: H256;
         readonly descriptionHash: H256;
@@ -4229,22 +4534,22 @@ declare module '@polkadot/types/lookup' {
         readonly parentCategoryId: Option<u64>;
         readonly stickyThreadIds: Vec<u64>;
     }
-    /** @name PalletForumThread (508) */
+    /** @name PalletForumThread (533) */
     interface PalletForumThread extends Struct {
         readonly categoryId: u64;
         readonly authorId: u64;
-        readonly cleanupPayOff: u128;
-        readonly numberOfPosts: u64;
+        readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
+        readonly numberOfEditablePosts: u64;
     }
-    /** @name PalletForumPost (509) */
+    /** @name PalletForumPost (534) */
     interface PalletForumPost extends Struct {
         readonly threadId: u64;
         readonly textHash: H256;
         readonly authorId: u64;
-        readonly cleanupPayOff: u128;
+        readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
         readonly lastEdited: u32;
     }
-    /** @name PalletForumError (510) */
+    /** @name PalletForumError (535) */
     interface PalletForumError extends Enum {
         readonly isOriginNotForumLead: boolean;
         readonly isForumUserIdNotMatchAccount: boolean;
@@ -4270,30 +4575,103 @@ declare module '@polkadot/types/lookup' {
         readonly isModeratorCantDeleteCategory: boolean;
         readonly isModeratorCantUpdateCategory: boolean;
         readonly isStickiedThreadIdsDuplicates: boolean;
-        readonly isDataMigrationNotDone: boolean;
         readonly isMapSizeLimit: boolean;
         readonly isPathLengthShouldBeGreaterThanZero: boolean;
-        readonly type: 'OriginNotForumLead' | 'ForumUserIdNotMatchAccount' | 'ModeratorIdNotMatchAccount' | 'AccountDoesNotMatchThreadAuthor' | 'ThreadDoesNotExist' | 'ModeratorModerateOriginCategory' | 'ModeratorModerateDestinationCategory' | 'ThreadMoveInvalid' | 'ThreadNotBeingUpdated' | 'InsufficientBalanceForThreadCreation' | 'CannotDeleteThreadWithOutstandingPosts' | 'PostDoesNotExist' | 'AccountDoesNotMatchPostAuthor' | 'InsufficientBalanceForPost' | 'CategoryNotBeingUpdated' | 'AncestorCategoryImmutable' | 'MaxValidCategoryDepthExceeded' | 'CategoryDoesNotExist' | 'CategoryModeratorDoesNotExist' | 'CategoryNotEmptyThreads' | 'CategoryNotEmptyCategories' | 'ModeratorCantDeleteCategory' | 'ModeratorCantUpdateCategory' | 'StickiedThreadIdsDuplicates' | 'DataMigrationNotDone' | 'MapSizeLimit' | 'PathLengthShouldBeGreaterThanZero';
+        readonly type: 'OriginNotForumLead' | 'ForumUserIdNotMatchAccount' | 'ModeratorIdNotMatchAccount' | 'AccountDoesNotMatchThreadAuthor' | 'ThreadDoesNotExist' | 'ModeratorModerateOriginCategory' | 'ModeratorModerateDestinationCategory' | 'ThreadMoveInvalid' | 'ThreadNotBeingUpdated' | 'InsufficientBalanceForThreadCreation' | 'CannotDeleteThreadWithOutstandingPosts' | 'PostDoesNotExist' | 'AccountDoesNotMatchPostAuthor' | 'InsufficientBalanceForPost' | 'CategoryNotBeingUpdated' | 'AncestorCategoryImmutable' | 'MaxValidCategoryDepthExceeded' | 'CategoryDoesNotExist' | 'CategoryModeratorDoesNotExist' | 'CategoryNotEmptyThreads' | 'CategoryNotEmptyCategories' | 'ModeratorCantDeleteCategory' | 'ModeratorCantUpdateCategory' | 'StickiedThreadIdsDuplicates' | 'MapSizeLimit' | 'PathLengthShouldBeGreaterThanZero';
     }
-    /** @name PalletConstitutionConstitutionInfo (511) */
+    /** @name PalletConstitutionConstitutionInfo (536) */
     interface PalletConstitutionConstitutionInfo extends Struct {
         readonly textHash: Bytes;
     }
-    /** @name PalletContentVideoRecord (513) */
+    /** @name PalletBountyBountyRecord (537) */
+    interface PalletBountyBountyRecord extends Struct {
+        readonly creationParams: PalletBountyBountyParameters;
+        readonly totalFunding: u128;
+        readonly milestone: PalletBountyBountyMilestone;
+        readonly activeWorkEntryCount: u32;
+        readonly hasUnpaidOracleReward: bool;
+    }
+    /** @name PalletBountyBountyMilestone (538) */
+    interface PalletBountyBountyMilestone extends Enum {
+        readonly isCreated: boolean;
+        readonly asCreated: {
+            readonly createdAt: u32;
+            readonly hasContributions: bool;
+        } & Struct;
+        readonly isBountyMaxFundingReached: boolean;
+        readonly isWorkSubmitted: boolean;
+        readonly isTerminated: boolean;
+        readonly isJudgmentSubmitted: boolean;
+        readonly asJudgmentSubmitted: {
+            readonly successfulBounty: bool;
+        } & Struct;
+        readonly type: 'Created' | 'BountyMaxFundingReached' | 'WorkSubmitted' | 'Terminated' | 'JudgmentSubmitted';
+    }
+    /** @name PalletBountyContribution (540) */
+    interface PalletBountyContribution extends Struct {
+        readonly amount: u128;
+        readonly funderStateBloatBondAmount: u128;
+    }
+    /** @name PalletBountyEntryRecord (541) */
+    interface PalletBountyEntryRecord extends Struct {
+        readonly memberId: u64;
+        readonly stakingAccountId: AccountId32;
+        readonly submittedAt: u32;
+        readonly workSubmitted: bool;
+    }
+    /** @name PalletBountyError (542) */
+    interface PalletBountyError extends Enum {
+        readonly isMinFundingAmountCannotBeGreaterThanMaxAmount: boolean;
+        readonly isBountyDoesntExist: boolean;
+        readonly isSwitchOracleOriginIsRoot: boolean;
+        readonly isInvalidStageUnexpectedFunding: boolean;
+        readonly isInvalidStageUnexpectedNoFundingContributed: boolean;
+        readonly isInvalidStageUnexpectedCancelled: boolean;
+        readonly isInvalidStageUnexpectedWorkSubmission: boolean;
+        readonly isInvalidStageUnexpectedJudgment: boolean;
+        readonly isInvalidStageUnexpectedSuccessfulBountyWithdrawal: boolean;
+        readonly isInvalidStageUnexpectedFailedBountyWithdrawal: boolean;
+        readonly isInsufficientBalanceForBounty: boolean;
+        readonly isNoBountyContributionFound: boolean;
+        readonly isInsufficientBalanceForStake: boolean;
+        readonly isConflictingStakes: boolean;
+        readonly isWorkEntryDoesntExist: boolean;
+        readonly isCherryLessThenMinimumAllowed: boolean;
+        readonly isCannotSubmitWorkToClosedContractBounty: boolean;
+        readonly isClosedContractMemberListIsEmpty: boolean;
+        readonly isClosedContractMemberListIsTooLarge: boolean;
+        readonly isClosedContractMemberNotFound: boolean;
+        readonly isInvalidOracleMemberId: boolean;
+        readonly isInvalidStakingAccountForMember: boolean;
+        readonly isZeroWinnerReward: boolean;
+        readonly isTotalRewardShouldBeEqualToTotalFunding: boolean;
+        readonly isEntrantStakeIsLessThanMininum: boolean;
+        readonly isFundingAmountCannotBeZero: boolean;
+        readonly isFundingPeriodCannotBeZero: boolean;
+        readonly isWinnerShouldHasWorkSubmission: boolean;
+        readonly isInvalidContributorActorSpecified: boolean;
+        readonly isInvalidOracleActorSpecified: boolean;
+        readonly isInvalidEntrantWorkerSpecified: boolean;
+        readonly isInvalidCreatorActorSpecified: boolean;
+        readonly isWorkEntryDoesntBelongToWorker: boolean;
+        readonly isOracleRewardAlreadyWithdrawn: boolean;
+        readonly type: 'MinFundingAmountCannotBeGreaterThanMaxAmount' | 'BountyDoesntExist' | 'SwitchOracleOriginIsRoot' | 'InvalidStageUnexpectedFunding' | 'InvalidStageUnexpectedNoFundingContributed' | 'InvalidStageUnexpectedCancelled' | 'InvalidStageUnexpectedWorkSubmission' | 'InvalidStageUnexpectedJudgment' | 'InvalidStageUnexpectedSuccessfulBountyWithdrawal' | 'InvalidStageUnexpectedFailedBountyWithdrawal' | 'InsufficientBalanceForBounty' | 'NoBountyContributionFound' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'WorkEntryDoesntExist' | 'CherryLessThenMinimumAllowed' | 'CannotSubmitWorkToClosedContractBounty' | 'ClosedContractMemberListIsEmpty' | 'ClosedContractMemberListIsTooLarge' | 'ClosedContractMemberNotFound' | 'InvalidOracleMemberId' | 'InvalidStakingAccountForMember' | 'ZeroWinnerReward' | 'TotalRewardShouldBeEqualToTotalFunding' | 'EntrantStakeIsLessThanMininum' | 'FundingAmountCannotBeZero' | 'FundingPeriodCannotBeZero' | 'WinnerShouldHasWorkSubmission' | 'InvalidContributorActorSpecified' | 'InvalidOracleActorSpecified' | 'InvalidEntrantWorkerSpecified' | 'InvalidCreatorActorSpecified' | 'WorkEntryDoesntBelongToWorker' | 'OracleRewardAlreadyWithdrawn';
+    }
+    /** @name PalletContentVideoRecord (544) */
     interface PalletContentVideoRecord extends Struct {
         readonly inChannel: u64;
         readonly nftStatus: Option<PalletContentNftTypesOwnedNft>;
         readonly dataObjects: BTreeSet<u64>;
-        readonly videoStateBloatBond: u128;
+        readonly videoStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
     }
-    /** @name PalletContentNftTypesOwnedNft (514) */
+    /** @name PalletContentNftTypesOwnedNft (545) */
     interface PalletContentNftTypesOwnedNft extends Struct {
         readonly owner: PalletContentNftTypesNftOwner;
         readonly transactionalStatus: PalletContentNftTypesTransactionalStatusRecord;
         readonly creatorRoyalty: Option<Perbill>;
         readonly openAuctionsNonce: u64;
     }
-    /** @name PalletContentNftTypesTransactionalStatusRecord (515) */
+    /** @name PalletContentNftTypesTransactionalStatusRecord (546) */
     interface PalletContentNftTypesTransactionalStatusRecord extends Enum {
         readonly isIdle: boolean;
         readonly isInitiatedOfferToMember: boolean;
@@ -4306,7 +4684,7 @@ declare module '@polkadot/types/lookup' {
         readonly asBuyNow: u128;
         readonly type: 'Idle' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction' | 'BuyNow';
     }
-    /** @name PalletContentNftTypesEnglishAuctionRecord (516) */
+    /** @name PalletContentNftTypesEnglishAuctionRecord (547) */
     interface PalletContentNftTypesEnglishAuctionRecord extends Struct {
         readonly startingPrice: u128;
         readonly buyNowPrice: Option<u128>;
@@ -4317,12 +4695,12 @@ declare module '@polkadot/types/lookup' {
         readonly minBidStep: u128;
         readonly topBid: Option<PalletContentNftTypesEnglishAuctionBid>;
     }
-    /** @name PalletContentNftTypesEnglishAuctionBid (518) */
+    /** @name PalletContentNftTypesEnglishAuctionBid (549) */
     interface PalletContentNftTypesEnglishAuctionBid extends Struct {
         readonly amount: u128;
         readonly bidderId: u64;
     }
-    /** @name PalletContentNftTypesOpenAuctionRecord (519) */
+    /** @name PalletContentNftTypesOpenAuctionRecord (550) */
     interface PalletContentNftTypesOpenAuctionRecord extends Struct {
         readonly startingPrice: u128;
         readonly buyNowPrice: Option<u128>;
@@ -4331,31 +4709,41 @@ declare module '@polkadot/types/lookup' {
         readonly auctionId: u64;
         readonly start: u32;
     }
-    /** @name PalletContentNftTypesNftOwner (520) */
+    /** @name PalletContentNftTypesNftOwner (551) */
     interface PalletContentNftTypesNftOwner extends Enum {
         readonly isChannelOwner: boolean;
         readonly isMember: boolean;
         readonly asMember: u64;
         readonly type: 'ChannelOwner' | 'Member';
     }
-    /** @name PalletContentPermissionsCuratorGroup (522) */
+    /** @name PalletContentPermissionsCuratorGroup (554) */
     interface PalletContentPermissionsCuratorGroup extends Struct {
         readonly curators: BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>;
         readonly active: bool;
         readonly permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupContentModerationAction>>;
     }
-    /** @name PalletContentNftTypesOpenAuctionBidRecord (523) */
+    /** @name PalletContentNftTypesOpenAuctionBidRecord (555) */
     interface PalletContentNftTypesOpenAuctionBidRecord extends Struct {
         readonly amount: u128;
         readonly madeAtBlock: u32;
         readonly auctionId: u64;
     }
-    /** @name PalletContentErrorsError (524) */
+    /** @name PalletContentErrorsError (556) */
     interface PalletContentErrorsError extends Enum {
         readonly isChannelStateBloatBondChanged: boolean;
         readonly isVideoStateBloatBondChanged: boolean;
         readonly isMinCashoutValueTooLow: boolean;
         readonly isMaxCashoutValueTooHigh: boolean;
+        readonly isMaxNumberOfChannelCollaboratorsExceeded: boolean;
+        readonly isMaxNumberOfChannelAssetsExceeded: boolean;
+        readonly isMaxNumberOfVideoAssetsExceeded: boolean;
+        readonly isInvalidChannelBagWitnessProvided: boolean;
+        readonly isInvalidStorageBucketsNumWitnessProvided: boolean;
+        readonly isMissingStorageBucketsNumWitness: boolean;
+        readonly isChannelOwnerMemberDoesNotExist: boolean;
+        readonly isChannelOwnerCuratorGroupDoesNotExist: boolean;
+        readonly isChannelStateBloatBondBelowExistentialDeposit: boolean;
+        readonly isNumberOfAssetsToRemoveIsZero: boolean;
         readonly isCuratorIsNotAMemberOfGivenCuratorGroup: boolean;
         readonly isCuratorIsAlreadyAMemberOfGivenCuratorGroup: boolean;
         readonly isCuratorGroupDoesNotExist: boolean;
@@ -4373,6 +4761,7 @@ declare module '@polkadot/types/lookup' {
         readonly isVideoInSeason: boolean;
         readonly isActorCannotBeLead: boolean;
         readonly isActorCannotOwnChannel: boolean;
+        readonly isNftAlreadyOwnedByChannel: boolean;
         readonly isNftAlreadyExists: boolean;
         readonly isNftDoesNotExist: boolean;
         readonly isOverflowOrUnderflowHappened: boolean;
@@ -4413,11 +4802,13 @@ declare module '@polkadot/types/lookup' {
         readonly isIsNotEnglishAuctionType: boolean;
         readonly isBidLockDurationIsNotExpired: boolean;
         readonly isNftAuctionIsAlreadyExpired: boolean;
-        readonly isBuyNowIsLessThenStartingPrice: boolean;
+        readonly isBuyNowMustBeGreaterThanStartingPrice: boolean;
         readonly isTargetMemberDoesNotExist: boolean;
         readonly isInvalidNftOfferWitnessPriceProvided: boolean;
         readonly isMaxAuctionWhiteListLengthUpperBoundExceeded: boolean;
         readonly isWhitelistHasOnlyOneMember: boolean;
+        readonly isWhitelistedMemberDoesNotExist: boolean;
+        readonly isNftNonChannelOwnerDoesNotExist: boolean;
         readonly isExtensionPeriodIsGreaterThenAuctionDuration: boolean;
         readonly isNoAssetsSpecified: boolean;
         readonly isInvalidAssetsProvided: boolean;
@@ -4433,7 +4824,7 @@ declare module '@polkadot/types/lookup' {
         readonly isPaymentProofVerificationFailed: boolean;
         readonly isCashoutAmountExceedsMaximumAmount: boolean;
         readonly isCashoutAmountBelowMinimumAmount: boolean;
-        readonly isWithdrawFromChannelAmountExceedsBalanceMinusExistentialDeposit: boolean;
+        readonly isWithdrawalAmountExceedsChannelAccountWithdrawableBalance: boolean;
         readonly isWithdrawFromChannelAmountIsZero: boolean;
         readonly isChannelCashoutsDisabled: boolean;
         readonly isMinCashoutAllowedExceedsMaxCashoutAllowed: boolean;
@@ -4464,23 +4855,23 @@ declare module '@polkadot/types/lookup' {
         readonly isPatronageCanOnlyBeClaimedForMemberOwnedChannels: boolean;
         readonly isChannelTransfersBlockedDuringRevenueSplits: boolean;
         readonly isChannelTransfersBlockedDuringTokenSales: boolean;
-        readonly type: 'ChannelStateBloatBondChanged' | 'VideoStateBloatBondChanged' | 'MinCashoutValueTooLow' | 'MaxCashoutValueTooHigh' | 'CuratorIsNotAMemberOfGivenCuratorGroup' | 'CuratorIsAlreadyAMemberOfGivenCuratorGroup' | 'CuratorGroupDoesNotExist' | 'CuratorsPerGroupLimitReached' | 'CuratorGroupIsNotActive' | 'CuratorIdInvalid' | 'LeadAuthFailed' | 'MemberAuthFailed' | 'CuratorAuthFailed' | 'BadOrigin' | 'ActorNotAuthorized' | 'CategoryDoesNotExist' | 'ChannelDoesNotExist' | 'VideoDoesNotExist' | 'VideoInSeason' | 'ActorCannotBeLead' | 'ActorCannotOwnChannel' | 'NftAlreadyExists' | 'NftDoesNotExist' | 'OverflowOrUnderflowHappened' | 'DoesNotOwnNft' | 'RoyaltyUpperBoundExceeded' | 'RoyaltyLowerBoundExceeded' | 'AuctionDurationUpperBoundExceeded' | 'AuctionDurationLowerBoundExceeded' | 'ExtensionPeriodUpperBoundExceeded' | 'ExtensionPeriodLowerBoundExceeded' | 'BidLockDurationUpperBoundExceeded' | 'BidLockDurationLowerBoundExceeded' | 'StartingPriceUpperBoundExceeded' | 'StartingPriceLowerBoundExceeded' | 'AuctionBidStepUpperBoundExceeded' | 'AuctionBidStepLowerBoundExceeded' | 'InsufficientBalance' | 'BidStepConstraintViolated' | 'InvalidBidAmountSpecified' | 'StartingPriceConstraintViolated' | 'ActionHasBidsAlready' | 'NftIsNotIdle' | 'PendingOfferDoesNotExist' | 'RewardAccountIsNotSet' | 'ActorIsNotBidder' | 'AuctionCannotBeCompleted' | 'BidDoesNotExist' | 'BidIsForPastAuction' | 'StartsAtLowerBoundExceeded' | 'StartsAtUpperBoundExceeded' | 'AuctionDidNotStart' | 'NotInAuctionState' | 'MemberIsNotAllowedToParticipate' | 'MemberProfileNotFound' | 'NftNotInBuyNowState' | 'InvalidBuyNowWitnessPriceProvided' | 'IsNotOpenAuctionType' | 'IsNotEnglishAuctionType' | 'BidLockDurationIsNotExpired' | 'NftAuctionIsAlreadyExpired' | 'BuyNowIsLessThenStartingPrice' | 'TargetMemberDoesNotExist' | 'InvalidNftOfferWitnessPriceProvided' | 'MaxAuctionWhiteListLengthUpperBoundExceeded' | 'WhitelistHasOnlyOneMember' | 'ExtensionPeriodIsGreaterThenAuctionDuration' | 'NoAssetsSpecified' | 'InvalidAssetsProvided' | 'ChannelContainsVideos' | 'ChannelContainsAssets' | 'InvalidBagSizeSpecified' | 'MigrationNotFinished' | 'ReplyDoesNotExist' | 'UnsufficientBalance' | 'InsufficientTreasuryBalance' | 'InvalidMemberProvided' | 'ActorNotAMember' | 'PaymentProofVerificationFailed' | 'CashoutAmountExceedsMaximumAmount' | 'CashoutAmountBelowMinimumAmount' | 'WithdrawFromChannelAmountExceedsBalanceMinusExistentialDeposit' | 'WithdrawFromChannelAmountIsZero' | 'ChannelCashoutsDisabled' | 'MinCashoutAllowedExceedsMaxCashoutAllowed' | 'CuratorModerationActionNotAllowed' | 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded' | 'ChannelFeaturePaused' | 'ChannelBagMissing' | 'AssetsToRemoveBeyondEntityAssetsSet' | 'InvalidVideoDataObjectsCountProvided' | 'InvalidChannelTransferStatus' | 'InvalidChannelTransferAcceptor' | 'InvalidChannelTransferCommitmentParams' | 'ChannelAgentInsufficientPermissions' | 'InvalidChannelOwner' | 'ZeroReward' | 'InsufficientBalanceForTransfer' | 'InsufficientBalanceForChannelCreation' | 'InsufficientBalanceForVideoCreation' | 'InsufficientCouncilBudget' | 'GlobalNftDailyLimitExceeded' | 'GlobalNftWeeklyLimitExceeded' | 'ChannelNftDailyLimitExceeded' | 'ChannelNftWeeklyLimitExceeded' | 'CreatorTokenAlreadyIssued' | 'CreatorTokenNotIssued' | 'MemberIdCouldNotBeDerivedFromActor' | 'CannotWithdrawFromChannelWithCreatorTokenIssued' | 'PatronageCanOnlyBeClaimedForMemberOwnedChannels' | 'ChannelTransfersBlockedDuringRevenueSplits' | 'ChannelTransfersBlockedDuringTokenSales';
+        readonly type: 'ChannelStateBloatBondChanged' | 'VideoStateBloatBondChanged' | 'MinCashoutValueTooLow' | 'MaxCashoutValueTooHigh' | 'MaxNumberOfChannelCollaboratorsExceeded' | 'MaxNumberOfChannelAssetsExceeded' | 'MaxNumberOfVideoAssetsExceeded' | 'InvalidChannelBagWitnessProvided' | 'InvalidStorageBucketsNumWitnessProvided' | 'MissingStorageBucketsNumWitness' | 'ChannelOwnerMemberDoesNotExist' | 'ChannelOwnerCuratorGroupDoesNotExist' | 'ChannelStateBloatBondBelowExistentialDeposit' | 'NumberOfAssetsToRemoveIsZero' | 'CuratorIsNotAMemberOfGivenCuratorGroup' | 'CuratorIsAlreadyAMemberOfGivenCuratorGroup' | 'CuratorGroupDoesNotExist' | 'CuratorsPerGroupLimitReached' | 'CuratorGroupIsNotActive' | 'CuratorIdInvalid' | 'LeadAuthFailed' | 'MemberAuthFailed' | 'CuratorAuthFailed' | 'BadOrigin' | 'ActorNotAuthorized' | 'CategoryDoesNotExist' | 'ChannelDoesNotExist' | 'VideoDoesNotExist' | 'VideoInSeason' | 'ActorCannotBeLead' | 'ActorCannotOwnChannel' | 'NftAlreadyOwnedByChannel' | 'NftAlreadyExists' | 'NftDoesNotExist' | 'OverflowOrUnderflowHappened' | 'DoesNotOwnNft' | 'RoyaltyUpperBoundExceeded' | 'RoyaltyLowerBoundExceeded' | 'AuctionDurationUpperBoundExceeded' | 'AuctionDurationLowerBoundExceeded' | 'ExtensionPeriodUpperBoundExceeded' | 'ExtensionPeriodLowerBoundExceeded' | 'BidLockDurationUpperBoundExceeded' | 'BidLockDurationLowerBoundExceeded' | 'StartingPriceUpperBoundExceeded' | 'StartingPriceLowerBoundExceeded' | 'AuctionBidStepUpperBoundExceeded' | 'AuctionBidStepLowerBoundExceeded' | 'InsufficientBalance' | 'BidStepConstraintViolated' | 'InvalidBidAmountSpecified' | 'StartingPriceConstraintViolated' | 'ActionHasBidsAlready' | 'NftIsNotIdle' | 'PendingOfferDoesNotExist' | 'RewardAccountIsNotSet' | 'ActorIsNotBidder' | 'AuctionCannotBeCompleted' | 'BidDoesNotExist' | 'BidIsForPastAuction' | 'StartsAtLowerBoundExceeded' | 'StartsAtUpperBoundExceeded' | 'AuctionDidNotStart' | 'NotInAuctionState' | 'MemberIsNotAllowedToParticipate' | 'MemberProfileNotFound' | 'NftNotInBuyNowState' | 'InvalidBuyNowWitnessPriceProvided' | 'IsNotOpenAuctionType' | 'IsNotEnglishAuctionType' | 'BidLockDurationIsNotExpired' | 'NftAuctionIsAlreadyExpired' | 'BuyNowMustBeGreaterThanStartingPrice' | 'TargetMemberDoesNotExist' | 'InvalidNftOfferWitnessPriceProvided' | 'MaxAuctionWhiteListLengthUpperBoundExceeded' | 'WhitelistHasOnlyOneMember' | 'WhitelistedMemberDoesNotExist' | 'NftNonChannelOwnerDoesNotExist' | 'ExtensionPeriodIsGreaterThenAuctionDuration' | 'NoAssetsSpecified' | 'InvalidAssetsProvided' | 'ChannelContainsVideos' | 'ChannelContainsAssets' | 'InvalidBagSizeSpecified' | 'MigrationNotFinished' | 'ReplyDoesNotExist' | 'UnsufficientBalance' | 'InsufficientTreasuryBalance' | 'InvalidMemberProvided' | 'ActorNotAMember' | 'PaymentProofVerificationFailed' | 'CashoutAmountExceedsMaximumAmount' | 'CashoutAmountBelowMinimumAmount' | 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance' | 'WithdrawFromChannelAmountIsZero' | 'ChannelCashoutsDisabled' | 'MinCashoutAllowedExceedsMaxCashoutAllowed' | 'CuratorModerationActionNotAllowed' | 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded' | 'ChannelFeaturePaused' | 'ChannelBagMissing' | 'AssetsToRemoveBeyondEntityAssetsSet' | 'InvalidVideoDataObjectsCountProvided' | 'InvalidChannelTransferStatus' | 'InvalidChannelTransferAcceptor' | 'InvalidChannelTransferCommitmentParams' | 'ChannelAgentInsufficientPermissions' | 'InvalidChannelOwner' | 'ZeroReward' | 'InsufficientBalanceForTransfer' | 'InsufficientBalanceForChannelCreation' | 'InsufficientBalanceForVideoCreation' | 'InsufficientCouncilBudget' | 'GlobalNftDailyLimitExceeded' | 'GlobalNftWeeklyLimitExceeded' | 'ChannelNftDailyLimitExceeded' | 'ChannelNftWeeklyLimitExceeded' | 'CreatorTokenAlreadyIssued' | 'CreatorTokenNotIssued' | 'MemberIdCouldNotBeDerivedFromActor' | 'CannotWithdrawFromChannelWithCreatorTokenIssued' | 'PatronageCanOnlyBeClaimedForMemberOwnedChannels' | 'ChannelTransfersBlockedDuringRevenueSplits' | 'ChannelTransfersBlockedDuringTokenSales';
     }
-    /** @name PalletStorageBagRecord (525) */
+    /** @name PalletStorageBagRecord (557) */
     interface PalletStorageBagRecord extends Struct {
         readonly storedBy: BTreeSet<u64>;
         readonly distributedBy: BTreeSet<PalletStorageDistributionBucketIdRecord>;
         readonly objectsTotalSize: u64;
         readonly objectsNumber: u64;
     }
-    /** @name PalletStorageStorageBucketRecord (526) */
+    /** @name PalletStorageStorageBucketRecord (558) */
     interface PalletStorageStorageBucketRecord extends Struct {
         readonly operatorStatus: PalletStorageStorageBucketOperatorStatus;
         readonly acceptingNewBags: bool;
         readonly voucher: PalletStorageVoucher;
         readonly assignedBags: u64;
     }
-    /** @name PalletStorageStorageBucketOperatorStatus (527) */
+    /** @name PalletStorageStorageBucketOperatorStatus (559) */
     interface PalletStorageStorageBucketOperatorStatus extends Enum {
         readonly isMissing: boolean;
         readonly isInvitedStorageWorker: boolean;
@@ -4489,23 +4880,23 @@ declare module '@polkadot/types/lookup' {
         readonly asStorageWorker: ITuple<[u64, AccountId32]>;
         readonly type: 'Missing' | 'InvitedStorageWorker' | 'StorageWorker';
     }
-    /** @name PalletStorageDynamicBagCreationPolicy (528) */
+    /** @name PalletStorageDynamicBagCreationPolicy (560) */
     interface PalletStorageDynamicBagCreationPolicy extends Struct {
         readonly numberOfStorageBuckets: u64;
         readonly families: BTreeMap<u64, u32>;
     }
-    /** @name PalletStorageDataObject (530) */
+    /** @name PalletStorageDataObject (562) */
     interface PalletStorageDataObject extends Struct {
         readonly accepted: bool;
-        readonly stateBloatBond: u128;
+        readonly stateBloatBond: PalletCommonBloatBondRepayableBloatBond;
         readonly size_: u64;
         readonly ipfsContentId: Bytes;
     }
-    /** @name PalletStorageDistributionBucketFamilyRecord (531) */
+    /** @name PalletStorageDistributionBucketFamilyRecord (563) */
     interface PalletStorageDistributionBucketFamilyRecord extends Struct {
         readonly nextDistributionBucketIndex: u64;
     }
-    /** @name PalletStorageDistributionBucketRecord (532) */
+    /** @name PalletStorageDistributionBucketRecord (564) */
     interface PalletStorageDistributionBucketRecord extends Struct {
         readonly acceptingNewBags: bool;
         readonly distributing: bool;
@@ -4513,12 +4904,12 @@ declare module '@polkadot/types/lookup' {
         readonly operators: BTreeSet<u64>;
         readonly assignedBags: u64;
     }
-    /** @name PalletCommonConstraintsBoundedValueConstraint (533) */
+    /** @name PalletCommonConstraintsBoundedValueConstraint (565) */
     interface PalletCommonConstraintsBoundedValueConstraint extends Struct {
         readonly min: u64;
         readonly maxMinDiff: u64;
     }
-    /** @name PalletStorageError (534) */
+    /** @name PalletStorageError (566) */
     interface PalletStorageError extends Enum {
         readonly isArithmeticError: boolean;
         readonly isInvalidCidLength: boolean;
@@ -4583,18 +4974,19 @@ declare module '@polkadot/types/lookup' {
         readonly isInvalidTransactorAccount: boolean;
         readonly isNumberOfStorageBucketsOutsideOfAllowedContraints: boolean;
         readonly isNumberOfDistributionBucketsOutsideOfAllowedContraints: boolean;
-        readonly type: 'ArithmeticError' | 'InvalidCidLength' | 'NoObjectsOnUpload' | 'StorageBucketDoesntExist' | 'StorageBucketIsNotBoundToBag' | 'StorageBucketIsBoundToBag' | 'NoStorageBucketInvitation' | 'StorageProviderAlreadySet' | 'StorageProviderMustBeSet' | 'DifferentStorageProviderInvited' | 'InvitedStorageProvider' | 'StorageBucketIdCollectionsAreEmpty' | 'StorageBucketsNumberViolatesDynamicBagCreationPolicy' | 'DistributionBucketsViolatesDynamicBagCreationPolicy' | 'EmptyContentId' | 'ZeroObjectSize' | 'InvalidStateBloatBondSourceAccount' | 'InvalidStorageProvider' | 'InsufficientBalance' | 'DataObjectDoesntExist' | 'UploadingBlocked' | 'DataObjectIdCollectionIsEmpty' | 'SourceAndDestinationBagsAreEqual' | 'DataObjectBlacklisted' | 'BlacklistSizeLimitExceeded' | 'VoucherMaxObjectSizeLimitExceeded' | 'VoucherMaxObjectNumberLimitExceeded' | 'StorageBucketObjectNumberLimitReached' | 'StorageBucketObjectSizeLimitReached' | 'InsufficientTreasuryBalance' | 'CannotDeleteNonEmptyStorageBucket' | 'DataObjectIdParamsAreEmpty' | 'StorageBucketsPerBagLimitTooLow' | 'StorageBucketsPerBagLimitTooHigh' | 'StorageBucketPerBagLimitExceeded' | 'StorageBucketDoesntAcceptNewBags' | 'DynamicBagExists' | 'DynamicBagDoesntExist' | 'StorageProviderOperatorDoesntExist' | 'DataSizeFeeChanged' | 'DataObjectStateBloatBondChanged' | 'CannotDeleteNonEmptyDynamicBag' | 'MaxDistributionBucketFamilyNumberLimitExceeded' | 'DistributionBucketFamilyDoesntExist' | 'DistributionBucketDoesntExist' | 'DistributionBucketIdCollectionsAreEmpty' | 'DistributionBucketDoesntAcceptNewBags' | 'MaxDistributionBucketNumberPerBagLimitExceeded' | 'DistributionBucketIsNotBoundToBag' | 'DistributionBucketIsBoundToBag' | 'DistributionBucketsPerBagLimitTooLow' | 'DistributionBucketsPerBagLimitTooHigh' | 'DistributionProviderOperatorDoesntExist' | 'DistributionProviderOperatorAlreadyInvited' | 'DistributionProviderOperatorSet' | 'NoDistributionBucketInvitation' | 'MustBeDistributionProviderOperatorForBucket' | 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached' | 'DistributionFamilyBoundToBagCreationPolicy' | 'MaxDataObjectSizeExceeded' | 'InvalidTransactorAccount' | 'NumberOfStorageBucketsOutsideOfAllowedContraints' | 'NumberOfDistributionBucketsOutsideOfAllowedContraints';
+        readonly isCallDisabled: boolean;
+        readonly type: 'ArithmeticError' | 'InvalidCidLength' | 'NoObjectsOnUpload' | 'StorageBucketDoesntExist' | 'StorageBucketIsNotBoundToBag' | 'StorageBucketIsBoundToBag' | 'NoStorageBucketInvitation' | 'StorageProviderAlreadySet' | 'StorageProviderMustBeSet' | 'DifferentStorageProviderInvited' | 'InvitedStorageProvider' | 'StorageBucketIdCollectionsAreEmpty' | 'StorageBucketsNumberViolatesDynamicBagCreationPolicy' | 'DistributionBucketsViolatesDynamicBagCreationPolicy' | 'EmptyContentId' | 'ZeroObjectSize' | 'InvalidStateBloatBondSourceAccount' | 'InvalidStorageProvider' | 'InsufficientBalance' | 'DataObjectDoesntExist' | 'UploadingBlocked' | 'DataObjectIdCollectionIsEmpty' | 'SourceAndDestinationBagsAreEqual' | 'DataObjectBlacklisted' | 'BlacklistSizeLimitExceeded' | 'VoucherMaxObjectSizeLimitExceeded' | 'VoucherMaxObjectNumberLimitExceeded' | 'StorageBucketObjectNumberLimitReached' | 'StorageBucketObjectSizeLimitReached' | 'InsufficientTreasuryBalance' | 'CannotDeleteNonEmptyStorageBucket' | 'DataObjectIdParamsAreEmpty' | 'StorageBucketsPerBagLimitTooLow' | 'StorageBucketsPerBagLimitTooHigh' | 'StorageBucketPerBagLimitExceeded' | 'StorageBucketDoesntAcceptNewBags' | 'DynamicBagExists' | 'DynamicBagDoesntExist' | 'StorageProviderOperatorDoesntExist' | 'DataSizeFeeChanged' | 'DataObjectStateBloatBondChanged' | 'CannotDeleteNonEmptyDynamicBag' | 'MaxDistributionBucketFamilyNumberLimitExceeded' | 'DistributionBucketFamilyDoesntExist' | 'DistributionBucketDoesntExist' | 'DistributionBucketIdCollectionsAreEmpty' | 'DistributionBucketDoesntAcceptNewBags' | 'MaxDistributionBucketNumberPerBagLimitExceeded' | 'DistributionBucketIsNotBoundToBag' | 'DistributionBucketIsBoundToBag' | 'DistributionBucketsPerBagLimitTooLow' | 'DistributionBucketsPerBagLimitTooHigh' | 'DistributionProviderOperatorDoesntExist' | 'DistributionProviderOperatorAlreadyInvited' | 'DistributionProviderOperatorSet' | 'NoDistributionBucketInvitation' | 'MustBeDistributionProviderOperatorForBucket' | 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached' | 'DistributionFamilyBoundToBagCreationPolicy' | 'MaxDataObjectSizeExceeded' | 'InvalidTransactorAccount' | 'NumberOfStorageBucketsOutsideOfAllowedContraints' | 'NumberOfDistributionBucketsOutsideOfAllowedContraints' | 'CallDisabled';
     }
-    /** @name PalletProjectTokenAccountData (535) */
+    /** @name PalletProjectTokenAccountData (567) */
     interface PalletProjectTokenAccountData extends Struct {
         readonly vestingSchedules: BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>;
         readonly amount: u128;
         readonly splitStakingStatus: Option<PalletProjectTokenStakingStatus>;
-        readonly bloatBond: u128;
+        readonly bloatBond: PalletCommonBloatBondRepayableBloatBond;
         readonly nextVestingTransferId: u64;
         readonly lastSaleTotalPurchasedAmount: Option<ITuple<[u32, u128]>>;
     }
-    /** @name PalletProjectTokenVestingSchedule (536) */
+    /** @name PalletProjectTokenVestingSchedule (568) */
     interface PalletProjectTokenVestingSchedule extends Struct {
         readonly linearVestingStartBlock: u32;
         readonly linearVestingDuration: u32;
@@ -4602,12 +4994,12 @@ declare module '@polkadot/types/lookup' {
         readonly postCliffTotalAmount: u128;
         readonly burnedAmount: u128;
     }
-    /** @name PalletProjectTokenStakingStatus (537) */
+    /** @name PalletProjectTokenStakingStatus (569) */
     interface PalletProjectTokenStakingStatus extends Struct {
         readonly splitId: u32;
         readonly amount: u128;
     }
-    /** @name PalletProjectTokenTokenData (544) */
+    /** @name PalletProjectTokenTokenData (576) */
     interface PalletProjectTokenTokenData extends Struct {
         readonly totalSupply: u128;
         readonly tokensIssued: u128;
@@ -4621,31 +5013,31 @@ declare module '@polkadot/types/lookup' {
         readonly revenueSplit: PalletProjectTokenRevenueSplitState;
         readonly nextRevenueSplitId: u32;
     }
-    /** @name PalletProjectTokenRevenueSplitState (545) */
+    /** @name PalletProjectTokenRevenueSplitState (577) */
     interface PalletProjectTokenRevenueSplitState extends Enum {
         readonly isInactive: boolean;
         readonly isActive: boolean;
         readonly asActive: PalletProjectTokenRevenueSplitInfo;
         readonly type: 'Inactive' | 'Active';
     }
-    /** @name PalletProjectTokenRevenueSplitInfo (546) */
+    /** @name PalletProjectTokenRevenueSplitInfo (578) */
     interface PalletProjectTokenRevenueSplitInfo extends Struct {
         readonly allocation: u128;
         readonly timeline: PalletProjectTokenTimeline;
         readonly dividendsClaimed: u128;
     }
-    /** @name PalletProjectTokenTimeline (547) */
+    /** @name PalletProjectTokenTimeline (579) */
     interface PalletProjectTokenTimeline extends Struct {
         readonly start: u32;
         readonly duration: u32;
     }
-    /** @name PalletProjectTokenPatronageData (549) */
+    /** @name PalletProjectTokenPatronageData (581) */
     interface PalletProjectTokenPatronageData extends Struct {
         readonly rate: Perquintill;
         readonly unclaimedPatronageTallyAmount: u128;
         readonly lastUnclaimedPatronageTallyBlock: u32;
     }
-    /** @name PalletProjectTokenErrorsError (551) */
+    /** @name PalletProjectTokenErrorsError (583) */
     interface PalletProjectTokenErrorsError extends Enum {
         readonly isInsufficientTransferrableBalance: boolean;
         readonly isTokenDoesNotExist: boolean;
@@ -4653,6 +5045,7 @@ declare module '@polkadot/types/lookup' {
         readonly isMerkleProofVerificationFailure: boolean;
         readonly isTargetPatronageRateIsHigherThanCurrentRate: boolean;
         readonly isTokenSymbolAlreadyInUse: boolean;
+        readonly isInitialAllocationToNonExistingMember: boolean;
         readonly isAccountAlreadyExists: boolean;
         readonly isTransferDestinationMemberDoesNotExist: boolean;
         readonly isTokenIssuanceNotInIdleState: boolean;
@@ -4694,9 +5087,9 @@ declare module '@polkadot/types/lookup' {
         readonly isRevenueSplitRateIsZero: boolean;
         readonly isBurnAmountIsZero: boolean;
         readonly isBurnAmountGreaterThanAccountTokensAmount: boolean;
-        readonly type: 'InsufficientTransferrableBalance' | 'TokenDoesNotExist' | 'AccountInformationDoesNotExist' | 'MerkleProofVerificationFailure' | 'TargetPatronageRateIsHigherThanCurrentRate' | 'TokenSymbolAlreadyInUse' | 'AccountAlreadyExists' | 'TransferDestinationMemberDoesNotExist' | 'TokenIssuanceNotInIdleState' | 'InsufficientJoyBalance' | 'JoyTransferSubjectToDusting' | 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode' | 'AttemptToRemoveNonEmptyAccount' | 'CannotJoinWhitelistInPermissionlessMode' | 'CannotDeissueTokenWithOutstandingAccounts' | 'NoUpcomingSale' | 'NoActiveSale' | 'InsufficientBalanceForTokenPurchase' | 'NotEnoughTokensOnSale' | 'SaleStartingBlockInThePast' | 'SaleAccessProofRequired' | 'SaleAccessProofParticipantIsNotSender' | 'SalePurchaseCapExceeded' | 'MaxVestingSchedulesPerAccountPerTokenReached' | 'PreviousSaleNotFinalized' | 'NoTokensToRecover' | 'SaleDurationTooShort' | 'SaleDurationIsZero' | 'SaleUpperBoundQuantityIsZero' | 'SaleCapPerMemberIsZero' | 'SaleUnitPriceIsZero' | 'SalePurchaseAmountIsZero' | 'RevenueSplitTimeToStartTooShort' | 'RevenueSplitDurationTooShort' | 'RevenueSplitAlreadyActiveForToken' | 'RevenueSplitNotActiveForToken' | 'RevenueSplitDidNotEnd' | 'RevenueSplitNotOngoing' | 'UserAlreadyParticipating' | 'InsufficientBalanceForSplitParticipation' | 'UserNotParticipantingInAnySplit' | 'CannotParticipateInSplitWithZeroAmount' | 'CannotIssueSplitWithZeroAllocationAmount' | 'CannotModifySupplyWhenRevenueSplitsAreActive' | 'RevenueSplitRateIsZero' | 'BurnAmountIsZero' | 'BurnAmountGreaterThanAccountTokensAmount';
+        readonly type: 'InsufficientTransferrableBalance' | 'TokenDoesNotExist' | 'AccountInformationDoesNotExist' | 'MerkleProofVerificationFailure' | 'TargetPatronageRateIsHigherThanCurrentRate' | 'TokenSymbolAlreadyInUse' | 'InitialAllocationToNonExistingMember' | 'AccountAlreadyExists' | 'TransferDestinationMemberDoesNotExist' | 'TokenIssuanceNotInIdleState' | 'InsufficientJoyBalance' | 'JoyTransferSubjectToDusting' | 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode' | 'AttemptToRemoveNonEmptyAccount' | 'CannotJoinWhitelistInPermissionlessMode' | 'CannotDeissueTokenWithOutstandingAccounts' | 'NoUpcomingSale' | 'NoActiveSale' | 'InsufficientBalanceForTokenPurchase' | 'NotEnoughTokensOnSale' | 'SaleStartingBlockInThePast' | 'SaleAccessProofRequired' | 'SaleAccessProofParticipantIsNotSender' | 'SalePurchaseCapExceeded' | 'MaxVestingSchedulesPerAccountPerTokenReached' | 'PreviousSaleNotFinalized' | 'NoTokensToRecover' | 'SaleDurationTooShort' | 'SaleDurationIsZero' | 'SaleUpperBoundQuantityIsZero' | 'SaleCapPerMemberIsZero' | 'SaleUnitPriceIsZero' | 'SalePurchaseAmountIsZero' | 'RevenueSplitTimeToStartTooShort' | 'RevenueSplitDurationTooShort' | 'RevenueSplitAlreadyActiveForToken' | 'RevenueSplitNotActiveForToken' | 'RevenueSplitDidNotEnd' | 'RevenueSplitNotOngoing' | 'UserAlreadyParticipating' | 'InsufficientBalanceForSplitParticipation' | 'UserNotParticipantingInAnySplit' | 'CannotParticipateInSplitWithZeroAmount' | 'CannotIssueSplitWithZeroAllocationAmount' | 'CannotModifySupplyWhenRevenueSplitsAreActive' | 'RevenueSplitRateIsZero' | 'BurnAmountIsZero' | 'BurnAmountGreaterThanAccountTokensAmount';
     }
-    /** @name PalletProposalsEngineProposal (552) */
+    /** @name PalletProposalsEngineProposal (584) */
     interface PalletProposalsEngineProposal extends Struct {
         readonly parameters: PalletProposalsEngineProposalParameters;
         readonly proposerId: u64;
@@ -4707,7 +5100,7 @@ declare module '@polkadot/types/lookup' {
         readonly nrOfCouncilConfirmations: u32;
         readonly stakingAccountId: Option<AccountId32>;
     }
-    /** @name PalletProposalsEngineProposalParameters (553) */
+    /** @name PalletProposalsEngineProposalParameters (585) */
     interface PalletProposalsEngineProposalParameters extends Struct {
         readonly votingPeriod: u32;
         readonly gracePeriod: u32;
@@ -4718,14 +5111,14 @@ declare module '@polkadot/types/lookup' {
         readonly requiredStake: Option<u128>;
         readonly constitutionality: u32;
     }
-    /** @name PalletProposalsEngineVotingResults (554) */
+    /** @name PalletProposalsEngineVotingResults (586) */
     interface PalletProposalsEngineVotingResults extends Struct {
         readonly abstentions: u32;
         readonly approvals: u32;
         readonly rejections: u32;
         readonly slashes: u32;
     }
-    /** @name PalletProposalsEngineError (556) */
+    /** @name PalletProposalsEngineError (588) */
     interface PalletProposalsEngineError extends Enum {
         readonly isEmptyTitleProvided: boolean;
         readonly isEmptyDescriptionProvided: boolean;
@@ -4750,19 +5143,19 @@ declare module '@polkadot/types/lookup' {
         readonly isInvalidStakingAccountForMember: boolean;
         readonly type: 'EmptyTitleProvided' | 'EmptyDescriptionProvided' | 'TitleIsTooLong' | 'DescriptionIsTooLong' | 'ProposalNotFound' | 'ProposalFinalized' | 'AlreadyVoted' | 'NotAuthor' | 'MaxActiveProposalNumberExceeded' | 'EmptyStake' | 'StakeShouldBeEmpty' | 'StakeDiffersFromRequired' | 'InvalidParameterApprovalThreshold' | 'InvalidParameterSlashingThreshold' | 'RequireRootOrigin' | 'ProposalHasVotes' | 'ZeroExactExecutionBlock' | 'InvalidExactExecutionBlock' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'InvalidStakingAccountForMember';
     }
-    /** @name PalletProposalsDiscussionDiscussionThread (557) */
+    /** @name PalletProposalsDiscussionDiscussionThread (589) */
     interface PalletProposalsDiscussionDiscussionThread extends Struct {
         readonly activatedAt: u32;
         readonly authorId: u64;
         readonly mode: PalletProposalsDiscussionThreadMode;
     }
-    /** @name PalletProposalsDiscussionDiscussionPost (558) */
+    /** @name PalletProposalsDiscussionDiscussionPost (590) */
     interface PalletProposalsDiscussionDiscussionPost extends Struct {
         readonly authorId: u64;
-        readonly cleanupPayOff: u128;
+        readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
         readonly lastEdited: u32;
     }
-    /** @name PalletProposalsDiscussionError (559) */
+    /** @name PalletProposalsDiscussionError (591) */
     interface PalletProposalsDiscussionError extends Enum {
         readonly isThreadDoesntExist: boolean;
         readonly isPostDoesntExist: boolean;
@@ -4770,11 +5163,12 @@ declare module '@polkadot/types/lookup' {
         readonly isCannotPostOnClosedThread: boolean;
         readonly isNotAuthorOrCouncilor: boolean;
         readonly isMaxWhiteListSizeExceeded: boolean;
+        readonly isWhitelistedMemberDoesNotExist: boolean;
         readonly isInsufficientBalanceForPost: boolean;
         readonly isCannotDeletePost: boolean;
-        readonly type: 'ThreadDoesntExist' | 'PostDoesntExist' | 'RequireRootOrigin' | 'CannotPostOnClosedThread' | 'NotAuthorOrCouncilor' | 'MaxWhiteListSizeExceeded' | 'InsufficientBalanceForPost' | 'CannotDeletePost';
+        readonly type: 'ThreadDoesntExist' | 'PostDoesntExist' | 'RequireRootOrigin' | 'CannotPostOnClosedThread' | 'NotAuthorOrCouncilor' | 'MaxWhiteListSizeExceeded' | 'WhitelistedMemberDoesNotExist' | 'InsufficientBalanceForPost' | 'CannotDeletePost';
     }
-    /** @name PalletProposalsCodexError (560) */
+    /** @name PalletProposalsCodexError (592) */
     interface PalletProposalsCodexError extends Enum {
         readonly isSignalProposalIsEmpty: boolean;
         readonly isRuntimeProposalIsEmpty: boolean;
@@ -4797,9 +5191,13 @@ declare module '@polkadot/types/lookup' {
         readonly isInvalidFundingRequestProposalNumberOfAccount: boolean;
         readonly isInvalidFundingRequestProposalRepeatedAccount: boolean;
         readonly isInvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout: boolean;
-        readonly type: 'SignalProposalIsEmpty' | 'RuntimeProposalIsEmpty' | 'InvalidFundingRequestProposalBalance' | 'InvalidValidatorCount' | 'RequireRootOrigin' | 'InvalidCouncilElectionParameterCouncilSize' | 'InvalidCouncilElectionParameterCandidacyLimit' | 'InvalidCouncilElectionParameterMinVotingStake' | 'InvalidCouncilElectionParameterNewTermDuration' | 'InvalidCouncilElectionParameterMinCouncilStake' | 'InvalidCouncilElectionParameterRevealingPeriod' | 'InvalidCouncilElectionParameterVotingPeriod' | 'InvalidCouncilElectionParameterAnnouncingPeriod' | 'InvalidWorkingGroupBudgetCapacity' | 'InvalidSetLeadParameterCannotBeCouncilor' | 'SlashingStakeIsZero' | 'DecreasingStakeIsZero' | 'InsufficientFundsForBudgetUpdate' | 'InvalidFundingRequestProposalNumberOfAccount' | 'InvalidFundingRequestProposalRepeatedAccount' | 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout';
+        readonly isInvalidLeadWorkerId: boolean;
+        readonly isInvalidLeadOpeningId: boolean;
+        readonly isInvalidLeadApplicationId: boolean;
+        readonly isInvalidProposalId: boolean;
+        readonly type: 'SignalProposalIsEmpty' | 'RuntimeProposalIsEmpty' | 'InvalidFundingRequestProposalBalance' | 'InvalidValidatorCount' | 'RequireRootOrigin' | 'InvalidCouncilElectionParameterCouncilSize' | 'InvalidCouncilElectionParameterCandidacyLimit' | 'InvalidCouncilElectionParameterMinVotingStake' | 'InvalidCouncilElectionParameterNewTermDuration' | 'InvalidCouncilElectionParameterMinCouncilStake' | 'InvalidCouncilElectionParameterRevealingPeriod' | 'InvalidCouncilElectionParameterVotingPeriod' | 'InvalidCouncilElectionParameterAnnouncingPeriod' | 'InvalidWorkingGroupBudgetCapacity' | 'InvalidSetLeadParameterCannotBeCouncilor' | 'SlashingStakeIsZero' | 'DecreasingStakeIsZero' | 'InsufficientFundsForBudgetUpdate' | 'InvalidFundingRequestProposalNumberOfAccount' | 'InvalidFundingRequestProposalRepeatedAccount' | 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout' | 'InvalidLeadWorkerId' | 'InvalidLeadOpeningId' | 'InvalidLeadApplicationId' | 'InvalidProposalId';
     }
-    /** @name PalletWorkingGroupOpening (561) */
+    /** @name PalletWorkingGroupOpening (593) */
     interface PalletWorkingGroupOpening extends Struct {
         readonly openingType: PalletWorkingGroupOpeningType;
         readonly created: u32;
@@ -4808,7 +5206,7 @@ declare module '@polkadot/types/lookup' {
         readonly rewardPerBlock: Option<u128>;
         readonly creationStake: u128;
     }
-    /** @name PalletWorkingGroupJobApplication (562) */
+    /** @name PalletWorkingGroupJobApplication (594) */
     interface PalletWorkingGroupJobApplication extends Struct {
         readonly roleAccountId: AccountId32;
         readonly rewardAccountId: AccountId32;
@@ -4817,7 +5215,7 @@ declare module '@polkadot/types/lookup' {
         readonly descriptionHash: Bytes;
         readonly openingId: u64;
     }
-    /** @name PalletWorkingGroupGroupWorker (563) */
+    /** @name PalletWorkingGroupGroupWorker (595) */
     interface PalletWorkingGroupGroupWorker extends Struct {
         readonly memberId: u64;
         readonly roleAccountId: AccountId32;
@@ -4829,7 +5227,7 @@ declare module '@polkadot/types/lookup' {
         readonly missedReward: Option<u128>;
         readonly createdAt: u32;
     }
-    /** @name PalletWorkingGroupErrorsError (564) */
+    /** @name PalletWorkingGroupErrorsError (596) */
     interface PalletWorkingGroupErrorsError extends Enum {
         readonly isStakeBalanceCannotBeZero: boolean;
         readonly isOpeningDoesNotExist: boolean;
@@ -4864,7 +5262,7 @@ declare module '@polkadot/types/lookup' {
         readonly isInsufficientBalanceForTransfer: boolean;
         readonly type: 'StakeBalanceCannotBeZero' | 'OpeningDoesNotExist' | 'CannotHireMultipleLeaders' | 'WorkerApplicationDoesNotExist' | 'MaxActiveWorkerNumberExceeded' | 'SuccessfulWorkerApplicationDoesNotExist' | 'CannotHireLeaderWhenLeaderExists' | 'IsNotLeadAccount' | 'CurrentLeadNotSet' | 'WorkerDoesNotExist' | 'InvalidMemberOrigin' | 'SignerIsNotWorkerRoleAccount' | 'BelowMinimumStakes' | 'InsufficientBalanceToCoverStake' | 'ApplicationStakeDoesntMatchOpening' | 'OriginIsNotApplicant' | 'WorkerIsLeaving' | 'CannotRewardWithZero' | 'InvalidStakingAccountForMember' | 'ConflictStakesOnAccount' | 'WorkerHasNoReward' | 'UnstakingPeriodLessThanMinimum' | 'CannotSpendZero' | 'InsufficientBudgetForSpending' | 'NoApplicationsProvided' | 'CannotDecreaseStakeDeltaGreaterThanStake' | 'ApplicationsNotForOpening' | 'WorkerStorageValueTooLong' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'InsufficientBalanceForTransfer';
     }
-    /** @name SpRuntimeMultiSignature (574) */
+    /** @name SpRuntimeMultiSignature (606) */
     interface SpRuntimeMultiSignature extends Enum {
         readonly isEd25519: boolean;
         readonly asEd25519: SpCoreEd25519Signature;
@@ -4874,25 +5272,25 @@ declare module '@polkadot/types/lookup' {
         readonly asEcdsa: SpCoreEcdsaSignature;
         readonly type: 'Ed25519' | 'Sr25519' | 'Ecdsa';
     }
-    /** @name SpCoreEcdsaSignature (575) */
+    /** @name SpCoreEcdsaSignature (607) */
     interface SpCoreEcdsaSignature extends U8aFixed {
     }
-    /** @name FrameSystemExtensionsCheckNonZeroSender (578) */
+    /** @name FrameSystemExtensionsCheckNonZeroSender (610) */
     type FrameSystemExtensionsCheckNonZeroSender = Null;
-    /** @name FrameSystemExtensionsCheckSpecVersion (579) */
+    /** @name FrameSystemExtensionsCheckSpecVersion (611) */
     type FrameSystemExtensionsCheckSpecVersion = Null;
-    /** @name FrameSystemExtensionsCheckTxVersion (580) */
+    /** @name FrameSystemExtensionsCheckTxVersion (612) */
     type FrameSystemExtensionsCheckTxVersion = Null;
-    /** @name FrameSystemExtensionsCheckGenesis (581) */
+    /** @name FrameSystemExtensionsCheckGenesis (613) */
     type FrameSystemExtensionsCheckGenesis = Null;
-    /** @name FrameSystemExtensionsCheckNonce (584) */
+    /** @name FrameSystemExtensionsCheckNonce (616) */
     interface FrameSystemExtensionsCheckNonce extends Compact<u32> {
     }
-    /** @name FrameSystemExtensionsCheckWeight (585) */
+    /** @name FrameSystemExtensionsCheckWeight (617) */
     type FrameSystemExtensionsCheckWeight = Null;
-    /** @name PalletTransactionPaymentChargeTransactionPayment (586) */
+    /** @name PalletTransactionPaymentChargeTransactionPayment (618) */
     interface PalletTransactionPaymentChargeTransactionPayment extends Compact<u128> {
     }
-    /** @name JoystreamNodeRuntimeRuntime (587) */
+    /** @name JoystreamNodeRuntimeRuntime (619) */
     type JoystreamNodeRuntimeRuntime = Null;
 }
diff --git a/index.d.ts b/index.d.ts
index 94d1b4a77567b84d7357a841e4bebe9b4fcb2552..0f34a706f6fc0cec843a4494202cf9ef13265d87 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -5,7 +5,7 @@ import { AnyU8a, Codec, DetectCodec, ITuple, Observable } from '@polkadot/types/
 import { Text, UInt, Null, bool, Option, Vec, BTreeSet, BTreeMap, Tuple, Enum, Struct, Bytes, TypeRegistry, Raw } from '@polkadot/types';
 import BN from 'bn.js';
 import { AugmentedQuery } from '@polkadot/api/types';
-declare type EnumVariant<T> = keyof T extends infer K ? K extends keyof T ? T[K] extends Null | null ? K | {
+export declare type EnumVariant<T> = keyof T extends infer K ? K extends keyof T ? T[K] extends Null | null ? K | {
     [I in K]: T[I];
 } : {
     [I in K]: T[I];
diff --git a/index.js b/index.js
index 58f95495c7507fcecd4207eddeb60e9dea8c3052..15487b2f5a4c777f4f1d3530ed69449952087a01 100644
--- a/index.js
+++ b/index.js
@@ -1,30 +1,21 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.JOYSTREAM_ADDRESS_PREFIX = exports.entriesByIds = exports.keysOf = exports.createType = exports.registry = void 0;
-require("./augment/types-lookup");
-require("./augment/registry");
-require("./augment/augment-api");
-const types_1 = require("@polkadot/types");
-const lookup_1 = __importDefault(require("./augment/lookup"));
-exports.registry = new types_1.TypeRegistry();
-exports.registry.register(lookup_1.default);
-function createType(typeName, value) {
-    return exports.registry.createType(typeName, value);
+import './augment/types-lookup';
+import './augment/registry';
+import './augment/augment-api';
+import { TypeRegistry, } from '@polkadot/types';
+import defs from './augment/lookup';
+export const registry = new TypeRegistry();
+registry.register(defs);
+export function createType(typeName, value) {
+    return registry.createType(typeName, value);
 }
-exports.createType = createType;
-function keysOf(typeName) {
-    return exports.registry.createType(typeName).defKeys;
+export function keysOf(typeName) {
+    return registry.createType(typeName).defKeys;
 }
-exports.keysOf = keysOf;
-async function entriesByIds(apiMethod) {
+export async function entriesByIds(apiMethod) {
     const entries = (await apiMethod.entries()).map(([storageKey, value]) => [
         storageKey.args[0],
         value,
     ]);
     return entries.sort((a, b) => a[0].toNumber() - b[0].toNumber());
 }
-exports.entriesByIds = entriesByIds;
-exports.JOYSTREAM_ADDRESS_PREFIX = 126;
+export const JOYSTREAM_ADDRESS_PREFIX = 126;
diff --git a/package.json b/package.json
index 7115053f7947af2c7e89739b060f207cd9d331b9..0721594b0785d6c6678ac2543b41b12aaf18252e 100644
--- a/package.json
+++ b/package.json
@@ -3,6 +3,8 @@
   "version": "0.20.2",
   "description": "Types for Joystream Substrate Runtime - Carthage release",
   "main": "index.js",
+  "type": "module",
+  "module": "index.js",
   "types": "index.d.ts",
   "scripts": {
     "prepublishOnly": "yarn clean && yarn build",
diff --git a/primitives.d.ts b/primitives.d.ts
index 15c1ba286ebc94c1d30b1cf2869cbd82a4e6c781..36e1fef1e6514cca0f5a70371f89351dd9360f4b 100644
--- a/primitives.d.ts
+++ b/primitives.d.ts
@@ -2,7 +2,6 @@ import { u8, u32, u64 } from '@polkadot/types';
 export declare type ForumCategoryId = u64;
 export declare type ForumThreadId = u64;
 export declare type ForumPostId = u64;
-export declare type ForumPostReactionId = u64;
 export declare type ProposalId = u32;
 export declare type ProposalDiscussionThreadId = u64;
 export declare type ProposalDiscussionPostId = u64;
@@ -14,7 +13,6 @@ export declare type DistributionBucketOperatorId = u64;
 export declare type DistributionBucketIndex = u64;
 export declare type MemberId = u64;
 export declare type ChannelId = u64;
-export declare type ChannelCategoryId = u64;
 export declare type VideoId = u64;
 export declare type OpenAuctionId = u64;
 export declare type CuratorId = u64;
diff --git a/primitives.js b/primitives.js
index c8ad2e549bdc6801e0d1c80b0308d4b9bd4985ce..cb0ff5c3b541f646105198ee23ac0fc3d805023e 100644
--- a/primitives.js
+++ b/primitives.js
@@ -1,2 +1 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
+export {};
diff --git a/src/augment/augment-api-consts.ts b/src/augment/augment-api-consts.ts
index c9a04788b993344183aabec2c9e275789159284c..720a5b1d7039bc5060929d4d5b3aff4d2af4c707 100644
--- a/src/augment/augment-api-consts.ts
+++ b/src/augment/augment-api-consts.ts
@@ -99,6 +99,24 @@ declare module '@polkadot/api-base/types/consts' {
        **/
       maxReserves: u32 & AugmentedConst<ApiType>;
     };
+    bounty: {
+      /**
+       * Exports const - max work entry number for a closed assurance type contract bounty.
+       **/
+      closedContractSizeLimit: u32 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - creator state bloat bond amount for a bounty.
+       **/
+      creatorStateBloatBondAmount: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - funder state bloat bond amount for a bounty.
+       **/
+      funderStateBloatBondAmount: u128 & AugmentedConst<ApiType>;
+      /**
+       * Exports const - min work entrant stake for a bounty.
+       **/
+      minWorkEntrantStake: u128 & AugmentedConst<ApiType>;
+    };
     content: {
       /**
        * Exports const - default channel daily NFT limit.
@@ -438,6 +456,27 @@ declare module '@polkadot/api-base/types/consts' {
        **/
       stakingHandlerLockId: U8aFixed & AugmentedConst<ApiType>;
     };
+    multisig: {
+      /**
+       * The base amount of currency needed to reserve for creating a multisig execution or to
+       * store a dispatch call for later.
+       * 
+       * This is held for an additional storage item whose value size is
+       * `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is
+       * `32 + sizeof(AccountId)` bytes.
+       **/
+      depositBase: u128 & AugmentedConst<ApiType>;
+      /**
+       * The amount of currency needed per unit threshold when creating a multisig execution.
+       * 
+       * This is held for adding 32 bytes more into a pre-existing storage value.
+       **/
+      depositFactor: u128 & AugmentedConst<ApiType>;
+      /**
+       * The maximum amount of signatories allowed in the multisig.
+       **/
+      maxSignatories: u16 & AugmentedConst<ApiType>;
+    };
     operationsWorkingGroupAlpha: {
       /**
        * Stake needed to create an opening.
@@ -540,6 +579,14 @@ declare module '@polkadot/api-base/types/consts' {
        * Exports 'Fill Working Group Lead Opening' proposal parameters.
        **/
       fillWorkingGroupOpeningProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Max number of accounts per funding request proposal
+       **/
+      fundingRequestProposalMaxAccounts: u32 & AugmentedConst<ApiType>;
+      /**
+       * Max amount in funding request proposal (per account)
+       **/
+      fundingRequestProposalMaxAmount: u128 & AugmentedConst<ApiType>;
       /**
        * Exports 'Funding Request' proposal parameters.
        **/
@@ -561,6 +608,10 @@ declare module '@polkadot/api-base/types/consts' {
        **/
       setInitialInvitationBalanceProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
       setInvitationCountProposalParameters: PalletProposalsEngineProposalParameters & AugmentedConst<ApiType>;
+      /**
+       * Max allowed number of validators in set max validator count proposal
+       **/
+      setMaxValidatorCountProposalMaxValidators: u32 & AugmentedConst<ApiType>;
       /**
        * Exports 'Set Max Validator Count' proposal parameters.
        **/
diff --git a/src/augment/augment-api-errors.ts b/src/augment/augment-api-errors.ts
index fe293261e77dd010f690553727c0158f790fec54..7deb7896046f478e3153f6940f8aabf9342db8db 100644
--- a/src/augment/augment-api-errors.ts
+++ b/src/augment/augment-api-errors.ts
@@ -93,6 +93,146 @@ declare module '@polkadot/api-base/types/errors' {
        **/
       VestingBalance: AugmentedError<ApiType>;
     };
+    bounty: {
+      /**
+       * Bounty doesnt exist.
+       **/
+      BountyDoesntExist: AugmentedError<ApiType>;
+      /**
+       * Incompatible assurance contract type for a member: cannot submit work to the 'closed
+       * assurance' bounty contract.
+       **/
+      CannotSubmitWorkToClosedContractBounty: AugmentedError<ApiType>;
+      /**
+       * Cherry less than minimum allowed.
+       **/
+      CherryLessThenMinimumAllowed: AugmentedError<ApiType>;
+      /**
+       * Cannot create a 'closed assurance contract' bounty with empty member list.
+       **/
+      ClosedContractMemberListIsEmpty: AugmentedError<ApiType>;
+      /**
+       * Cannot create a 'closed assurance contract' bounty with member list larger
+       * than allowed max work entry limit.
+       **/
+      ClosedContractMemberListIsTooLarge: AugmentedError<ApiType>;
+      /**
+       * 'closed assurance contract' bounty member list can only include existing members
+       **/
+      ClosedContractMemberNotFound: AugmentedError<ApiType>;
+      /**
+       * The conflicting stake discovered. Cannot stake.
+       **/
+      ConflictingStakes: AugmentedError<ApiType>;
+      /**
+       * Cannot create a bounty with an entrant stake is less than required minimum.
+       **/
+      EntrantStakeIsLessThanMininum: AugmentedError<ApiType>;
+      /**
+       * Cannot create a bounty with zero funding amount parameter.
+       **/
+      FundingAmountCannotBeZero: AugmentedError<ApiType>;
+      /**
+       * Cannot create a bounty with zero funding period parameter.
+       **/
+      FundingPeriodCannotBeZero: AugmentedError<ApiType>;
+      /**
+       * Insufficient balance for a bounty cherry.
+       **/
+      InsufficientBalanceForBounty: AugmentedError<ApiType>;
+      /**
+       * There is not enough balance for a stake.
+       **/
+      InsufficientBalanceForStake: AugmentedError<ApiType>;
+      /**
+       * Bounty contributor not found
+       **/
+      InvalidContributorActorSpecified: AugmentedError<ApiType>;
+      /**
+       * Invalid Creator Actor for Bounty specified
+       **/
+      InvalidCreatorActorSpecified: AugmentedError<ApiType>;
+      /**
+       * Member specified is not an entrant worker
+       **/
+      InvalidEntrantWorkerSpecified: AugmentedError<ApiType>;
+      /**
+       * Bounty oracle not found
+       **/
+      InvalidOracleActorSpecified: AugmentedError<ApiType>;
+      /**
+       * Provided oracle member id does not belong to an existing member
+       **/
+      InvalidOracleMemberId: AugmentedError<ApiType>;
+      /**
+       * Unexpected bounty stage for an operation: Cancelled.
+       **/
+      InvalidStageUnexpectedCancelled: AugmentedError<ApiType>;
+      /**
+       * Unexpected bounty stage for an operation: FailedBountyWithdrawal.
+       **/
+      InvalidStageUnexpectedFailedBountyWithdrawal: AugmentedError<ApiType>;
+      /**
+       * Unexpected bounty stage for an operation: Funding.
+       **/
+      InvalidStageUnexpectedFunding: AugmentedError<ApiType>;
+      /**
+       * Unexpected bounty stage for an operation: Judgment.
+       **/
+      InvalidStageUnexpectedJudgment: AugmentedError<ApiType>;
+      /**
+       * Unexpected bounty stage for an operation: NoFundingContributed.
+       **/
+      InvalidStageUnexpectedNoFundingContributed: AugmentedError<ApiType>;
+      /**
+       * Unexpected bounty stage for an operation: SuccessfulBountyWithdrawal.
+       **/
+      InvalidStageUnexpectedSuccessfulBountyWithdrawal: AugmentedError<ApiType>;
+      /**
+       * Unexpected bounty stage for an operation: WorkSubmission.
+       **/
+      InvalidStageUnexpectedWorkSubmission: AugmentedError<ApiType>;
+      /**
+       * Staking account doesn't belong to a member.
+       **/
+      InvalidStakingAccountForMember: AugmentedError<ApiType>;
+      /**
+       * Min funding amount cannot be greater than max amount.
+       **/
+      MinFundingAmountCannotBeGreaterThanMaxAmount: AugmentedError<ApiType>;
+      /**
+       * Cannot found bounty contribution.
+       **/
+      NoBountyContributionFound: AugmentedError<ApiType>;
+      /**
+       * Oracle have already been withdrawn
+       **/
+      OracleRewardAlreadyWithdrawn: AugmentedError<ApiType>;
+      /**
+       * Origin is root, so switching oracle is not allowed in this extrinsic. (call switch_oracle_as_root)
+       **/
+      SwitchOracleOriginIsRoot: AugmentedError<ApiType>;
+      /**
+       * The total reward for winners should be equal to total bounty funding.
+       **/
+      TotalRewardShouldBeEqualToTotalFunding: AugmentedError<ApiType>;
+      /**
+       * Invalid judgment - all winners should have work submissions.
+       **/
+      WinnerShouldHasWorkSubmission: AugmentedError<ApiType>;
+      /**
+       * Worker tried to access a work entry that doesn't belong to him
+       **/
+      WorkEntryDoesntBelongToWorker: AugmentedError<ApiType>;
+      /**
+       * Work entry doesnt exist.
+       **/
+      WorkEntryDoesntExist: AugmentedError<ApiType>;
+      /**
+       * Cannot set zero reward for winners.
+       **/
+      ZeroWinnerReward: AugmentedError<ApiType>;
+    };
     content: {
       /**
        * Already active auction cannot be cancelled
@@ -177,7 +317,7 @@ declare module '@polkadot/api-base/types/errors' {
       /**
        * Auction buy now is less then starting price
        **/
-      BuyNowIsLessThenStartingPrice: AugmentedError<ApiType>;
+      BuyNowMustBeGreaterThanStartingPrice: AugmentedError<ApiType>;
       /**
        * Cannot directly withdraw funds from a channel account when the channel has
        * a creator token issued
@@ -222,6 +362,19 @@ declare module '@polkadot/api-base/types/errors' {
       ChannelFeaturePaused: AugmentedError<ApiType>;
       ChannelNftDailyLimitExceeded: AugmentedError<ApiType>;
       ChannelNftWeeklyLimitExceeded: AugmentedError<ApiType>;
+      /**
+       * Provided channel owner (curator group) does not exist
+       **/
+      ChannelOwnerCuratorGroupDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Provided channel owner (member) does not exist
+       **/
+      ChannelOwnerMemberDoesNotExist: AugmentedError<ApiType>;
+      /**
+       * Channel state bloat bond cannot be lower than existential deposit,
+       * because it must secure the channel module account against dusting
+       **/
+      ChannelStateBloatBondBelowExistentialDeposit: AugmentedError<ApiType>;
       /**
        * Invalid extrinsic call: Channel state bloat bond changed.
        **/
@@ -302,7 +455,7 @@ declare module '@polkadot/api-base/types/errors' {
       InsufficientBalance: AugmentedError<ApiType>;
       /**
        * Cannot create the channel: channel creator has insufficient balance
-       * (budget for channel state bloat bond + channel data objs state bloat bonds + data objs storage fees)
+       * (budget for channel state bloat bond + channel data objs state bloat bonds + data objs storage fees + existential deposit)
        **/
       InsufficientBalanceForChannelCreation: AugmentedError<ApiType>;
       /**
@@ -311,7 +464,7 @@ declare module '@polkadot/api-base/types/errors' {
       InsufficientBalanceForTransfer: AugmentedError<ApiType>;
       /**
        * Cannot create the video: video creator has insufficient balance
-       * (budget for video state bloat bond + video data objs state bloat bonds + data objs storage fees)
+       * (budget for video state bloat bond + video data objs state bloat bonds + data objs storage fees + existential deposit)
        **/
       InsufficientBalanceForVideoCreation: AugmentedError<ApiType>;
       InsufficientCouncilBudget: AugmentedError<ApiType>;
@@ -335,6 +488,10 @@ declare module '@polkadot/api-base/types/errors' {
        * `witness_price` provided to `buy_now` extrinsic does not match the current sell price
        **/
       InvalidBuyNowWitnessPriceProvided: AugmentedError<ApiType>;
+      /**
+       * Channel bag witness parameters don't match the current runtime state
+       **/
+      InvalidChannelBagWitnessProvided: AugmentedError<ApiType>;
       /**
        * Incorrect channel owner for an operation.
        **/
@@ -360,6 +517,10 @@ declare module '@polkadot/api-base/types/errors' {
        * Current nft offer price does not match the provided `witness_price`
        **/
       InvalidNftOfferWitnessPriceProvided: AugmentedError<ApiType>;
+      /**
+       * Storage buckets number witness parameter does not match the current runtime state
+       **/
+      InvalidStorageBucketsNumWitnessProvided: AugmentedError<ApiType>;
       /**
        * Invalid number of objects to delete provided for delete_video
        **/
@@ -384,6 +545,18 @@ declare module '@polkadot/api-base/types/errors' {
        * Attempt to set minimum cashout allowed above the limit
        **/
       MaxCashoutValueTooHigh: AugmentedError<ApiType>;
+      /**
+       * Number of channel assets exceeds MaxNumberOfAssetsPerChannel
+       **/
+      MaxNumberOfChannelAssetsExceeded: AugmentedError<ApiType>;
+      /**
+       * Number of channel collaborators exceeds MaxNumberOfCollaboratorsPerChannel
+       **/
+      MaxNumberOfChannelCollaboratorsExceeded: AugmentedError<ApiType>;
+      /**
+       * Number of video assets exceeds MaxMaxNumberOfAssetsPerVideo
+       **/
+      MaxNumberOfVideoAssetsExceeded: AugmentedError<ApiType>;
       /**
        * Member authentication failed
        **/
@@ -413,10 +586,19 @@ declare module '@polkadot/api-base/types/errors' {
        * Attempt to set minimum cashout allowed below the limit
        **/
       MinCashoutValueTooLow: AugmentedError<ApiType>;
+      /**
+       * Storage buckets number witness parameter must be provided when channel/video assets
+       * are being updated.
+       **/
+      MissingStorageBucketsNumWitness: AugmentedError<ApiType>;
       /**
        * Nft for given video id already exists
        **/
       NftAlreadyExists: AugmentedError<ApiType>;
+      /**
+       * Attempt to sling back a channel owned nft
+       **/
+      NftAlreadyOwnedByChannel: AugmentedError<ApiType>;
       /**
        * Nft auction is already expired
        **/
@@ -429,6 +611,10 @@ declare module '@polkadot/api-base/types/errors' {
        * Can not create auction for Nft, if auction have been already started or nft is locked for the transfer
        **/
       NftIsNotIdle: AugmentedError<ApiType>;
+      /**
+       * Non-channel owner specified during nft issuance does not exist
+       **/
+      NftNonChannelOwnerDoesNotExist: AugmentedError<ApiType>;
       /**
        * Given video nft is not in buy now state
        **/
@@ -441,6 +627,10 @@ declare module '@polkadot/api-base/types/errors' {
        * Nft is not in auction state
        **/
       NotInAuctionState: AugmentedError<ApiType>;
+      /**
+       * Delete channel and assets and delete video assets must have a number of assets to remove greater than zero
+       **/
+      NumberOfAssetsToRemoveIsZero: AugmentedError<ApiType>;
       /**
        * Overflow or underflow error happened
        **/
@@ -513,15 +703,19 @@ declare module '@polkadot/api-base/types/errors' {
        * Invalid extrinsic call: video state bloat bond changed.
        **/
       VideoStateBloatBondChanged: AugmentedError<ApiType>;
+      /**
+       * At least one of the whitelisted members does not exist
+       **/
+      WhitelistedMemberDoesNotExist: AugmentedError<ApiType>;
       /**
        * Auction whitelist has only one member
        **/
       WhitelistHasOnlyOneMember: AugmentedError<ApiType>;
       /**
        * An attempt to withdraw funds from channel account failed, because the specified amount
-       * exceeds the account's balance minus ExistantialDeposit
+       * exceeds the withdrawable amount (channel account balance minus channel bloat bond)
        **/
-      WithdrawFromChannelAmountExceedsBalanceMinusExistentialDeposit: AugmentedError<ApiType>;
+      WithdrawalAmountExceedsChannelAccountWithdrawableBalance: AugmentedError<ApiType>;
       /**
        * An attempt to withdraw funds from channel account failed, because the specified amount
        * is zero
@@ -967,10 +1161,6 @@ declare module '@polkadot/api-base/types/errors' {
        * Category still contains some threads.
        **/
       CategoryNotEmptyThreads: AugmentedError<ApiType>;
-      /**
-       * data migration not done yet.
-       **/
-      DataMigrationNotDone: AugmentedError<ApiType>;
       /**
        * Forum user id not match its account.
        **/
@@ -1561,6 +1751,64 @@ declare module '@polkadot/api-base/types/errors' {
        **/
       ZeroTokensFunding: AugmentedError<ApiType>;
     };
+    multisig: {
+      /**
+       * Call is already approved by this signatory.
+       **/
+      AlreadyApproved: AugmentedError<ApiType>;
+      /**
+       * The data to be stored is already stored.
+       **/
+      AlreadyStored: AugmentedError<ApiType>;
+      /**
+       * The maximum weight information provided was too low.
+       **/
+      MaxWeightTooLow: AugmentedError<ApiType>;
+      /**
+       * Threshold must be 2 or greater.
+       **/
+      MinimumThreshold: AugmentedError<ApiType>;
+      /**
+       * Call doesn't need any (more) approvals.
+       **/
+      NoApprovalsNeeded: AugmentedError<ApiType>;
+      /**
+       * Multisig operation not found when attempting to cancel.
+       **/
+      NotFound: AugmentedError<ApiType>;
+      /**
+       * No timepoint was given, yet the multisig operation is already underway.
+       **/
+      NoTimepoint: AugmentedError<ApiType>;
+      /**
+       * Only the account that originally created the multisig is able to cancel it.
+       **/
+      NotOwner: AugmentedError<ApiType>;
+      /**
+       * The sender was contained in the other signatories; it shouldn't be.
+       **/
+      SenderInSignatories: AugmentedError<ApiType>;
+      /**
+       * The signatories were provided out of order; they should be ordered.
+       **/
+      SignatoriesOutOfOrder: AugmentedError<ApiType>;
+      /**
+       * There are too few signatories in the list.
+       **/
+      TooFewSignatories: AugmentedError<ApiType>;
+      /**
+       * There are too many signatories in the list.
+       **/
+      TooManySignatories: AugmentedError<ApiType>;
+      /**
+       * A timepoint was given, yet no multisig operation is underway.
+       **/
+      UnexpectedTimepoint: AugmentedError<ApiType>;
+      /**
+       * A different timepoint was given to the multisig operation that is underway.
+       **/
+      WrongTimepoint: AugmentedError<ApiType>;
+    };
     operationsWorkingGroupAlpha: {
       /**
        * Trying to fill opening with an application for other opening
@@ -1984,6 +2232,10 @@ declare module '@polkadot/api-base/types/errors' {
        * Attempt to participate in a split with zero token to stake
        **/
       CannotParticipateInSplitWithZeroAmount: AugmentedError<ApiType>;
+      /**
+       * At least one of the members provided as part of InitialAllocation does not exist
+       **/
+      InitialAllocationToNonExistingMember: AugmentedError<ApiType>;
       /**
        * User does not posses enough balance to participate in the revenue split
        **/
@@ -2141,6 +2393,9 @@ declare module '@polkadot/api-base/types/errors' {
        * Insufficient funds for 'Update Working Group Budget' proposal execution
        **/
       InsufficientFundsForBudgetUpdate: AugmentedError<ApiType>;
+      /**
+       * The specified min channel cashout is greater than the specified max channel cashout in `Update Channel Payouts` proposal.
+       **/
       InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout: AugmentedError<ApiType>;
       /**
        * Invalid council election parameter - announcing_period
@@ -2186,6 +2441,22 @@ declare module '@polkadot/api-base/types/errors' {
        * Repeated account in 'Funding Request' proposal.
        **/
       InvalidFundingRequestProposalRepeatedAccount: AugmentedError<ApiType>;
+      /**
+       * Provided lead application id is not valid
+       **/
+      InvalidLeadApplicationId: AugmentedError<ApiType>;
+      /**
+       * Provided lead opening id is not valid
+       **/
+      InvalidLeadOpeningId: AugmentedError<ApiType>;
+      /**
+       * Provided lead worker id is not valid
+       **/
+      InvalidLeadWorkerId: AugmentedError<ApiType>;
+      /**
+       * Provided proposal id is not valid
+       **/
+      InvalidProposalId: AugmentedError<ApiType>;
       /**
        * Invalid 'set lead proposal' parameter - proposed lead cannot be a councilor
        **/
@@ -2248,6 +2519,11 @@ declare module '@polkadot/api-base/types/errors' {
        * Thread doesn't exist
        **/
       ThreadDoesntExist: AugmentedError<ApiType>;
+      /**
+       * At least one of the member ids provided as part of closed thread whitelist belongs
+       * to a non-existing member.
+       **/
+      WhitelistedMemberDoesNotExist: AugmentedError<ApiType>;
     };
     proposalsEngine: {
       /**
@@ -2432,6 +2708,10 @@ declare module '@polkadot/api-base/types/errors' {
        * A nomination target was supplied that was blocked or otherwise not a validator.
        **/
       BadTarget: AugmentedError<ApiType>;
+      /**
+       * External restriction prevents bonding with given account
+       **/
+      BondingRestricted: AugmentedError<ApiType>;
       /**
        * The user has enough bond and thus cannot be chilled forcefully by an external person.
        **/
@@ -2522,6 +2802,10 @@ declare module '@polkadot/api-base/types/errors' {
        * Blacklist size limit exceeded.
        **/
       BlacklistSizeLimitExceeded: AugmentedError<ApiType>;
+      /**
+       * Call Disabled
+       **/
+      CallDisabled: AugmentedError<ApiType>;
       /**
        * Cannot delete non empty dynamic bag.
        **/
diff --git a/src/augment/augment-api-events.ts b/src/augment/augment-api-events.ts
index c1e2be012ef32954ad86e38cdc929399fbc01831..33551260bb2f26f02491519b1cee8f4c6d0feb08 100644
--- a/src/augment/augment-api-events.ts
+++ b/src/augment/augment-api-events.ts
@@ -5,7 +5,7 @@ import type { ApiTypes } from '@polkadot/api-base/types';
 import type { BTreeMap, BTreeSet, Bytes, Null, Option, Result, U8aFixed, Vec, bool, u128, u32, u64, u8 } from '@polkadot/types-codec';
 import type { ITuple } from '@polkadot/types-codec/types';
 import type { AccountId32, H256, Perquintill } from '@polkadot/types/interfaces/runtime';
-import type { FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchInfo, PalletCommonBalanceKind, PalletCommonWorkingGroup, PalletContentChannelActionPermission, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelRecord, PalletContentChannelUpdateParametersRecord, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupContentModerationAction, PalletContentPermissionsCuratorGroupPausableChannelFeature, PalletContentTransferCommitmentParameters, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseElectionCompute, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineSr25519AppSr25519Public, PalletMembershipBuyMembershipParameters, PalletMembershipCreateFoundingMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTransferPolicy, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadMode, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineVoteKind, PalletReferendumOptionResult, PalletStakingExposure, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakePolicy, SpFinalityGrandpaAppPublic, SpRuntimeDispatchError } from '@polkadot/types/lookup';
+import type { FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchInfo, PalletBountyBountyActor, PalletBountyBountyParameters, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonWorkingGroup, PalletContentChannelActionPermission, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelRecord, PalletContentChannelUpdateParametersRecord, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupContentModerationAction, PalletContentPermissionsCuratorGroupPausableChannelFeature, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseElectionCompute, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineSr25519AppSr25519Public, PalletMembershipBuyMembershipParameters, PalletMembershipCreateFoundingMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTransferPolicy, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadMode, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineVoteKind, PalletReferendumOptionResult, PalletStakingExposure, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakePolicy, SpFinalityGrandpaAppPublic, SpRuntimeDispatchError } from '@polkadot/types/lookup';
 
 declare module '@polkadot/api-base/types/events' {
   export interface AugmentedEvents<ApiType extends ApiTypes> {
@@ -63,6 +63,192 @@ declare module '@polkadot/api-base/types/events' {
        **/
       Withdraw: AugmentedEvent<ApiType, [who: AccountId32, amount: u128], { who: AccountId32, amount: u128 }>;
     };
+    bounty: {
+      /**
+       * Bounty contributor made a message remark
+       * Params:
+       * - contributor
+       * - bounty id
+       * - message
+       **/
+      BountyContributorRemarked: AugmentedEvent<ApiType, [PalletBountyBountyActor, u64, Bytes]>;
+      /**
+       * A bounty was created.
+       * Params:
+       * - bounty ID
+       * - creation parameters
+       * - bounty metadata
+       **/
+      BountyCreated: AugmentedEvent<ApiType, [u64, PalletBountyBountyParameters, Bytes]>;
+      /**
+       * A bounty creator has withdrawn the cherry (member or council).
+       * Params:
+       * - bounty ID
+       * - bounty creator
+       **/
+      BountyCreatorCherryWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+      /**
+       * A bounty creator has withdrawn the oracle reward (member or council).
+       * Params:
+       * - bounty ID
+       * - bounty creator
+       **/
+      BountyCreatorOracleRewardWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+      /**
+       * Bounty creator made a message remark
+       * Params:
+       * - creator
+       * - bounty id
+       * - message
+       **/
+      BountyCreatorRemarked: AugmentedEvent<ApiType, [PalletBountyBountyActor, u64, Bytes]>;
+      /**
+       * Bounty entrant made a message remark
+       * Params:
+       * - entrant_id
+       * - bounty id
+       * - entry id
+       * - message
+       **/
+      BountyEntrantRemarked: AugmentedEvent<ApiType, [u64, u64, u64, Bytes]>;
+      /**
+       * A bounty was funded by a member or a council.
+       * Params:
+       * - bounty ID
+       * - bounty funder
+       * - funding amount
+       **/
+      BountyFunded: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+      /**
+       * A member or a council has withdrawn the funding.
+       * Params:
+       * - bounty ID
+       * - bounty funder
+       **/
+      BountyFundingWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+      /**
+       * A bounty has reached its target funding amount.
+       * Params:
+       * - bounty ID
+       **/
+      BountyMaxFundingReached: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * Bounty oracle made a message remark
+       * Params:
+       * - oracle
+       * - bounty id
+       * - message
+       **/
+      BountyOracleRemarked: AugmentedEvent<ApiType, [PalletBountyBountyActor, u64, Bytes]>;
+      /**
+       * A Oracle has withdrawn the oracle reward (member or council).
+       * Params:
+       * - bounty ID
+       * - bounty creator
+       * - Oracle Reward
+       **/
+      BountyOracleRewardWithdrawal: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+      /**
+       * Bounty Oracle Switched by current oracle or council.
+       * Params:
+       * - bounty ID
+       * - switcher
+       * - current_oracle,
+       * - new oracle
+       **/
+      BountyOracleSwitched: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+      /**
+       * A bounty was removed.
+       * Params:
+       * - bounty ID
+       **/
+      BountyRemoved: AugmentedEvent<ApiType, [u64]>;
+      /**
+       * A bounty was terminated by council.
+       * Params:
+       * - bounty ID
+       * - bounty terminator
+       * - bounty creator
+       * - bounty oracle
+       **/
+      BountyTerminated: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+      /**
+       * A member or a council creator has withdrawn the creator state bloat bond.
+       * Params:
+       * - bounty ID
+       * - bounty creator
+       * - Creator State bloat bond amount
+       **/
+      CreatorStateBloatBondWithdrawn: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+      /**
+       * A member or a council funder has withdrawn the funder state bloat bond.
+       * Params:
+       * - bounty ID
+       * - bounty funder
+       * - funder State bloat bond amount
+       **/
+      FunderStateBloatBondWithdrawn: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, u128]>;
+      /**
+       * Submit oracle judgment.
+       * Params:
+       * - bounty ID
+       * - oracle
+       * - judgment data
+       * - rationale
+       **/
+      OracleJudgmentSubmitted: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor, BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, Bytes]>;
+      /**
+       * Work entry was slashed.
+       * Params:
+       * - bounty ID
+       * - entry ID
+       * - entrant member ID
+       **/
+      WorkEntrantFundsWithdrawn: AugmentedEvent<ApiType, [u64, u64, u64]>;
+      /**
+       * Work entry stake slashed.
+       * Params:
+       * - bounty ID
+       * - entry ID
+       * - stake account
+       * - slashed amount
+       **/
+      WorkEntrantStakeSlashed: AugmentedEvent<ApiType, [u64, u64, AccountId32, u128]>;
+      /**
+       * Work entry stake unlocked.
+       * Params:
+       * - bounty ID
+       * - entry ID
+       * - stake account
+       **/
+      WorkEntrantStakeUnlocked: AugmentedEvent<ApiType, [u64, u64, AccountId32]>;
+      /**
+       * Work entry was announced.
+       * Params:
+       * - bounty ID
+       * - created entry ID
+       * - entrant member ID
+       * - staking account ID
+       * - work description
+       **/
+      WorkEntryAnnounced: AugmentedEvent<ApiType, [u64, u64, u64, AccountId32, Bytes]>;
+      /**
+       * Work entry was slashed.
+       * Params:
+       * - bounty ID
+       * - oracle (caller)
+       **/
+      WorkSubmissionPeriodEnded: AugmentedEvent<ApiType, [u64, PalletBountyBountyActor]>;
+      /**
+       * Submit work.
+       * Params:
+       * - bounty ID
+       * - created entry ID
+       * - entrant member ID
+       * - work data (description, URL, BLOB, etc.)
+       **/
+      WorkSubmitted: AugmentedEvent<ApiType, [u64, u64, u64, Bytes]>;
+    };
     constitution: {
       /**
        * Emits on constitution amendment.
@@ -98,7 +284,7 @@ declare module '@polkadot/api-base/types/events' {
       ChannelRewardClaimedAndWithdrawn: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, u128, PalletContentChannelFundsDestination]>;
       ChannelRewardUpdated: AugmentedEvent<ApiType, [u128, u64]>;
       ChannelStateBloatBondValueUpdated: AugmentedEvent<ApiType, [u128]>;
-      ChannelTransferAccepted: AugmentedEvent<ApiType, [u64, PalletContentTransferCommitmentParameters]>;
+      ChannelTransferAccepted: AugmentedEvent<ApiType, [u64, PalletContentTransferCommitmentParametersBTreeMap]>;
       ChannelUpdated: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord, BTreeSet<u64>]>;
       ChannelVisibilitySetByModerator: AugmentedEvent<ApiType, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
       CouncilRewardClaimed: AugmentedEvent<ApiType, [u64, u128]>;
@@ -324,7 +510,7 @@ declare module '@polkadot/api-base/types/events' {
       /**
        * New council was elected
        **/
-      AnnouncingPeriodStarted: AugmentedEvent<ApiType, []>;
+      AnnouncingPeriodStarted: AugmentedEvent<ApiType, [u32]>;
       /**
        * Budget balance was changed by the root.
        **/
@@ -380,15 +566,15 @@ declare module '@polkadot/api-base/types/events' {
       /**
        * New council was elected and appointed
        **/
-      NewCouncilElected: AugmentedEvent<ApiType, [Vec<u64>]>;
+      NewCouncilElected: AugmentedEvent<ApiType, [Vec<u64>, u32]>;
       /**
        * New council was not elected
        **/
-      NewCouncilNotElected: AugmentedEvent<ApiType, []>;
+      NewCouncilNotElected: AugmentedEvent<ApiType, [u32]>;
       /**
        * Announcing period can't finish because of insufficient candidtate count
        **/
-      NotEnoughCandidates: AugmentedEvent<ApiType, []>;
+      NotEnoughCandidates: AugmentedEvent<ApiType, [u32]>;
       /**
        * Request has been funded
        **/
@@ -666,10 +852,6 @@ declare module '@polkadot/api-base/types/events' {
        * Post with givne id was moderated.
        **/
       PostModerated: AugmentedEvent<ApiType, [u64, Bytes, PalletForumPrivilegedActor, u64, u64]>;
-      /**
-       * Thumb up post
-       **/
-      PostReacted: AugmentedEvent<ApiType, [u64, u64, u64, u64, u64]>;
       /**
        * Post with given id had its text updated.
        * The second argument reflects the number of total edits when the text update occurs.
@@ -1137,7 +1319,7 @@ declare module '@polkadot/api-base/types/events' {
       UpdatedWorkingGroupBudget: AugmentedEvent<ApiType, [PalletCommonWorkingGroup, u128, PalletCommonBalanceKind]>;
     };
     members: {
-      FoundingMemberCreated: AugmentedEvent<ApiType, [u64, PalletMembershipCreateFoundingMemberParameters]>;
+      FoundingMemberCreated: AugmentedEvent<ApiType, [u64, PalletMembershipCreateFoundingMemberParameters, u32]>;
       InitialInvitationBalanceUpdated: AugmentedEvent<ApiType, [u128]>;
       InitialInvitationCountUpdated: AugmentedEvent<ApiType, [u32]>;
       InvitesTransferred: AugmentedEvent<ApiType, [u64, u64, u32]>;
@@ -1146,7 +1328,7 @@ declare module '@polkadot/api-base/types/events' {
       MemberInvited: AugmentedEvent<ApiType, [u64, PalletMembershipInviteMembershipParameters]>;
       MemberProfileUpdated: AugmentedEvent<ApiType, [u64, Option<Bytes>, Option<Bytes>]>;
       MemberRemarked: AugmentedEvent<ApiType, [u64, Bytes]>;
-      MembershipBought: AugmentedEvent<ApiType, [u64, PalletMembershipBuyMembershipParameters]>;
+      MembershipBought: AugmentedEvent<ApiType, [u64, PalletMembershipBuyMembershipParameters, u32]>;
       MembershipGifted: AugmentedEvent<ApiType, [u64, PalletMembershipGiftMembershipParameters]>;
       MembershipPriceUpdated: AugmentedEvent<ApiType, [u128]>;
       MemberVerificationStatusUpdated: AugmentedEvent<ApiType, [u64, bool, u64]>;
@@ -1343,6 +1525,24 @@ declare module '@polkadot/api-base/types/events' {
        **/
       WorkingGroupBudgetFunded: AugmentedEvent<ApiType, [u64, u128, Bytes]>;
     };
+    multisig: {
+      /**
+       * A multisig operation has been approved by someone.
+       **/
+      MultisigApproval: AugmentedEvent<ApiType, [approving: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed], { approving: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed }>;
+      /**
+       * A multisig operation has been cancelled.
+       **/
+      MultisigCancelled: AugmentedEvent<ApiType, [cancelling: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed], { cancelling: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed }>;
+      /**
+       * A multisig operation has been executed.
+       **/
+      MultisigExecuted: AugmentedEvent<ApiType, [approving: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed, result: Result<Null, SpRuntimeDispatchError>], { approving: AccountId32, timepoint: PalletMultisigTimepoint, multisig: AccountId32, callHash: U8aFixed, result: Result<Null, SpRuntimeDispatchError> }>;
+      /**
+       * A new multisig operation has begun.
+       **/
+      NewMultisig: AugmentedEvent<ApiType, [approving: AccountId32, multisig: AccountId32, callHash: U8aFixed], { approving: AccountId32, multisig: AccountId32, callHash: U8aFixed }>;
+    };
     offences: {
       /**
        * There is an offence reported of the given `kind` happened at the `session_index` and
@@ -1978,20 +2178,21 @@ declare module '@polkadot/api-base/types/events' {
        * Params:
        * - token identifier
        * - source member id
-       * - map containing validated outputs (amount, remark) data indexed by
-       * (member_id + account existance)
+       * - map containing validated outputs (amount indexed by (member_id + account existance))
+       * - transfer's metadata
        **/
-      TokenAmountTransferred: AugmentedEvent<ApiType, [u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>]>;
+      TokenAmountTransferred: AugmentedEvent<ApiType, [u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
       /**
        * Token amount transferred by issuer
        * Params:
        * - token identifier
        * - source (issuer) member id
        * - map containing validated outputs
-       * (amount, opt. vesting schedule, opt. vesting cleanup key, remark) data indexed by
+       * (amount, opt. vesting schedule, opt. vesting cleanup key) data indexed by
        * (account_id + account existance)
+       * - transfer's metadata
        **/
-      TokenAmountTransferredByIssuer: AugmentedEvent<ApiType, [u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>]>;
+      TokenAmountTransferredByIssuer: AugmentedEvent<ApiType, [u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
       /**
        * Token Deissued
        * Params:
@@ -2153,15 +2354,15 @@ declare module '@polkadot/api-base/types/events' {
       /**
        * Referendum started
        **/
-      ReferendumStarted: AugmentedEvent<ApiType, [u64]>;
+      ReferendumStarted: AugmentedEvent<ApiType, [u64, u32]>;
       /**
        * Referendum started
        **/
-      ReferendumStartedForcefully: AugmentedEvent<ApiType, [u64]>;
+      ReferendumStartedForcefully: AugmentedEvent<ApiType, [u64, u32]>;
       /**
        * Revealing phase has begun
        **/
-      RevealingStageStarted: AugmentedEvent<ApiType, []>;
+      RevealingStageStarted: AugmentedEvent<ApiType, [u32]>;
       /**
        * User released his stake
        **/
@@ -2246,14 +2447,6 @@ declare module '@polkadot/api-base/types/events' {
       Withdrawn: AugmentedEvent<ApiType, [AccountId32, u128]>;
     };
     storage: {
-      /**
-       * Bag objects changed.
-       * Params
-       * - bag id
-       * - new total objects size
-       * - new total objects number
-       **/
-      BagObjectsChanged: AugmentedEvent<ApiType, [PalletStorageBagIdType, u64, u64]>;
       /**
        * Emits on changing the size-based pricing of new objects uploaded.
        * Params
@@ -2286,9 +2479,10 @@ declare module '@polkadot/api-base/types/events' {
        * Emits on storage assets being uploaded and deleted at the same time
        * Params
        * - UploadParameters
-       * - Objects Id of assets to be removed
+       * - Ids of the uploaded objects
+       * - Ids of the removed objects
        **/
-      DataObjectsUpdated: AugmentedEvent<ApiType, [PalletStorageUploadParametersRecord, BTreeSet<u64>]>;
+      DataObjectsUpdated: AugmentedEvent<ApiType, [PalletStorageUploadParametersRecord, BTreeSet<u64>, BTreeSet<u64>]>;
       /**
        * Emits on uploading data objects.
        * Params
@@ -2296,7 +2490,7 @@ declare module '@polkadot/api-base/types/events' {
        * - initial uploading parameters
        * - state bloat bond for objects
        **/
-      DataObjectsUploaded: AugmentedEvent<ApiType, [Vec<u64>, PalletStorageUploadParametersRecord, u128]>;
+      DataObjectsUploaded: AugmentedEvent<ApiType, [BTreeSet<u64>, PalletStorageUploadParametersRecord, u128]>;
       /**
        * Emits on creating distribution bucket.
        * Params
@@ -2405,18 +2599,16 @@ declare module '@polkadot/api-base/types/events' {
       /**
        * Emits on creating a dynamic bag.
        * Params
-       * - dynamic bag ID
-       * - assigned storage buckets' IDs
-       * - assigned distribution buckets' IDs
+       * - dynamic bag creation parameters
+       * - uploaded data objects ids
        **/
-      DynamicBagCreated: AugmentedEvent<ApiType, [PalletStorageDynamicBagIdType, BTreeSet<u64>, BTreeSet<PalletStorageDistributionBucketIdRecord>]>;
+      DynamicBagCreated: AugmentedEvent<ApiType, [PalletStorageDynBagCreationParametersRecord, BTreeSet<u64>]>;
       /**
        * Emits on deleting a dynamic bag.
        * Params
-       * - account ID for the state bloat bond
        * - dynamic bag ID
        **/
-      DynamicBagDeleted: AugmentedEvent<ApiType, [AccountId32, PalletStorageDynamicBagIdType]>;
+      DynamicBagDeleted: AugmentedEvent<ApiType, [PalletStorageDynamicBagIdType]>;
       /**
        * Emits on dynamic bag creation policy update (distribution bucket families).
        * Params
diff --git a/src/augment/augment-api-query.ts b/src/augment/augment-api-query.ts
index 1a4da9f8b7858a99f92ce25707cce6f4268ef7b7..2636dfa7c61e08d89142fbd55dbaf0a1c42355af 100644
--- a/src/augment/augment-api-query.ts
+++ b/src/augment/augment-api-query.ts
@@ -2,10 +2,10 @@
 /* eslint-disable */
 
 import type { ApiTypes } from '@polkadot/api-base/types';
-import type { BTreeMap, Bytes, Null, Option, U8aFixed, Vec, WrapperOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+import type { BTreeMap, Bytes, Null, Option, U8aFixed, Vec, WrapperKeepOpaque, WrapperOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
 import type { AnyNumber, ITuple } from '@polkadot/types-codec/types';
-import type { AccountId32, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
-import type { FrameSupportWeightsPerDispatchClassU64, FrameSystemAccountInfo, FrameSystemEventRecord, FrameSystemLastRuntimeUpgradeInfo, FrameSystemPhase, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipUncleEntryItem, PalletBagsListListBag, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesReleases, PalletBalancesReserveData, PalletConstitutionConstitutionInfo, PalletContentChannelRecord, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftTypesOpenAuctionBidRecord, PalletContentPermissionsCuratorGroup, PalletContentVideoRecord, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStageUpdate, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCategory, PalletForumPost, PalletForumThread, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineSr25519AppSr25519Public, PalletMembershipMembershipObject, PalletMembershipStakingAccountMemberBinding, PalletProjectTokenAccountData, PalletProjectTokenTokenData, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsEngineProposal, PalletProposalsEngineVoteKind, PalletReferendumCastVote, PalletReferendumReferendumStage, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingNominations, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageDataObject, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagType, PalletStorageStorageBucketRecord, PalletTransactionPaymentReleases, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupGroupWorker, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpCoreCryptoKeyTypeId, SpNposElectionsElectionScore, SpRuntimeDigest, SpStakingOffenceOffenceDetails } from '@polkadot/types/lookup';
+import type { AccountId32, Call, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
+import type { FrameSupportWeightsPerDispatchClassU64, FrameSystemAccountInfo, FrameSystemEventRecord, FrameSystemLastRuntimeUpgradeInfo, FrameSystemPhase, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipUncleEntryItem, PalletBagsListListBag, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyBountyActor, PalletBountyBountyRecord, PalletBountyContribution, PalletBountyEntryRecord, PalletConstitutionConstitutionInfo, PalletContentChannelRecord, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftTypesOpenAuctionBidRecord, PalletContentPermissionsCuratorGroup, PalletContentVideoRecord, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStageUpdate, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCategory, PalletForumPost, PalletForumThread, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineSr25519AppSr25519Public, PalletMembershipMembershipObject, PalletMembershipStakingAccountMemberBinding, PalletMultisigMultisig, PalletProjectTokenAccountData, PalletProjectTokenTokenData, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsEngineProposal, PalletProposalsEngineVoteKind, PalletReferendumCastVote, PalletReferendumReferendumStage, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingNominations, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageDataObject, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagType, PalletStorageStorageBucketRecord, PalletTransactionPaymentReleases, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupGroupWorker, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpCoreCryptoKeyTypeId, SpNposElectionsElectionScore, SpRuntimeDigest, SpStakingOffenceOffenceDetails } from '@polkadot/types/lookup';
 import type { Observable } from '@polkadot/types/types';
 
 declare module '@polkadot/api-base/types/storage' {
@@ -198,6 +198,28 @@ declare module '@polkadot/api-base/types/storage' {
        **/
       totalIssuance: AugmentedQuery<ApiType, () => Observable<u128>, []>;
     };
+    bounty: {
+      /**
+       * Bounty storage.
+       **/
+      bounties: AugmentedQuery<ApiType, (arg: u64 | AnyNumber | Uint8Array) => Observable<PalletBountyBountyRecord>, [u64]>;
+      /**
+       * Double map for bounty funding. It stores a member or council funding for bounties.
+       **/
+      bountyContributions: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: PalletBountyBountyActor | { Council: any } | { Member: any } | string | Uint8Array) => Observable<PalletBountyContribution>, [u64, PalletBountyBountyActor]>;
+      /**
+       * Count of all bounties that have been created.
+       **/
+      bountyCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+      /**
+       * Work entry storage map.
+       **/
+      entries: AugmentedQuery<ApiType, (arg1: u64 | AnyNumber | Uint8Array, arg2: u64 | AnyNumber | Uint8Array) => Observable<Option<PalletBountyEntryRecord>>, [u64, u64]>;
+      /**
+       * Count of all work entries that have been created.
+       **/
+      entryCount: AugmentedQuery<ApiType, () => Observable<u32>, []>;
+    };
     constitution: {
       constitution: AugmentedQuery<ApiType, () => Observable<PalletConstitutionConstitutionInfo>, []>;
     };
@@ -534,10 +556,6 @@ declare module '@polkadot/api-base/types/storage' {
        * Counter for all existing categories.
        **/
       categoryCounter: AugmentedQuery<ApiType, () => Observable<u64>, []>;
-      /**
-       * If data migration is done, set as configible for unit test purpose
-       **/
-      dataMigrationDone: AugmentedQuery<ApiType, () => Observable<bool>, []>;
       /**
        * Category identifier value to be used for the next Category created.
        **/
@@ -814,6 +832,13 @@ declare module '@polkadot/api-base/types/storage' {
        **/
       workerStorageSize: AugmentedQuery<ApiType, () => Observable<u16>, []>;
     };
+    multisig: {
+      calls: AugmentedQuery<ApiType, (arg: U8aFixed | string | Uint8Array) => Observable<Option<ITuple<[WrapperKeepOpaque<Call>, AccountId32, u128]>>>, [U8aFixed]>;
+      /**
+       * The set of open multisig operations.
+       **/
+      multisigs: AugmentedQuery<ApiType, (arg1: AccountId32 | string | Uint8Array, arg2: U8aFixed | string | Uint8Array) => Observable<Option<PalletMultisigMultisig>>, [AccountId32, U8aFixed]>;
+    };
     offences: {
       /**
        * A vector of reports of the same kind that happened at the same time slot.
diff --git a/src/augment/augment-api-tx.ts b/src/augment/augment-api-tx.ts
index fb02e24ad5a31fdf8b63ccf13381f19589e372e9..186aa311fc9a678d6cc3f47ffded8877dda1905f 100644
--- a/src/augment/augment-api-tx.ts
+++ b/src/augment/augment-api-tx.ts
@@ -2,10 +2,10 @@
 /* eslint-disable */
 
 import type { ApiTypes } from '@polkadot/api-base/types';
-import type { BTreeMap, BTreeSet, Bytes, Compact, Option, Vec, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+import type { BTreeMap, BTreeSet, Bytes, Compact, Option, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
 import type { AnyNumber, IMethod, ITuple } from '@polkadot/types-codec/types';
 import type { AccountId32, Call, H256, Perbill, Percent, Permill } from '@polkadot/types/interfaces/runtime';
-import type { JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeSessionKeys, PalletCommonBalanceKind, PalletCommonFundingRequestParameters, PalletCommonWorkingGroup, PalletContentChannelActionPermission, PalletContentChannelCreationParametersRecord, PalletContentChannelOwner, PalletContentChannelUpdateParametersRecord, PalletContentInitTransferParameters, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupContentModerationAction, PalletContentPermissionsCuratorGroupPausableChannelFeature, PalletContentProofElementRecord, PalletContentPullPaymentElement, PalletContentTransferCommitmentParameters, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCreateFoundingMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletProjectTokenMerkleProof, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadMode, PalletProposalsEngineVoteKind, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingRewardDestination, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusSlotsEquivocationProof, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeHeader, SpSessionMembershipProof } from '@polkadot/types/lookup';
+import type { JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeSessionKeys, PalletBountyBountyActor, PalletBountyBountyParameters, PalletBountyOracleWorkEntryJudgment, PalletCommonBalanceKind, PalletCommonFundingRequestParameters, PalletCommonProofElementRecord, PalletCommonWorkingGroup, PalletContentChannelActionPermission, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelOwner, PalletContentChannelUpdateParametersRecord, PalletContentInitTransferParameters, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroupContentModerationAction, PalletContentPermissionsCuratorGroupPausableChannelFeature, PalletContentPullPaymentElement, PalletContentTransferCommitmentParametersBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoUpdateParametersRecord, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumExtendedPostIdObject, PalletForumPrivilegedActor, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCreateFoundingMemberParameters, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMultisigTimepoint, PalletProjectTokenMerkleProof, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsDiscussionThreadMode, PalletProposalsEngineVoteKind, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingRewardDestination, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageDistributionBucketIdRecord, PalletStorageDynamicBagType, PalletStorageUploadParametersRecord, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusSlotsEquivocationProof, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeHeader, SpSessionMembershipProof } from '@polkadot/types/lookup';
 
 declare module '@polkadot/api-base/types/submittable' {
   export interface AugmentedSubmittables<ApiType extends ApiTypes> {
@@ -153,6 +153,198 @@ declare module '@polkadot/api-base/types/submittable' {
        **/
       transferKeepAlive: AugmentedSubmittable<(dest: AccountId32 | string | Uint8Array, value: Compact<u128> | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [AccountId32, Compact<u128>]>;
     };
+    bounty: {
+      /**
+       * Announce work entry for a successful bounty.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (W + M)` where:
+       * - `W` is the work_description length.
+       * - `M` is closed contract member list length.
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      announceWorkEntry: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, stakingAccountId: AccountId32 | string | Uint8Array, workDescription: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, AccountId32, Bytes]>;
+      /**
+       * Bounty Contributor made a remark
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (N)`
+       * - `N` is msg length
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      contributorRemark: AugmentedSubmittable<(contributor: PalletBountyBountyActor | { Council: any } | { Member: any } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, Bytes]>;
+      /**
+       * Creates a bounty. Metadata stored in the transaction log but discarded after that.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - `W` is the _metadata length.
+       * - `M` is closed contract member list length.
+       * - DB:
+       * - O(M) (O(1) on open contract)
+       * # </weight>
+       **/
+      createBounty: AugmentedSubmittable<(params: PalletBountyBountyParameters | { oracle?: any; contractType?: any; creator?: any; cherry?: any; oracleReward?: any; entrantStake?: any; fundingType?: any } | string | Uint8Array, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyParameters, Bytes]>;
+      /**
+       * Bounty Oracle made a remark
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (N)`
+       * - `N` is msg length
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      creatorRemark: AugmentedSubmittable<(creator: PalletBountyBountyActor | { Council: any } | { Member: any } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, Bytes]>;
+      /**
+       * end bounty working period.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      endWorkingPeriod: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Bounty Entrant Worker made a remark
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (N)`
+       * - `N` is msg length
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      entrantRemark: AugmentedSubmittable<(entrantId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, entryId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, Bytes]>;
+      /**
+       * Provides bounty funding.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      fundBounty: AugmentedSubmittable<(funder: PalletBountyBountyActor | { Council: any } | { Member: any } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, u128]>;
+      /**
+       * Bounty Oracle made a remark
+       * 
+       * # <weight>
+       * 
+       * ## weight
+       * `O (N)`
+       * - `N` is msg length
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      oracleRemark: AugmentedSubmittable<(oracle: PalletBountyBountyActor | { Council: any } | { Member: any } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64, Bytes]>;
+      /**
+       * Submits an oracle judgment for a bounty, slashing the entries rejected
+       * by an arbitrary percentage and rewarding the winners by an arbitrary amount
+       * (not surpassing the total fund amount)
+       * # <weight>
+       * 
+       * ## weight
+       * `O (J + K + W + R)`
+       * - `J` is rationale length,
+       * - `K` is the sum of all action_justification lengths (inside OracleJudgment),
+       * - `W` is number of winner judgment entries,
+       * - `R` is number of rejected judgment entries,
+       * - db:
+       * - `O(W + R)`
+       * # </weight>
+       **/
+      submitOracleJudgment: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array, judgment: BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, Bytes]>;
+      /**
+       * Submit work for a bounty.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (N)`
+       * - `N` is the work_data length,
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      submitWork: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, entryId: u64 | AnyNumber | Uint8Array, workData: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, Bytes]>;
+      /**
+       * Oracle switches himself to a new one
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       * 
+       **/
+      switchOracle: AugmentedSubmittable<(newOracle: PalletBountyBountyActor | { Council: any } | { Member: any } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64]>;
+      /**
+       * Terminates a bounty in funding, funding expired,
+       * worksubmission, judging period.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      terminateBounty: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Unlocks the stake related to a work entry
+       * After the oracle makes the judgment or the council terminates the bounty by calling terminate_bounty(...),
+       * each worker whose entry has not been judged, can unlock the totality of their stake.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawEntrantStake: AugmentedSubmittable<(memberId: u64 | AnyNumber | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array, entryId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64]>;
+      /**
+       * Withdraw bounty funding by a member or a council.
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawFunding: AugmentedSubmittable<(funder: PalletBountyBountyActor | { Council: any } | { Member: any } | string | Uint8Array, bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletBountyBountyActor, u64]>;
+      /**
+       * Withraws the oracle reward to oracle
+       * If bounty is successfully, Failed or Cancelled oracle must call this
+       * extrinsic to withdraw the oracle reward,
+       * # <weight>
+       * 
+       * ## weight
+       * `O (1)`
+       * - db:
+       * - `O(1)` doesn't depend on the state or parameters
+       * # </weight>
+       **/
+      withdrawOracleReward: AugmentedSubmittable<(bountyId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+    };
     constitution: {
       /**
        * Sets the current constitution hash. Requires root origin.
@@ -168,203 +360,787 @@ declare module '@polkadot/api-base/types/submittable' {
       /**
        * Accepts channel transfer.
        * `commitment_params` is required to prevent changing the transfer conditions.
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the number of entries in `commitment_params.new_collaborators` map
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
-      acceptChannelTransfer: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, commitmentParams: PalletContentTransferCommitmentParameters | { newCollaborators?: any; price?: any; transferId?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentTransferCommitmentParameters]>;
+      acceptChannelTransfer: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, commitmentParams: PalletContentTransferCommitmentParametersBTreeMap | { newCollaborators?: any; price?: any; transferId?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentTransferCommitmentParametersBTreeMap]>;
       /**
        * Accept incoming Nft offer
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       acceptIncomingOffer: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, witnessPrice: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Option<u128>]>;
       /**
        * Add curator to curator group under given `curator_group_id`
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       addCuratorToGroup: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, curatorId: u64 | AnyNumber | Uint8Array, permissions: BTreeSet<PalletContentChannelActionPermission>) => SubmittableExtrinsic<ApiType>, [u64, u64, BTreeSet<PalletContentChannelActionPermission>]>;
       /**
        * Buy Nft
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       buyNft: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, participantId: u64 | AnyNumber | Uint8Array, witnessPrice: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
       /**
        * Cancel Nft sell order
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * </weight>
        **/
       cancelBuyNow: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
       /**
        * cancel channel transfer
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       cancelChannelTransfer: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor]>;
+      /**
+       * Cancel video nft english auction
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
       cancelEnglishAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
       /**
        * Cancel Nft offer
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       cancelOffer: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+      /**
+       * Cancel video nft open auction
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
       cancelOpenAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
       /**
        * Cancel open auction bid
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       cancelOpenAuctionBid: AugmentedSubmittable<(participantId: u64 | AnyNumber | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
       /**
        * Channel collaborator remark
+       * <weight>
+       * 
+       * ## Weight
+       * `O (B)`
+       * - DB:
+       * - O(1)
+       * where:
+       * - B is the byte lenght of `msg`
+       * # </weight>
        **/
       channelAgentRemark: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Bytes]>;
       /**
        * Channel owner remark
+       * <weight>
+       * 
+       * ## Weight
+       * `O (B)`
+       * - DB:
+       * - O(1)
+       * where:
+       * - B is the byte lenght of `msg`
+       * # </weight>
        **/
       channelOwnerRemark: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
-      claimAndWithdrawChannelReward: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, proof: Vec<PalletContentProofElementRecord> | (PalletContentProofElementRecord | { hash_?: any; side?: any } | string | Uint8Array)[], item: PalletContentPullPaymentElement | { channelId?: any; cumulativeRewardEarned?: any; reason?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, Vec<PalletContentProofElementRecord>, PalletContentPullPaymentElement]>;
-      claimChannelReward: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, proof: Vec<PalletContentProofElementRecord> | (PalletContentProofElementRecord | { hash_?: any; side?: any } | string | Uint8Array)[], item: PalletContentPullPaymentElement | { channelId?: any; cumulativeRewardEarned?: any; reason?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, Vec<PalletContentProofElementRecord>, PalletContentPullPaymentElement]>;
+      /**
+       * Claim and withdraw reward in JOY from channel account
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (H)` where:
+       * - `H` is the lenght of the provided merkle `proof`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      claimAndWithdrawChannelReward: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, proof: Vec<PalletCommonProofElementRecord> | (PalletCommonProofElementRecord | { hash_?: any; side?: any } | string | Uint8Array)[], item: PalletContentPullPaymentElement | { channelId?: any; cumulativeRewardEarned?: any; reason?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, Vec<PalletCommonProofElementRecord>, PalletContentPullPaymentElement]>;
+      /**
+       * Claim reward in JOY from channel account
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (H)` where:
+       * - `H` is the lenght of the provided merkle `proof`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
+      claimChannelReward: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, proof: Vec<PalletCommonProofElementRecord> | (PalletCommonProofElementRecord | { hash_?: any; side?: any } | string | Uint8Array)[], item: PalletContentPullPaymentElement | { channelId?: any; cumulativeRewardEarned?: any; reason?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, Vec<PalletCommonProofElementRecord>, PalletContentPullPaymentElement]>;
       /**
        * Claim channel's creator token patronage credit
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       claimCreatorTokenPatronageCredit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C + D + E)` where:
+       * - `A` is the number of entries in `params.collaborators`
+       * - `B` is the number of items in `params.storage_buckets`
+       * - `C` is the number of items in `params.distribution_buckets`
+       * - `D` is the number of items in `params.assets.object_creation_list`
+       * - `E` is the length of  `params.meta`
+       * - DB:
+       * - `O(A + B + C + D)` - from the the generated weights
+       * # </weight>
+       **/
       createChannel: AugmentedSubmittable<(channelOwner: PalletContentChannelOwner | { Member: any } | { CuratorGroup: any } | string | Uint8Array, params: PalletContentChannelCreationParametersRecord | { assets?: any; meta?: any; collaborators?: any; storageBuckets?: any; distributionBuckets?: any; expectedChannelStateBloatBond?: any; expectedDataObjectStateBloatBond?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentChannelOwner, PalletContentChannelCreationParametersRecord]>;
       /**
        * Add new curator group to runtime storage
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the number of entries in `permissions_by_level` map
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       createCuratorGroup: AugmentedSubmittable<(isActive: bool | boolean | Uint8Array, permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupContentModerationAction>>) => SubmittableExtrinsic<ApiType>, [bool, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupContentModerationAction>>]>;
-      createVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletContentVideoCreationParametersRecord | { assets?: any; meta?: any; autoIssueNft?: any; expectedVideoStateBloatBond?: any; expectedDataObjectStateBloatBond?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentVideoCreationParametersRecord]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C + D)` where:
+       * - `A` is the number of items in `params.assets.object_creation_list`
+       * - `B` is `params.storage_buckets_num_witness`
+       * - `C` is the length of open auction / english auction whitelist (if provided)
+       * - `D` is the length of `params.meta` (if provided)
+       * - DB:
+       * - `O(A + B + C)` - from the the generated weights
+       * # </weight>
+       **/
+      createVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletContentVideoCreationParametersRecord | { assets?: any; meta?: any; autoIssueNft?: any; expectedVideoStateBloatBond?: any; expectedDataObjectStateBloatBond?: any; storageBucketsNumWitness?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentVideoCreationParametersRecord]>;
       /**
        * Perform transfer of tokens as creator token issuer
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B)` where:
+       * - `A` is the number of entries in `outputs`
+       * - `B` is the length of the `metadata`
+       * - DB:
+       * - `O(A)` - from the the generated weights
+       * # </weight>
        **/
-      creatorTokenIssuerTransfer: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, outputs: PalletProjectTokenTransfersPaymentWithVesting) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTransfersPaymentWithVesting]>;
+      creatorTokenIssuerTransfer: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, outputs: PalletProjectTokenTransfersPaymentWithVesting, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTransfersPaymentWithVesting, Bytes]>;
       /**
        * Deissue channel's creator token
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       deissueCreatorToken: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
-      deleteChannel: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64]>;
-      deleteChannelAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64, Bytes]>;
-      deleteChannelAssetsAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, assetsToRemove: BTreeSet<u64>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, BTreeSet<u64>, Bytes]>;
-      deleteVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64]>;
-      deleteVideoAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64, Bytes]>;
-      deleteVideoAssetsAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, assetsToRemove: BTreeSet<u64>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, BTreeSet<u64>, Bytes]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C)` where:
+       * - `A` is `num_objects_to_delete`
+       * - `B` is `channel_bag_witness.storage_buckets_num`
+       * - `C` is `channel_bag_witness.distribution_buckets_num`
+       * - DB:
+       * - `O(A + B + C)` - from the the generated weights
+       * # </weight>
+       **/
+      deleteChannel: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, channelBagWitness: PalletContentChannelBagWitness | { storageBucketsNum?: any; distributionBucketsNum?: any } | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelBagWitness, u64]>;
+      deleteChannelAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, channelBagWitness: PalletContentChannelBagWitness | { storageBucketsNum?: any; distributionBucketsNum?: any } | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelBagWitness, u64, Bytes]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C)` where:
+       * - `A` is the length of `assets_to_remove`
+       * - `B` is the value of `storage_buckets_num_witness`
+       * - `C` is the length of `rationale`
+       * - DB:
+       * - `O(A + B)` - from the the generated weights
+       * # </weight>
+       **/
+      deleteChannelAssetsAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, assetsToRemove: BTreeSet<u64>, storageBucketsNumWitness: u32 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, BTreeSet<u64>, u32, Bytes]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B)` where:
+       * - `A` is num_objects_to_delete
+       * - `B` is `params.storage_buckets_num_witness` (if provided)
+       * - DB:
+       * - `O(A + B)` - from the the generated weights
+       * # </weight>
+       **/
+      deleteVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: Option<u32> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64, Option<u32>]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C)` where:
+       * - `A` is the value of `num_objects_to_delete`
+       * - `B` is the value of `storage_buckets_num_witness`
+       * - `C` is the length of `rationale`
+       * - DB:
+       * - `O(A + B)` - from the the generated weights
+       * # </weight>
+       **/
+      deleteVideoAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: Option<u32> | null | object | string | Uint8Array, numObjectsToDelete: u64 | AnyNumber | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Option<u32>, u64, Bytes]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C)` where:
+       * - `A` is the length of `assets_to_remove`
+       * - `B` is the value of `storage_buckets_num_witness`
+       * - `C` is the length of `rationale`
+       * - DB:
+       * - `O(A + B)` - from the the generated weights
+       * # </weight>
+       **/
+      deleteVideoAssetsAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, storageBucketsNumWitness: u32 | AnyNumber | Uint8Array, assetsToRemove: BTreeSet<u64>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u32, BTreeSet<u64>, Bytes]>;
       /**
        * Destroy NFT
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       destroyNft: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
       /**
        * Finalize an ended creator token sale
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       finalizeCreatorTokenSale: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
       /**
        * Finalize an ended revenue split
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       finalizeRevenueSplit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
       /**
        * Initialize creator token sale
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the length of `params.metadata` (or 0 if not provided)
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       initCreatorTokenSale: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenTokenSaleParams | { unitPrice?: any; upperBoundQuantity?: any; startsAt?: any; duration?: any; vestingScheduleParams?: any; capPerMember?: any; metadata?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTokenSaleParams]>;
       /**
        * Start a channel transfer with specified characteristics
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the number of entries in `transfer_params.new_collaborators` map
+       * - DB:
+       * - O(A) - from the the generated weights
+       * # </weight>
        **/
       initializeChannelTransfer: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, transferParams: PalletContentInitTransferParameters | { newCollaborators?: any; price?: any; newOwner?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor, PalletContentInitTransferParameters]>;
       /**
        * Issue creator token
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the number of entries in `params.initial_allocation` map
+       * - DB:
+       * - `O(A)` - from the the generated weights
+       * # </weight>
        **/
       issueCreatorToken: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletProjectTokenTokenIssuanceParameters | { initialAllocation?: any; symbol?: any; transferPolicy?: any; patronageRate?: any; revenueSplitRate?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletProjectTokenTokenIssuanceParameters]>;
       /**
        * Issue NFT
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W + B)`
+       * - DB:
+       * - O(W)
+       * where:
+       * - W : member whitelist length in case nft initial status is auction
+       * - B : bytelength of metadata parameter
+       * # </weight>
        **/
       issueNft: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, params: PalletContentNftTypesNftIssuanceParametersRecord | { royalty?: any; nftMetadata?: any; nonChannelOwner?: any; initTransactionalStatus?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesNftIssuanceParametersRecord]>;
       /**
        * Issue revenue split for a channel
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       issueRevenueSplit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, start: Option<u32> | null | object | string | Uint8Array, duration: u32 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Option<u32>, u32]>;
       /**
        * Make channel's creator token permissionless
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       makeCreatorTokenPermissionless: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64]>;
       /**
-       * Make auction bid
+       * Make english auction bid
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       makeEnglishAuctionBid: AugmentedSubmittable<(participantId: u64 | AnyNumber | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, bidAmount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
       /**
        * Make auction bid
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       makeOpenAuctionBid: AugmentedSubmittable<(participantId: u64 | AnyNumber | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, bidAmount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u128]>;
       /**
        * NFT owner remark
+       * <weight>
+       * 
+       * ## Weight
+       * `O (B)`
+       * - DB:
+       * - O(1)
+       * where:
+       * - B is the byte lenght of `msg`
+       * # </weight>
        **/
       nftOwnerRemark: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Bytes]>;
       /**
        * Offer Nft
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       offerNft: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, to: u64 | AnyNumber | Uint8Array, price: Option<u128> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor, u64, Option<u128>]>;
       /**
        * Accept open auction bid
        * Should only be called by auctioneer
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       pickOpenAuctionWinner: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, winnerId: u64 | AnyNumber | Uint8Array, commit: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u64, u128]>;
       /**
        * Reduce channel's creator token patronage rate to given value
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       reduceCreatorTokenPatronageRateTo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, targetRate: Permill | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Permill]>;
       /**
        * Remove curator from a given curator group
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       removeCuratorFromGroup: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, curatorId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64]>;
       /**
        * Sell Nft
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       sellNft: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, price: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor, u128]>;
+      /**
+       * Extrinsic for pausing/re-enabling channel features
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the length of `rationale`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
       setChannelPausedFeaturesAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, newPausedFeatures: BTreeSet<PalletContentPermissionsCuratorGroupPausableChannelFeature>, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, BTreeSet<PalletContentPermissionsCuratorGroupPausableChannelFeature>, Bytes]>;
+      /**
+       * Extrinsic for setting channel visibility status (hidden/visible) by moderator
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the length of `rationale`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
       setChannelVisibilityAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, isHidden: bool | boolean | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
       /**
        * Set `is_active` status for curator group under given `curator_group_id`
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       setCuratorGroupStatus: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, isActive: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, bool]>;
       /**
        * Claim won english auction
        * Can be called by anyone
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       settleEnglishAuction: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64]>;
+      /**
+       * Extrinsic for video visibility status (hidden/visible) setting by moderator
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the length of `rationale`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
       setVideoVisibilityAsModerator: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, isHidden: bool | boolean | Uint8Array, rationale: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, bool, Bytes]>;
       /**
        * Return Nft back to the original artist at no cost
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       slingNftBack: AugmentedSubmittable<(videoId: u64 | AnyNumber | Uint8Array, ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, PalletContentPermissionsContentActor]>;
       /**
        * Start video nft english auction
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - W : whitelist member list length
+       * - DB:
+       * - O(W)
+       * # </weight>
        **/
       startEnglishAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, auctionParams: PalletContentNftTypesEnglishAuctionParamsRecord | { startingPrice?: any; buyNowPrice?: any; whitelist?: any; startsAt?: any; duration?: any; extensionPeriod?: any; minBidStep?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesEnglishAuctionParamsRecord]>;
       /**
        * Start video nft open auction
+       * <weight>
+       * 
+       * ## Weight
+       * `O (W)` where:
+       * - W : member whitelist length
+       * - DB:
+       * - O(W)
+       * # </weight>
        **/
       startOpenAuction: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, auctionParams: PalletContentNftTypesOpenAuctionParamsRecord | { startingPrice?: any; buyNowPrice?: any; startsAt?: any; whitelist?: any; bidLockDuration?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentNftTypesOpenAuctionParamsRecord]>;
       /**
        * Only Council can toggle nft issuance limits constraints
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       toggleNftLimits: AugmentedSubmittable<(enabled: bool | boolean | Uint8Array) => SubmittableExtrinsic<ApiType>, [bool]>;
       /**
        * Update Buy now nft price
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       updateBuyNowPrice: AugmentedSubmittable<(ownerId: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, newPrice: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u128]>;
-      updateChannel: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletContentChannelUpdateParametersRecord | { assetsToUpload?: any; newMeta?: any; assetsToRemove?: any; collaborators?: any; expectedDataObjectStateBloatBond?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C + D + E)` where:
+       * - `A` is the number of entries in `params.collaborators`
+       * - `B` is the number of items in `params.assets_to_upload.object_creation_list` (if provided)
+       * - `C` is the number of items in `params.assets_to_remove`
+       * - `D` is the length `params.new_meta`
+       * - `E` is `params.storage_buckets_num_witness` (if provided)
+       * - DB:
+       * - `O(A + B + C + E)` - from the the generated weights
+       * # </weight>
+       **/
+      updateChannel: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, params: PalletContentChannelUpdateParametersRecord | { assetsToUpload?: any; newMeta?: any; assetsToRemove?: any; collaborators?: any; expectedDataObjectStateBloatBond?: any; storageBucketsNumWitness?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentChannelUpdateParametersRecord]>;
       /**
        * Updates channel's NFT limit.
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       updateChannelNftLimit: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, nftLimitPeriod: PalletContentNftLimitPeriod | 'Daily' | 'Weekly' | number | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, limit: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, PalletContentNftLimitPeriod, u64, u64]>;
+      /**
+       * Update channel payouts
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)` where:
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
       updateChannelPayouts: AugmentedSubmittable<(params: PalletContentUpdateChannelPayoutsParametersRecord | { commitment?: any; payload?: any; minCashoutAllowed?: any; maxCashoutAllowed?: any; channelCashoutsEnabled?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentUpdateChannelPayoutsParametersRecord]>;
+      /**
+       * Extrinsic for updating channel privilege level (requires lead access)
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
+       **/
       updateChannelPrivilegeLevel: AugmentedSubmittable<(channelId: u64 | AnyNumber | Uint8Array, newPrivilegeLevel: u8 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u8]>;
       /**
        * Updates channel state bloat bond value.
        * Only lead can upload this value
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       updateChannelStateBloatBond: AugmentedSubmittable<(newChannelStateBloatBond: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
       /**
        * Update existing curator group's permissions
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A)` where:
+       * - `A` is the number of entries in `permissions_by_level` map
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       updateCuratorGroupPermissions: AugmentedSubmittable<(curatorGroupId: u64 | AnyNumber | Uint8Array, permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupContentModerationAction>>) => SubmittableExtrinsic<ApiType>, [u64, BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupContentModerationAction>>]>;
       /**
-       * Updates global NFT limit.
+       * Updates global NFT limit
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       updateGlobalNftLimit: AugmentedSubmittable<(nftLimitPeriod: PalletContentNftLimitPeriod | 'Daily' | 'Weekly' | number | Uint8Array, limit: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentNftLimitPeriod, u64]>;
       /**
        * Update upcoming creator token sale
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1) doesn't depend on the state or parameters
+       * # </weight>
        **/
       updateUpcomingCreatorTokenSale: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, newStartBlock: Option<u32> | null | object | string | Uint8Array, newDuration: Option<u32> | null | object | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, Option<u32>, Option<u32>]>;
-      updateVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, params: PalletContentVideoUpdateParametersRecord | { assetsToUpload?: any; newMeta?: any; assetsToRemove?: any; autoIssueNft?: any; expectedDataObjectStateBloatBond?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentVideoUpdateParametersRecord]>;
+      /**
+       * <weight>
+       * 
+       * ## Weight
+       * `O (A + B + C + D + E)` where:
+       * - `A` is params.assets_to_upload.object_creation_list.len() (if provided)
+       * - `B` is params.assets_to_remove.len()
+       * - `C` is `params.storage_buckets_num_witness` (if provided)
+       * - `D` is the length of open auction / english auction whitelist (if provided)
+       * - `E` is the length of `params.new_meta` (if provided)
+       * - DB:
+       * - `O(A + B + C + D)` - from the the generated weights
+       * # </weight>
+       **/
+      updateVideo: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, videoId: u64 | AnyNumber | Uint8Array, params: PalletContentVideoUpdateParametersRecord | { assetsToUpload?: any; newMeta?: any; assetsToRemove?: any; autoIssueNft?: any; expectedDataObjectStateBloatBond?: any; storageBucketsNumWitness?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, PalletContentVideoUpdateParametersRecord]>;
       /**
        * Updates video state bloat bond value.
        * Only lead can upload this value
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
        **/
       updateVideoStateBloatBond: AugmentedSubmittable<(newVideoStateBloatBond: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u128]>;
+      /**
+       * Withdraw JOY from channel account
+       * 
+       * <weight>
+       * 
+       * ## Weight
+       * `O (1)`
+       * - DB:
+       * - O(1)
+       * # </weight>
+       **/
       withdrawFromChannelBalance: AugmentedSubmittable<(actor: PalletContentPermissionsContentActor | { Curator: any } | { Member: any } | { Lead: any } | string | Uint8Array, channelId: u64 | AnyNumber | Uint8Array, amount: u128 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletContentPermissionsContentActor, u64, u128]>;
     };
     contentWorkingGroup: {
@@ -1228,19 +2004,6 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       moveThreadToCategory: AugmentedSubmittable<(actor: PalletForumPrivilegedActor | { Lead: any } | { Moderator: any } | string | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, newCategoryId: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletForumPrivilegedActor, u64, u64, u64]>;
-      /**
-       * Like or unlike a post.
-       * 
-       * <weight>
-       * 
-       * ## Weight
-       * `O (W)` where:
-       * - `W` is the category depth,
-       * - DB:
-       * - O(W)
-       * # </weight>
-       **/
-      reactPost: AugmentedSubmittable<(forumUserId: u64 | AnyNumber | Uint8Array, categoryId: u64 | AnyNumber | Uint8Array, threadId: u64 | AnyNumber | Uint8Array, postId: u64 | AnyNumber | Uint8Array, react: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, u64, u64, u64]>;
       /**
        * Set stickied threads for category
        * 
@@ -2369,6 +3132,142 @@ declare module '@polkadot/api-base/types/submittable' {
        **/
       workerRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, Bytes]>;
     };
+    multisig: {
+      /**
+       * Register approval for a dispatch to be made from a deterministic composite account if
+       * approved by a total of `threshold - 1` of `other_signatories`.
+       * 
+       * Payment: `DepositBase` will be reserved if this is the first approval, plus
+       * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
+       * is cancelled.
+       * 
+       * The dispatch origin for this call must be _Signed_.
+       * 
+       * - `threshold`: The total number of approvals for this dispatch before it is executed.
+       * - `other_signatories`: The accounts (other than the sender) who can approve this
+       * dispatch. May not be empty.
+       * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
+       * not the first approval, then it must be `Some`, with the timepoint (block number and
+       * transaction index) of the first approval transaction.
+       * - `call_hash`: The hash of the call to be executed.
+       * 
+       * NOTE: If this is the final approval, you will want to use `as_multi` instead.
+       * 
+       * # <weight>
+       * - `O(S)`.
+       * - Up to one balance-reserve or unreserve operation.
+       * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
+       * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
+       * - One encode & hash, both of complexity `O(S)`.
+       * - Up to one binary search and insert (`O(logS + S)`).
+       * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
+       * - One event.
+       * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
+       * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
+       * ----------------------------------
+       * - DB Weight:
+       * - Read: Multisig Storage, [Caller Account]
+       * - Write: Multisig Storage, [Caller Account]
+       * # </weight>
+       **/
+      approveAsMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, callHash: U8aFixed | string | Uint8Array, maxWeight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, U8aFixed, u64]>;
+      /**
+       * Register approval for a dispatch to be made from a deterministic composite account if
+       * approved by a total of `threshold - 1` of `other_signatories`.
+       * 
+       * If there are enough, then dispatch the call.
+       * 
+       * Payment: `DepositBase` will be reserved if this is the first approval, plus
+       * `threshold` times `DepositFactor`. It is returned once this dispatch happens or
+       * is cancelled.
+       * 
+       * The dispatch origin for this call must be _Signed_.
+       * 
+       * - `threshold`: The total number of approvals for this dispatch before it is executed.
+       * - `other_signatories`: The accounts (other than the sender) who can approve this
+       * dispatch. May not be empty.
+       * - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
+       * not the first approval, then it must be `Some`, with the timepoint (block number and
+       * transaction index) of the first approval transaction.
+       * - `call`: The call to be executed.
+       * 
+       * NOTE: Unless this is the final approval, you will generally want to use
+       * `approve_as_multi` instead, since it only requires a hash of the call.
+       * 
+       * Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
+       * on success, result is `Ok` and the result from the interior call, if it was executed,
+       * may be found in the deposited `MultisigExecuted` event.
+       * 
+       * # <weight>
+       * - `O(S + Z + Call)`.
+       * - Up to one balance-reserve or unreserve operation.
+       * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
+       * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
+       * - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
+       * - One encode & hash, both of complexity `O(S)`.
+       * - Up to one binary search and insert (`O(logS + S)`).
+       * - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
+       * - One event.
+       * - The weight of the `call`.
+       * - Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
+       * taken for its lifetime of `DepositBase + threshold * DepositFactor`.
+       * -------------------------------
+       * - DB Weight:
+       * - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)
+       * - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)
+       * - Plus Call Weight
+       * # </weight>
+       **/
+      asMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], maybeTimepoint: Option<PalletMultisigTimepoint> | null | object | string | Uint8Array, call: WrapperKeepOpaque<Call> | object | string | Uint8Array, storeCall: bool | boolean | Uint8Array, maxWeight: u64 | AnyNumber | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, Option<PalletMultisigTimepoint>, WrapperKeepOpaque<Call>, bool, u64]>;
+      /**
+       * Immediately dispatch a multi-signature call using a single approval from the caller.
+       * 
+       * The dispatch origin for this call must be _Signed_.
+       * 
+       * - `other_signatories`: The accounts (other than the sender) who are part of the
+       * multi-signature, but do not participate in the approval process.
+       * - `call`: The call to be executed.
+       * 
+       * Result is equivalent to the dispatched result.
+       * 
+       * # <weight>
+       * O(Z + C) where Z is the length of the call and C its execution weight.
+       * -------------------------------
+       * - DB Weight: None
+       * - Plus Call Weight
+       * # </weight>
+       **/
+      asMultiThreshold1: AugmentedSubmittable<(otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], call: Call | IMethod | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [Vec<AccountId32>, Call]>;
+      /**
+       * Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
+       * for this operation will be unreserved on success.
+       * 
+       * The dispatch origin for this call must be _Signed_.
+       * 
+       * - `threshold`: The total number of approvals for this dispatch before it is executed.
+       * - `other_signatories`: The accounts (other than the sender) who can approve this
+       * dispatch. May not be empty.
+       * - `timepoint`: The timepoint (block number and transaction index) of the first approval
+       * transaction for this dispatch.
+       * - `call_hash`: The hash of the call to be executed.
+       * 
+       * # <weight>
+       * - `O(S)`.
+       * - Up to one balance-reserve or unreserve operation.
+       * - One passthrough operation, one insert, both `O(S)` where `S` is the number of
+       * signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
+       * - One encode & hash, both of complexity `O(S)`.
+       * - One event.
+       * - I/O: 1 read `O(S)`, one remove.
+       * - Storage: removes one item.
+       * ----------------------------------
+       * - DB Weight:
+       * - Read: Multisig Storage, [Caller Account], Refund Account, Calls
+       * - Write: Multisig Storage, [Caller Account], Refund Account, Calls
+       * # </weight>
+       **/
+      cancelAsMulti: AugmentedSubmittable<(threshold: u16 | AnyNumber | Uint8Array, otherSignatories: Vec<AccountId32> | (AccountId32 | string | Uint8Array)[], timepoint: PalletMultisigTimepoint | { height?: any; index?: any } | string | Uint8Array, callHash: U8aFixed | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u16, Vec<AccountId32>, PalletMultisigTimepoint, U8aFixed]>;
+    };
     operationsWorkingGroupAlpha: {
       /**
        * Add a job opening for a regular worker/lead role.
@@ -3166,6 +4065,7 @@ declare module '@polkadot/api-base/types/submittable' {
        * Postconditions:
        * - Account information for `token_id` x `member_id` removed from storage
        * - bloat bond refunded to `member_id` controller account
+       * (or `bloat_bond.repayment_restricted_to` account)
        * 
        * <weight>
        * 
@@ -3331,13 +4231,14 @@ declare module '@polkadot/api-base/types/submittable' {
        * <weight>
        * 
        * ## Weight
-       * `O (T)` where:
+       * `O (T + M)` where:
        * - `T` is the length of `outputs`
+       * - `M` is the length of `metadata`
        * - DB:
        * - `O(T)` - from the the generated weights
        * # </weight>
        **/
-      transfer: AugmentedSubmittable<(srcMemberId: u64 | AnyNumber | Uint8Array, tokenId: u64 | AnyNumber | Uint8Array, outputs: PalletProjectTokenTransfersPayment) => SubmittableExtrinsic<ApiType>, [u64, u64, PalletProjectTokenTransfersPayment]>;
+      transfer: AugmentedSubmittable<(srcMemberId: u64 | AnyNumber | Uint8Array, tokenId: u64 | AnyNumber | Uint8Array, outputs: PalletProjectTokenTransfersPayment, metadata: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, PalletProjectTokenTransfersPayment, Bytes]>;
     };
     proposalsCodex: {
       /**
@@ -4178,10 +5079,6 @@ declare module '@polkadot/api-base/types/submittable' {
        * # </weight>
        **/
       storageOperatorRemark: AugmentedSubmittable<(workerId: u64 | AnyNumber | Uint8Array, storageBucketId: u64 | AnyNumber | Uint8Array, msg: Bytes | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [u64, u64, Bytes]>;
-      /**
-       * Create a dynamic bag. Development mode.
-       **/
-      sudoCreateDynamicBag: AugmentedSubmittable<(params: PalletStorageDynBagCreationParametersRecord | { bagId?: any; objectCreationList?: any; stateBloatBondSourceAccountId?: any; expectedDataSizeFee?: any; expectedDataObjectStateBloatBond?: any; storageBuckets?: any; distributionBuckets?: any } | string | Uint8Array) => SubmittableExtrinsic<ApiType>, [PalletStorageDynBagCreationParametersRecord]>;
       /**
        * Upload new data objects. Development mode.
        **/
diff --git a/src/augment/lookup.ts b/src/augment/lookup.ts
index 0117a854eab9f2c165b498411e092286b2073636..fba5eeb90f65014dba7430226c19893c58421163 100644
--- a/src/augment/lookup.ts
+++ b/src/augment/lookup.ts
@@ -414,16 +414,54 @@ export default {
     }
   },
   /**
-   * Lookup61: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
+   * Lookup61: pallet_multisig::pallet::Event<T>
+   **/
+  PalletMultisigEvent: {
+    _enum: {
+      NewMultisig: {
+        approving: 'AccountId32',
+        multisig: 'AccountId32',
+        callHash: '[u8;32]',
+      },
+      MultisigApproval: {
+        approving: 'AccountId32',
+        timepoint: 'PalletMultisigTimepoint',
+        multisig: 'AccountId32',
+        callHash: '[u8;32]',
+      },
+      MultisigExecuted: {
+        approving: 'AccountId32',
+        timepoint: 'PalletMultisigTimepoint',
+        multisig: 'AccountId32',
+        callHash: '[u8;32]',
+        result: 'Result<Null, SpRuntimeDispatchError>',
+      },
+      MultisigCancelled: {
+        cancelling: 'AccountId32',
+        timepoint: 'PalletMultisigTimepoint',
+        multisig: 'AccountId32',
+        callHash: '[u8;32]'
+      }
+    }
+  },
+  /**
+   * Lookup62: pallet_multisig::Timepoint<BlockNumber>
+   **/
+  PalletMultisigTimepoint: {
+    height: 'u32',
+    index: 'u32'
+  },
+  /**
+   * Lookup63: pallet_council::RawEvent<Balance, BlockNumber, MemberId, sp_core::crypto::AccountId32>
    **/
   PalletCouncilRawEvent: {
     _enum: {
-      AnnouncingPeriodStarted: 'Null',
-      NotEnoughCandidates: 'Null',
+      AnnouncingPeriodStarted: 'u32',
+      NotEnoughCandidates: 'u32',
       VotingPeriodStarted: 'u64',
       NewCandidate: '(u64,AccountId32,AccountId32,u128)',
-      NewCouncilElected: 'Vec<u64>',
-      NewCouncilNotElected: 'Null',
+      NewCouncilElected: '(Vec<u64>,u32)',
+      NewCouncilNotElected: 'u32',
       CandidacyStakeRelease: 'u64',
       CandidacyWithdraw: 'u64',
       CandidacyNoteSet: '(u64,Bytes)',
@@ -440,13 +478,13 @@ export default {
     }
   },
   /**
-   * Lookup63: pallet_referendum::RawEvent<Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
+   * Lookup65: pallet_referendum::RawEvent<BlockNumber, Balance, primitive_types::H256, sp_core::crypto::AccountId32, VotePower, MemberId, pallet_referendum::Instance1>
    **/
   PalletReferendumRawEvent: {
     _enum: {
-      ReferendumStarted: 'u64',
-      ReferendumStartedForcefully: 'u64',
-      RevealingStageStarted: 'Null',
+      ReferendumStarted: '(u64,u32)',
+      ReferendumStartedForcefully: '(u64,u32)',
+      RevealingStageStarted: 'u32',
       ReferendumFinished: 'Vec<PalletReferendumOptionResult>',
       VoteCast: '(AccountId32,H256,u128)',
       VoteRevealed: '(AccountId32,u64,Bytes)',
@@ -454,24 +492,24 @@ export default {
     }
   },
   /**
-   * Lookup64: pallet_referendum::Instance1
+   * Lookup66: pallet_referendum::Instance1
    **/
   PalletReferendumInstance1: 'Null',
   /**
-   * Lookup66: pallet_referendum::OptionResult<MemberId, VotePower>
+   * Lookup68: pallet_referendum::OptionResult<MemberId, VotePower>
    **/
   PalletReferendumOptionResult: {
     optionId: 'u64',
     votePower: 'u128'
   },
   /**
-   * Lookup67: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateFoundingMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
+   * Lookup69: pallet_membership::RawEvent<MemberId, Balance, sp_core::crypto::AccountId32, pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>, ActorId, pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>, pallet_membership::CreateFoundingMemberParameters<sp_core::crypto::AccountId32>, pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletMembershipRawEvent: {
     _enum: {
       MemberInvited: '(u64,PalletMembershipInviteMembershipParameters)',
       MembershipGifted: '(u64,PalletMembershipGiftMembershipParameters)',
-      MembershipBought: '(u64,PalletMembershipBuyMembershipParameters)',
+      MembershipBought: '(u64,PalletMembershipBuyMembershipParameters,u32)',
       MemberProfileUpdated: '(u64,Option<Bytes>,Option<Bytes>)',
       MemberAccountsUpdated: '(u64,Option<AccountId32>,Option<AccountId32>)',
       MemberVerificationStatusUpdated: '(u64,bool,u64)',
@@ -485,11 +523,11 @@ export default {
       StakingAccountRemoved: '(AccountId32,u64)',
       StakingAccountConfirmed: '(AccountId32,u64)',
       MemberRemarked: '(u64,Bytes)',
-      FoundingMemberCreated: '(u64,PalletMembershipCreateFoundingMemberParameters)'
+      FoundingMemberCreated: '(u64,PalletMembershipCreateFoundingMemberParameters,u32)'
     }
   },
   /**
-   * Lookup68: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+   * Lookup70: pallet_membership::BuyMembershipParameters<sp_core::crypto::AccountId32, MemberId>
    **/
   PalletMembershipBuyMembershipParameters: {
     rootAccount: 'AccountId32',
@@ -499,7 +537,7 @@ export default {
     referrerId: 'Option<u64>'
   },
   /**
-   * Lookup71: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
+   * Lookup73: pallet_membership::InviteMembershipParameters<sp_core::crypto::AccountId32, MemberId>
    **/
   PalletMembershipInviteMembershipParameters: {
     invitingMemberId: 'u64',
@@ -509,7 +547,7 @@ export default {
     metadata: 'Bytes'
   },
   /**
-   * Lookup72: pallet_membership::CreateFoundingMemberParameters<sp_core::crypto::AccountId32>
+   * Lookup74: pallet_membership::CreateFoundingMemberParameters<sp_core::crypto::AccountId32>
    **/
   PalletMembershipCreateFoundingMemberParameters: {
     rootAccount: 'AccountId32',
@@ -518,7 +556,7 @@ export default {
     metadata: 'Bytes'
   },
   /**
-   * Lookup73: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
+   * Lookup75: pallet_membership::GiftMembershipParameters<sp_core::crypto::AccountId32, Balance>
    **/
   PalletMembershipGiftMembershipParameters: {
     rootAccount: 'AccountId32',
@@ -531,7 +569,7 @@ export default {
     applyRootAccountInvitationLock: 'Option<u128>'
   },
   /**
-   * Lookup75: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, PostReactionId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
+   * Lookup77: pallet_forum::RawEvent<CategoryId, ModeratorId, ThreadId, PostId, primitive_types::H256, ForumUserId, pallet_forum::PrivilegedActor<T>, pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>>
    **/
   PalletForumRawEvent: {
     _enum: {
@@ -550,13 +588,12 @@ export default {
       PostModerated: '(u64,Bytes,PalletForumPrivilegedActor,u64,u64)',
       PostDeleted: '(Bytes,u64,BTreeMap<PalletForumExtendedPostIdObject, bool>)',
       PostTextUpdated: '(u64,u64,u64,u64,Bytes)',
-      PostReacted: '(u64,u64,u64,u64,u64)',
       CategoryStickyThreadUpdate: '(u64,Vec<u64>,PalletForumPrivilegedActor)',
       CategoryMembershipOfModeratorUpdated: '(u64,u64,bool)'
     }
   },
   /**
-   * Lookup76: pallet_forum::PrivilegedActor<T>
+   * Lookup78: pallet_forum::PrivilegedActor<T>
    **/
   PalletForumPrivilegedActor: {
     _enum: {
@@ -565,7 +602,7 @@ export default {
     }
   },
   /**
-   * Lookup77: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
+   * Lookup79: pallet_forum::ExtendedPostIdObject<CategoryId, ThreadId, PostId>
    **/
   PalletForumExtendedPostIdObject: {
     categoryId: 'u64',
@@ -573,7 +610,7 @@ export default {
     postId: 'u64'
   },
   /**
-   * Lookup81: pallet_constitution::Event
+   * Lookup83: pallet_constitution::Event
    **/
   PalletConstitutionEvent: {
     _enum: {
@@ -581,7 +618,95 @@ export default {
     }
   },
   /**
-   * Lookup82: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
+   * Lookup84: pallet_bounty::RawEvent<BountyId, EntryId, Balance, MemberId, sp_core::crypto::AccountId32, pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId>, BTreeMap<K, pallet_bounty::OracleWorkEntryJudgment<Balance>>>
+   **/
+  PalletBountyRawEvent: {
+    _enum: {
+      BountyCreated: '(u64,PalletBountyBountyParameters,Bytes)',
+      BountyOracleSwitched: '(u64,PalletBountyBountyActor,PalletBountyBountyActor,PalletBountyBountyActor)',
+      BountyTerminated: '(u64,PalletBountyBountyActor,PalletBountyBountyActor,PalletBountyBountyActor)',
+      BountyFunded: '(u64,PalletBountyBountyActor,u128)',
+      BountyMaxFundingReached: 'u64',
+      BountyFundingWithdrawal: '(u64,PalletBountyBountyActor)',
+      BountyCreatorCherryWithdrawal: '(u64,PalletBountyBountyActor)',
+      BountyCreatorOracleRewardWithdrawal: '(u64,PalletBountyBountyActor)',
+      BountyOracleRewardWithdrawal: '(u64,PalletBountyBountyActor,u128)',
+      BountyRemoved: 'u64',
+      WorkEntryAnnounced: '(u64,u64,u64,AccountId32,Bytes)',
+      WorkSubmitted: '(u64,u64,u64,Bytes)',
+      OracleJudgmentSubmitted: '(u64,PalletBountyBountyActor,BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>,Bytes)',
+      WorkEntrantFundsWithdrawn: '(u64,u64,u64)',
+      BountyContributorRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+      BountyOracleRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+      BountyEntrantRemarked: '(u64,u64,u64,Bytes)',
+      BountyCreatorRemarked: '(PalletBountyBountyActor,u64,Bytes)',
+      WorkSubmissionPeriodEnded: '(u64,PalletBountyBountyActor)',
+      WorkEntrantStakeUnlocked: '(u64,u64,AccountId32)',
+      WorkEntrantStakeSlashed: '(u64,u64,AccountId32,u128)',
+      FunderStateBloatBondWithdrawn: '(u64,PalletBountyBountyActor,u128)',
+      CreatorStateBloatBondWithdrawn: '(u64,PalletBountyBountyActor,u128)'
+    }
+  },
+  /**
+   * Lookup85: pallet_bounty::BountyParameters<Balance, BlockNumber, MemberId>
+   **/
+  PalletBountyBountyParameters: {
+    oracle: 'PalletBountyBountyActor',
+    contractType: 'PalletBountyAssuranceContractType',
+    creator: 'PalletBountyBountyActor',
+    cherry: 'u128',
+    oracleReward: 'u128',
+    entrantStake: 'u128',
+    fundingType: 'PalletBountyFundingType'
+  },
+  /**
+   * Lookup86: pallet_bounty::BountyActor<MemberId>
+   **/
+  PalletBountyBountyActor: {
+    _enum: {
+      Council: 'Null',
+      Member: 'u64'
+    }
+  },
+  /**
+   * Lookup87: pallet_bounty::AssuranceContractType<MemberId>
+   **/
+  PalletBountyAssuranceContractType: {
+    _enum: {
+      Open: 'Null',
+      Closed: 'BTreeSet<u64>'
+    }
+  },
+  /**
+   * Lookup89: pallet_bounty::FundingType<BlockNumber, Balance>
+   **/
+  PalletBountyFundingType: {
+    _enum: {
+      Perpetual: {
+        target: 'u128',
+      },
+      Limited: {
+        target: 'u128',
+        fundingPeriod: 'u32'
+      }
+    }
+  },
+  /**
+   * Lookup91: pallet_bounty::OracleWorkEntryJudgment<Balance>
+   **/
+  PalletBountyOracleWorkEntryJudgment: {
+    _enum: {
+      Winner: {
+        reward: 'u128',
+      },
+      Rejected: {
+        slashingShare: 'Perbill',
+        actionJustification: 'Bytes'
+      }
+    }
+  },
+  /**
+   * Lookup94: pallet_utility::RawEvent<Balance, sp_core::crypto::AccountId32>
    **/
   PalletUtilityRawEvent: {
     _enum: {
@@ -592,19 +717,19 @@ export default {
     }
   },
   /**
-   * Lookup83: pallet_common::working_group::WorkingGroup
+   * Lookup95: pallet_common::working_group::WorkingGroup
    **/
   PalletCommonWorkingGroup: {
     _enum: ['Forum', 'Storage', 'Content', 'OperationsAlpha', 'Gateway', 'Distribution', 'OperationsBeta', 'OperationsGamma', 'Membership']
   },
   /**
-   * Lookup84: pallet_common::BalanceKind
+   * Lookup96: pallet_common::BalanceKind
    **/
   PalletCommonBalanceKind: {
     _enum: ['Positive', 'Negative']
   },
   /**
-   * Lookup85: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, DataObjectId, BlockNumber, TokenId, TransferId>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<MemberId, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
+   * Lookup97: pallet_content::RawEvent<pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>, MemberId, CuratorGroupId, CuratorId, VideoId, ChannelId, pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>, DataObjectId, pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, OpenAuctionId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance, pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>, pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>, pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>, ChannelPrivilegeLevel, BTreeMap<K, BTreeSet<pallet_content::permissions::curator_group::ContentModerationAction>>, pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>>, Balance, TransferId>, pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>>, sp_core::crypto::AccountId32, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>, TokenId, pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>>
    **/
   PalletContentRawEvent: {
     _enum: {
@@ -658,7 +783,7 @@ export default {
       NftOwnerRemarked: '(PalletContentPermissionsContentActor,u64,Bytes)',
       InitializedChannelTransfer: '(u64,PalletContentPermissionsContentActor,PalletContentPendingTransfer)',
       CancelChannelTransfer: '(u64,PalletContentPermissionsContentActor)',
-      ChannelTransferAccepted: '(u64,PalletContentTransferCommitmentParameters)',
+      ChannelTransferAccepted: '(u64,PalletContentTransferCommitmentParametersBTreeMap)',
       GlobalNftLimitUpdated: '(PalletContentNftLimitPeriod,u64)',
       ChannelNftLimitUpdated: '(PalletContentPermissionsContentActor,PalletContentNftLimitPeriod,u64,u64)',
       ToggledNftLimits: 'bool',
@@ -666,7 +791,7 @@ export default {
     }
   },
   /**
-   * Lookup86: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
+   * Lookup98: pallet_content::permissions::ContentActor<CuratorGroupId, CuratorId, MemberId>
    **/
   PalletContentPermissionsContentActor: {
     _enum: {
@@ -676,7 +801,7 @@ export default {
     }
   },
   /**
-   * Lookup87: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, DataObjectId, BlockNumber, TokenId, TransferId>
+   * Lookup99: pallet_content::types::ChannelRecord<MemberId, CuratorGroupId, Balance, ChannelPrivilegeLevel, BlockNumber, TokenId, TransferId, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletContentChannelRecord: {
     owner: 'PalletContentChannelOwner',
@@ -692,10 +817,23 @@ export default {
     dailyNftCounter: 'PalletContentNftCounter',
     weeklyNftCounter: 'PalletContentNftCounter',
     creatorTokenId: 'Option<u64>',
-    channelStateBloatBond: 'u128'
+    channelStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
   },
   /**
-   * Lookup88: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
+   * Lookup103: pallet_content::types::ChannelActionPermission
+   **/
+  PalletContentChannelActionPermission: {
+    _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken']
+  },
+  /**
+   * Lookup108: pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>
+   **/
+  PalletCommonBloatBondRepayableBloatBond: {
+    repaymentRestrictedTo: 'Option<AccountId32>',
+    amount: 'u128'
+  },
+  /**
+   * Lookup109: pallet_content::types::ChannelOwner<MemberId, CuratorGroupId>
    **/
   PalletContentChannelOwner: {
     _enum: {
@@ -704,19 +842,13 @@ export default {
     }
   },
   /**
-   * Lookup91: pallet_content::types::ChannelActionPermission
-   **/
-  PalletContentChannelActionPermission: {
-    _enum: ['UpdateChannelMetadata', 'ManageNonVideoChannelAssets', 'ManageChannelCollaborators', 'UpdateVideoMetadata', 'AddVideo', 'ManageVideoAssets', 'DeleteChannel', 'DeleteVideo', 'ManageVideoNfts', 'AgentRemark', 'TransferChannel', 'ClaimChannelReward', 'WithdrawFromChannelBalance', 'IssueCreatorToken', 'ClaimCreatorTokenPatronage', 'InitAndManageCreatorTokenSale', 'CreatorTokenIssuerTransfer', 'MakeCreatorTokenPermissionless', 'ReduceCreatorTokenPatronageRate', 'ManageRevenueSplits', 'DeissueCreatorToken']
-  },
-  /**
-   * Lookup96: pallet_content::permissions::curator_group::PausableChannelFeature
+   * Lookup111: pallet_content::permissions::curator_group::PausableChannelFeature
    **/
   PalletContentPermissionsCuratorGroupPausableChannelFeature: {
     _enum: ['ChannelFundsTransfer', 'CreatorCashout', 'VideoNftIssuance', 'VideoCreation', 'VideoUpdate', 'ChannelUpdate', 'CreatorTokenIssuance']
   },
   /**
-   * Lookup98: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId>
+   * Lookup113: pallet_content::types::ChannelTransferStatus<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>>
    **/
   PalletContentChannelTransferStatus: {
     _enum: {
@@ -725,36 +857,36 @@ export default {
     }
   },
   /**
-   * Lookup99: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId>
+   * Lookup114: pallet_content::types::PendingTransfer<MemberId, CuratorGroupId, Balance, TransferId, frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>>
    **/
   PalletContentPendingTransfer: {
     newOwner: 'PalletContentChannelOwner',
-    transferParams: 'PalletContentTransferCommitmentParameters'
+    transferParams: 'PalletContentTransferCommitmentParametersBoundedBTreeMap'
   },
   /**
-   * Lookup100: pallet_content::types::TransferCommitmentParameters<MemberId, Balance, TransferId>
+   * Lookup115: pallet_content::types::TransferCommitmentParameters<frame_support::storage::bounded_btree_map::BoundedBTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>, S>, Balance, TransferId>
    **/
-  PalletContentTransferCommitmentParameters: {
+  PalletContentTransferCommitmentParametersBoundedBTreeMap: {
     newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>',
     price: 'u128',
     transferId: 'u64'
   },
   /**
-   * Lookup102: pallet_content::types::LimitPerPeriod<BlockNumber>
+   * Lookup116: pallet_content::types::LimitPerPeriod<BlockNumber>
    **/
   PalletContentLimitPerPeriod: {
     limit: 'u64',
     blockNumberPeriod: 'u32'
   },
   /**
-   * Lookup103: pallet_content::types::NftCounter<BlockNumber>
+   * Lookup117: pallet_content::types::NftCounter<BlockNumber>
    **/
   PalletContentNftCounter: {
     counter: 'u64',
     lastUpdated: 'u32'
   },
   /**
-   * Lookup104: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
+   * Lookup118: pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>
    **/
   PalletContentNftTypesEnglishAuctionParamsRecord: {
     startingPrice: 'u128',
@@ -766,7 +898,7 @@ export default {
     minBidStep: 'u128'
   },
   /**
-   * Lookup106: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
+   * Lookup120: pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>
    **/
   PalletContentNftTypesOpenAuctionParamsRecord: {
     startingPrice: 'u128',
@@ -776,7 +908,7 @@ export default {
     bidLockDuration: 'u32'
   },
   /**
-   * Lookup107: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
+   * Lookup121: pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>
    **/
   PalletContentNftTypesNftIssuanceParametersRecord: {
     royalty: 'Option<Perbill>',
@@ -785,7 +917,7 @@ export default {
     initTransactionalStatus: 'PalletContentNftTypesInitTransactionalStatusRecord'
   },
   /**
-   * Lookup108: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
+   * Lookup122: pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>
    **/
   PalletContentNftTypesInitTransactionalStatusRecord: {
     _enum: {
@@ -797,7 +929,7 @@ export default {
     }
   },
   /**
-   * Lookup110: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
+   * Lookup124: pallet_content::types::ChannelCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, MemberId, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, Balance>
    **/
   PalletContentChannelCreationParametersRecord: {
     assets: 'Option<PalletContentStorageAssetsRecord>',
@@ -809,14 +941,14 @@ export default {
     expectedDataObjectStateBloatBond: 'u128'
   },
   /**
-   * Lookup111: pallet_content::types::StorageAssetsRecord<Balance>
+   * Lookup125: pallet_content::types::StorageAssetsRecord<Balance>
    **/
   PalletContentStorageAssetsRecord: {
     objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
     expectedDataSizeFee: 'u128'
   },
   /**
-   * Lookup113: pallet_storage::DataObjectCreationParameters
+   * Lookup127: pallet_storage::DataObjectCreationParameters
    **/
   PalletStorageDataObjectCreationParameters: {
     _alias: {
@@ -826,44 +958,47 @@ export default {
     ipfsContentId: 'Bytes'
   },
   /**
-   * Lookup114: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
+   * Lookup128: pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>
    **/
   PalletStorageDistributionBucketIdRecord: {
     distributionBucketFamilyId: 'u64',
     distributionBucketIndex: 'u64'
   },
   /**
-   * Lookup118: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
+   * Lookup132: pallet_content::types::ChannelUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, MemberId, Balance>
    **/
   PalletContentChannelUpdateParametersRecord: {
     assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
     newMeta: 'Option<Bytes>',
     assetsToRemove: 'BTreeSet<u64>',
     collaborators: 'Option<BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>>',
-    expectedDataObjectStateBloatBond: 'u128'
+    expectedDataObjectStateBloatBond: 'u128',
+    storageBucketsNumWitness: 'Option<u32>'
   },
   /**
-   * Lookup120: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+   * Lookup134: pallet_content::types::VideoCreationParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
    **/
   PalletContentVideoCreationParametersRecord: {
     assets: 'Option<PalletContentStorageAssetsRecord>',
     meta: 'Option<Bytes>',
     autoIssueNft: 'Option<PalletContentNftTypesNftIssuanceParametersRecord>',
     expectedVideoStateBloatBond: 'u128',
-    expectedDataObjectStateBloatBond: 'u128'
+    expectedDataObjectStateBloatBond: 'u128',
+    storageBucketsNumWitness: 'u32'
   },
   /**
-   * Lookup122: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
+   * Lookup136: pallet_content::types::VideoUpdateParametersRecord<pallet_content::types::StorageAssetsRecord<Balance>, DataObjectId, pallet_content::nft::types::NftIssuanceParametersRecord<MemberId, pallet_content::nft::types::InitTransactionalStatusRecord<pallet_content::nft::types::EnglishAuctionParamsRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionParamsRecord<BlockNumber, Balance, MemberId>, MemberId, Balance>>, Balance>
    **/
   PalletContentVideoUpdateParametersRecord: {
     assetsToUpload: 'Option<PalletContentStorageAssetsRecord>',
     newMeta: 'Option<Bytes>',
     assetsToRemove: 'BTreeSet<u64>',
     autoIssueNft: 'Option<PalletContentNftTypesNftIssuanceParametersRecord>',
-    expectedDataObjectStateBloatBond: 'u128'
+    expectedDataObjectStateBloatBond: 'u128',
+    storageBucketsNumWitness: 'Option<u32>'
   },
   /**
-   * Lookup125: pallet_content::permissions::curator_group::ContentModerationAction
+   * Lookup139: pallet_content::permissions::curator_group::ContentModerationAction
    **/
   PalletContentPermissionsCuratorGroupContentModerationAction: {
     _enum: {
@@ -878,7 +1013,15 @@ export default {
     }
   },
   /**
-   * Lookup129: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>
+   * Lookup143: pallet_content::types::TransferCommitmentParameters<BTreeMap<K, BTreeSet<pallet_content::types::ChannelActionPermission>>, Balance, TransferId>
+   **/
+  PalletContentTransferCommitmentParametersBTreeMap: {
+    newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>',
+    price: 'u128',
+    transferId: 'u64'
+  },
+  /**
+   * Lookup144: pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>
    **/
   PalletContentUpdateChannelPayoutsParametersRecord: {
     commitment: 'Option<H256>',
@@ -888,7 +1031,7 @@ export default {
     channelCashoutsEnabled: 'Option<bool>'
   },
   /**
-   * Lookup130: pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>
+   * Lookup145: pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>
    **/
   PalletContentChannelPayoutsPayloadParametersRecord: {
     uploaderAccount: 'AccountId32',
@@ -897,7 +1040,7 @@ export default {
     expectedDataObjectStateBloatBond: 'u128'
   },
   /**
-   * Lookup134: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
+   * Lookup149: pallet_content::types::ChannelFundsDestination<sp_core::crypto::AccountId32>
    **/
   PalletContentChannelFundsDestination: {
     _enum: {
@@ -906,20 +1049,20 @@ export default {
     }
   },
   /**
-   * Lookup135: pallet_content::types::NftLimitPeriod
+   * Lookup150: pallet_content::types::NftLimitPeriod
    **/
   PalletContentNftLimitPeriod: {
     _enum: ['Daily', 'Weekly']
   },
   /**
-   * Lookup136: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex>
+   * Lookup151: pallet_storage::RawEvent<StorageBucketId, WorkerId, DataObjectId, pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>, pallet_storage::BagIdType<MemberId, ChannelId>, pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, DistributionBucketFamilyId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>, DistributionBucketIndex, pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>>
    **/
   PalletStorageRawEvent: {
     _enum: {
       StorageBucketCreated: '(u64,Option<u64>,bool,u64,u64)',
       StorageBucketInvitationAccepted: '(u64,u64,AccountId32)',
       StorageBucketsUpdatedForBag: '(PalletStorageBagIdType,BTreeSet<u64>,BTreeSet<u64>)',
-      DataObjectsUploaded: '(Vec<u64>,PalletStorageUploadParametersRecord,u128)',
+      DataObjectsUploaded: '(BTreeSet<u64>,PalletStorageUploadParametersRecord,u128)',
       StorageOperatorMetadataSet: '(u64,u64,Bytes)',
       StorageBucketVoucherLimitsSet: '(u64,u64,u64)',
       PendingDataObjectsAccepted: '(u64,u64,PalletStorageBagIdType,BTreeSet<u64>)',
@@ -934,12 +1077,11 @@ export default {
       DataObjectsDeleted: '(AccountId32,PalletStorageBagIdType,BTreeSet<u64>)',
       StorageBucketStatusUpdated: '(u64,bool)',
       UpdateBlacklist: '(BTreeSet<Bytes>,BTreeSet<Bytes>)',
-      DynamicBagDeleted: '(AccountId32,PalletStorageDynamicBagIdType)',
-      DynamicBagCreated: '(PalletStorageDynamicBagIdType,BTreeSet<u64>,BTreeSet<PalletStorageDistributionBucketIdRecord>)',
+      DynamicBagDeleted: 'PalletStorageDynamicBagIdType',
+      DynamicBagCreated: '(PalletStorageDynBagCreationParametersRecord,BTreeSet<u64>)',
       VoucherChanged: '(u64,PalletStorageVoucher)',
       StorageBucketDeleted: 'u64',
       NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: '(PalletStorageDynamicBagType,u64)',
-      BagObjectsChanged: '(PalletStorageBagIdType,u64,u64)',
       DistributionBucketFamilyCreated: 'u64',
       DistributionBucketFamilyDeleted: 'u64',
       DistributionBucketCreated: '(u64,bool,PalletStorageDistributionBucketIdRecord)',
@@ -956,13 +1098,13 @@ export default {
       DistributionBucketOperatorRemoved: '(PalletStorageDistributionBucketIdRecord,u64)',
       DistributionBucketFamilyMetadataSet: '(u64,Bytes)',
       DataObjectStateBloatBondValueUpdated: 'u128',
-      DataObjectsUpdated: '(PalletStorageUploadParametersRecord,BTreeSet<u64>)',
+      DataObjectsUpdated: '(PalletStorageUploadParametersRecord,BTreeSet<u64>,BTreeSet<u64>)',
       StorageOperatorRemarked: '(u64,u64,Bytes)',
       DistributionOperatorRemarked: '(u64,PalletStorageDistributionBucketIdRecord,Bytes)'
     }
   },
   /**
-   * Lookup137: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
+   * Lookup152: pallet_storage::UploadParametersRecord<pallet_storage::BagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance>
    **/
   PalletStorageUploadParametersRecord: {
     bagId: 'PalletStorageBagIdType',
@@ -972,7 +1114,7 @@ export default {
     expectedDataObjectStateBloatBond: 'u128'
   },
   /**
-   * Lookup138: pallet_storage::BagIdType<MemberId, ChannelId>
+   * Lookup153: pallet_storage::BagIdType<MemberId, ChannelId>
    **/
   PalletStorageBagIdType: {
     _enum: {
@@ -981,7 +1123,7 @@ export default {
     }
   },
   /**
-   * Lookup139: pallet_storage::StaticBagId
+   * Lookup154: pallet_storage::StaticBagId
    **/
   PalletStorageStaticBagId: {
     _enum: {
@@ -990,7 +1132,7 @@ export default {
     }
   },
   /**
-   * Lookup140: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
+   * Lookup155: pallet_storage::DynamicBagIdType<MemberId, ChannelId>
    **/
   PalletStorageDynamicBagIdType: {
     _enum: {
@@ -999,7 +1141,19 @@ export default {
     }
   },
   /**
-   * Lookup143: pallet_storage::Voucher
+   * Lookup156: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+   **/
+  PalletStorageDynBagCreationParametersRecord: {
+    bagId: 'PalletStorageDynamicBagIdType',
+    objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
+    stateBloatBondSourceAccountId: 'AccountId32',
+    expectedDataSizeFee: 'u128',
+    expectedDataObjectStateBloatBond: 'u128',
+    storageBuckets: 'BTreeSet<u64>',
+    distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>'
+  },
+  /**
+   * Lookup159: pallet_storage::Voucher
    **/
   PalletStorageVoucher: {
     sizeLimit: 'u64',
@@ -1008,18 +1162,18 @@ export default {
     objectsUsed: 'u64'
   },
   /**
-   * Lookup144: pallet_storage::DynamicBagType
+   * Lookup160: pallet_storage::DynamicBagType
    **/
   PalletStorageDynamicBagType: {
     _enum: ['Member', 'Channel']
   },
   /**
-   * Lookup148: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>>
+   * Lookup164: pallet_project_token::events::RawEvent<Balance, JoyBalance, TokenId, sp_core::crypto::AccountId32, MemberId, BlockNumber, pallet_project_token::types::TransferPolicy<primitive_types::H256>, pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>, pallet_project_token::types::Transfers<pallet_project_token::types::Validated<MemberId>, pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>>, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>>
    **/
   PalletProjectTokenEventsRawEvent: {
     _enum: {
-      TokenAmountTransferred: '(u64,u64,BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>)',
-      TokenAmountTransferredByIssuer: '(u64,u64,BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>)',
+      TokenAmountTransferred: '(u64,u64,BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>,Bytes)',
+      TokenAmountTransferredByIssuer: '(u64,u64,BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>,Bytes)',
       PatronageRateDecreasedTo: '(u64,Perquintill)',
       PatronageCreditClaimed: '(u64,u128,u64)',
       RevenueSplitIssued: '(u64,u32,u32,u128)',
@@ -1039,7 +1193,7 @@ export default {
     }
   },
   /**
-   * Lookup149: pallet_project_token::types::TransferPolicy<primitive_types::H256>
+   * Lookup165: pallet_project_token::types::TransferPolicy<primitive_types::H256>
    **/
   PalletProjectTokenTransferPolicy: {
     _enum: {
@@ -1048,7 +1202,7 @@ export default {
     }
   },
   /**
-   * Lookup150: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
+   * Lookup166: pallet_project_token::types::TokenIssuanceParameters<primitive_types::H256, pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>, pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>, MemberId>
    **/
   PalletProjectTokenTokenIssuanceParameters: {
     initialAllocation: 'BTreeMap<u64, PalletProjectTokenTokenAllocation>',
@@ -1058,14 +1212,14 @@ export default {
     revenueSplitRate: 'Permill'
   },
   /**
-   * Lookup151: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+   * Lookup167: pallet_project_token::types::TokenAllocation<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
    **/
   PalletProjectTokenTokenAllocation: {
     amount: 'u128',
     vestingScheduleParams: 'Option<PalletProjectTokenVestingScheduleParams>'
   },
   /**
-   * Lookup152: pallet_project_token::types::VestingScheduleParams<BlockNumber>
+   * Lookup168: pallet_project_token::types::VestingScheduleParams<BlockNumber>
    **/
   PalletProjectTokenVestingScheduleParams: {
     linearVestingDuration: 'u32',
@@ -1073,7 +1227,7 @@ export default {
     cliffAmountPercentage: 'Permill'
   },
   /**
-   * Lookup155: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
+   * Lookup171: pallet_project_token::types::TransferPolicyParams<pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>>
    **/
   PalletProjectTokenTransferPolicyParams: {
     _enum: {
@@ -1082,14 +1236,14 @@ export default {
     }
   },
   /**
-   * Lookup156: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
+   * Lookup172: pallet_project_token::types::WhitelistParams<primitive_types::H256, pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>>
    **/
   PalletProjectTokenWhitelistParams: {
     commitment: 'H256',
     payload: 'Option<PalletProjectTokenSingleDataObjectUploadParams>'
   },
   /**
-   * Lookup157: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
+   * Lookup173: pallet_project_token::types::SingleDataObjectUploadParams<JoyBalance>
    **/
   PalletProjectTokenSingleDataObjectUploadParams: {
     objectCreationParams: 'PalletStorageDataObjectCreationParameters',
@@ -1097,7 +1251,7 @@ export default {
     expectedDataObjectStateBloatBond: 'u128'
   },
   /**
-   * Lookup164: pallet_project_token::types::Validated<MemberId>
+   * Lookup180: pallet_project_token::types::Validated<MemberId>
    **/
   PalletProjectTokenValidated: {
     _enum: {
@@ -1106,22 +1260,21 @@ export default {
     }
   },
   /**
-   * Lookup165: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+   * Lookup181: pallet_project_token::types::ValidatedPayment<pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
    **/
   PalletProjectTokenValidatedPayment: {
     payment: 'PalletProjectTokenPaymentWithVesting',
     vestingCleanupCandidate: 'Option<PalletProjectTokenVestingSource>'
   },
   /**
-   * Lookup166: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+   * Lookup182: pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
    **/
   PalletProjectTokenPaymentWithVesting: {
-    remark: 'Bytes',
     amount: 'u128',
     vestingSchedule: 'Option<PalletProjectTokenVestingScheduleParams>'
   },
   /**
-   * Lookup168: pallet_project_token::types::VestingSource
+   * Lookup184: pallet_project_token::types::VestingSource
    **/
   PalletProjectTokenVestingSource: {
     _enum: {
@@ -1131,7 +1284,7 @@ export default {
     }
   },
   /**
-   * Lookup172: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
+   * Lookup188: pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>
    **/
   PalletProjectTokenTokenSale: {
     unitPrice: 'u128',
@@ -1146,7 +1299,7 @@ export default {
     autoFinalize: 'bool'
   },
   /**
-   * Lookup174: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
+   * Lookup190: pallet_proposals_engine::RawEvent<ProposalId, MemberId, BlockNumber>
    **/
   PalletProposalsEngineRawEvent: {
     _enum: {
@@ -1159,7 +1312,7 @@ export default {
     }
   },
   /**
-   * Lookup175: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
+   * Lookup191: pallet_proposals_engine::types::proposal_statuses::ProposalStatus<BlockNumber>
    **/
   PalletProposalsEngineProposalStatusesProposalStatus: {
     _enum: {
@@ -1169,7 +1322,7 @@ export default {
     }
   },
   /**
-   * Lookup176: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
+   * Lookup192: pallet_proposals_engine::types::proposal_statuses::ProposalDecision
    **/
   PalletProposalsEngineProposalStatusesProposalDecision: {
     _enum: {
@@ -1183,13 +1336,13 @@ export default {
     }
   },
   /**
-   * Lookup177: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
+   * Lookup193: pallet_proposals_engine::types::proposal_statuses::ApprovedProposalDecision
    **/
   PalletProposalsEngineProposalStatusesApprovedProposalDecision: {
     _enum: ['PendingExecution', 'PendingConstitutionality']
   },
   /**
-   * Lookup178: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
+   * Lookup194: pallet_proposals_engine::types::proposal_statuses::ExecutionStatus
    **/
   PalletProposalsEngineProposalStatusesExecutionStatus: {
     _enum: {
@@ -1200,13 +1353,13 @@ export default {
     }
   },
   /**
-   * Lookup179: pallet_proposals_engine::types::VoteKind
+   * Lookup195: pallet_proposals_engine::types::VoteKind
    **/
   PalletProposalsEngineVoteKind: {
     _enum: ['Approve', 'Reject', 'Slash', 'Abstain']
   },
   /**
-   * Lookup180: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
+   * Lookup196: pallet_proposals_discussion::RawEvent<ThreadId, MemberId, PostId>
    **/
   PalletProposalsDiscussionRawEvent: {
     _enum: {
@@ -1218,7 +1371,7 @@ export default {
     }
   },
   /**
-   * Lookup181: pallet_proposals_discussion::types::ThreadMode<MemberId>
+   * Lookup197: pallet_proposals_discussion::types::ThreadMode<MemberId>
    **/
   PalletProposalsDiscussionThreadMode: {
     _enum: {
@@ -1227,7 +1380,7 @@ export default {
     }
   },
   /**
-   * Lookup182: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
+   * Lookup198: pallet_proposals_codex::RawEvent<pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>, pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>, ProposalId, ThreadId>
    **/
   PalletProposalsCodexRawEvent: {
     _enum: {
@@ -1235,7 +1388,7 @@ export default {
     }
   },
   /**
-   * Lookup183: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
+   * Lookup199: pallet_proposals_codex::types::GeneralProposalParams<MemberId, sp_core::crypto::AccountId32, BlockNumber>
    **/
   PalletProposalsCodexGeneralProposalParams: {
     memberId: 'u64',
@@ -1245,7 +1398,7 @@ export default {
     exactExecutionBlock: 'Option<u32>'
   },
   /**
-   * Lookup184: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>
+   * Lookup200: pallet_proposals_codex::types::ProposalDetails<Balance, BlockNumber, sp_core::crypto::AccountId32, WorkerId, OpeningId, ProposalId, pallet_content::types::UpdateChannelPayoutsParametersRecord<pallet_content::types::ChannelPayoutsPayloadParametersRecord<sp_core::crypto::AccountId32, Balance>, Balance, primitive_types::H256>>
    **/
   PalletProposalsCodexProposalDetails: {
     _enum: {
@@ -1275,14 +1428,14 @@ export default {
     }
   },
   /**
-   * Lookup186: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
+   * Lookup202: pallet_common::FundingRequestParameters<Balance, sp_core::crypto::AccountId32>
    **/
   PalletCommonFundingRequestParameters: {
     account: 'AccountId32',
     amount: 'u128'
   },
   /**
-   * Lookup187: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
+   * Lookup203: pallet_proposals_codex::types::CreateOpeningParameters<BlockNumber, Balance>
    **/
   PalletProposalsCodexCreateOpeningParameters: {
     description: 'Bytes',
@@ -1291,14 +1444,14 @@ export default {
     group: 'PalletCommonWorkingGroup'
   },
   /**
-   * Lookup188: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
+   * Lookup204: pallet_working_group::types::StakePolicy<BlockNumber, Balance>
    **/
   PalletWorkingGroupStakePolicy: {
     stakeAmount: 'u128',
     leavingUnstakingPeriod: 'u32'
   },
   /**
-   * Lookup189: pallet_proposals_codex::types::FillOpeningParameters
+   * Lookup205: pallet_proposals_codex::types::FillOpeningParameters
    **/
   PalletProposalsCodexFillOpeningParameters: {
     openingId: 'u64',
@@ -1306,7 +1459,7 @@ export default {
     workingGroup: 'PalletCommonWorkingGroup'
   },
   /**
-   * Lookup190: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
+   * Lookup206: pallet_proposals_codex::types::TerminateRoleParameters<WorkerId, Balance>
    **/
   PalletProposalsCodexTerminateRoleParameters: {
     workerId: 'u64',
@@ -1314,7 +1467,7 @@ export default {
     group: 'PalletCommonWorkingGroup'
   },
   /**
-   * Lookup191: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance1>
+   * Lookup207: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance1>
    **/
   PalletWorkingGroupRawEventInstance1: {
     _enum: {
@@ -1347,13 +1500,13 @@ export default {
     }
   },
   /**
-   * Lookup195: pallet_working_group::types::OpeningType
+   * Lookup211: pallet_working_group::types::OpeningType
    **/
   PalletWorkingGroupOpeningType: {
     _enum: ['Leader', 'Regular']
   },
   /**
-   * Lookup196: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
+   * Lookup212: pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>
    **/
   PalletWorkingGroupApplyOnOpeningParams: {
     memberId: 'u64',
@@ -1364,24 +1517,24 @@ export default {
     stakeParameters: 'PalletWorkingGroupStakeParameters'
   },
   /**
-   * Lookup197: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
+   * Lookup213: pallet_working_group::types::StakeParameters<sp_core::crypto::AccountId32, Balance>
    **/
   PalletWorkingGroupStakeParameters: {
     stake: 'u128',
     stakingAccountId: 'AccountId32'
   },
   /**
-   * Lookup198: pallet_working_group::Instance1
+   * Lookup214: pallet_working_group::Instance1
    **/
   PalletWorkingGroupInstance1: 'Null',
   /**
-   * Lookup199: pallet_working_group::types::RewardPaymentType
+   * Lookup215: pallet_working_group::types::RewardPaymentType
    **/
   PalletWorkingGroupRewardPaymentType: {
     _enum: ['MissedReward', 'RegularReward']
   },
   /**
-   * Lookup200: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance2>
+   * Lookup216: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance2>
    **/
   PalletWorkingGroupRawEventInstance2: {
     _enum: {
@@ -1414,11 +1567,11 @@ export default {
     }
   },
   /**
-   * Lookup201: pallet_working_group::Instance2
+   * Lookup217: pallet_working_group::Instance2
    **/
   PalletWorkingGroupInstance2: 'Null',
   /**
-   * Lookup202: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance3>
+   * Lookup218: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance3>
    **/
   PalletWorkingGroupRawEventInstance3: {
     _enum: {
@@ -1451,11 +1604,11 @@ export default {
     }
   },
   /**
-   * Lookup203: pallet_working_group::Instance3
+   * Lookup219: pallet_working_group::Instance3
    **/
   PalletWorkingGroupInstance3: 'Null',
   /**
-   * Lookup204: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance4>
+   * Lookup220: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance4>
    **/
   PalletWorkingGroupRawEventInstance4: {
     _enum: {
@@ -1488,11 +1641,11 @@ export default {
     }
   },
   /**
-   * Lookup205: pallet_working_group::Instance4
+   * Lookup221: pallet_working_group::Instance4
    **/
   PalletWorkingGroupInstance4: 'Null',
   /**
-   * Lookup206: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance5>
+   * Lookup222: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance5>
    **/
   PalletWorkingGroupRawEventInstance5: {
     _enum: {
@@ -1525,11 +1678,11 @@ export default {
     }
   },
   /**
-   * Lookup207: pallet_working_group::Instance5
+   * Lookup223: pallet_working_group::Instance5
    **/
   PalletWorkingGroupInstance5: 'Null',
   /**
-   * Lookup208: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance6>
+   * Lookup224: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance6>
    **/
   PalletWorkingGroupRawEventInstance6: {
     _enum: {
@@ -1562,11 +1715,11 @@ export default {
     }
   },
   /**
-   * Lookup209: pallet_working_group::Instance6
+   * Lookup225: pallet_working_group::Instance6
    **/
   PalletWorkingGroupInstance6: 'Null',
   /**
-   * Lookup210: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance7>
+   * Lookup226: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance7>
    **/
   PalletWorkingGroupRawEventInstance7: {
     _enum: {
@@ -1599,11 +1752,11 @@ export default {
     }
   },
   /**
-   * Lookup211: pallet_working_group::Instance7
+   * Lookup227: pallet_working_group::Instance7
    **/
   PalletWorkingGroupInstance7: 'Null',
   /**
-   * Lookup212: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance8>
+   * Lookup228: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance8>
    **/
   PalletWorkingGroupRawEventInstance8: {
     _enum: {
@@ -1636,11 +1789,11 @@ export default {
     }
   },
   /**
-   * Lookup213: pallet_working_group::Instance8
+   * Lookup229: pallet_working_group::Instance8
    **/
   PalletWorkingGroupInstance8: 'Null',
   /**
-   * Lookup214: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance9>
+   * Lookup230: pallet_working_group::RawEvent<OpeningId, ApplicationId, BTreeMap<K, V>, WorkerId, sp_core::crypto::AccountId32, Balance, pallet_working_group::types::OpeningType, pallet_working_group::types::StakePolicy<BlockNumber, Balance>, pallet_working_group::types::ApplyOnOpeningParams<MemberId, OpeningId, sp_core::crypto::AccountId32, Balance>, MemberId, pallet_working_group::Instance9>
    **/
   PalletWorkingGroupRawEventInstance9: {
     _enum: {
@@ -1673,11 +1826,11 @@ export default {
     }
   },
   /**
-   * Lookup215: pallet_working_group::Instance9
+   * Lookup231: pallet_working_group::Instance9
    **/
   PalletWorkingGroupInstance9: 'Null',
   /**
-   * Lookup216: frame_system::Phase
+   * Lookup232: frame_system::Phase
    **/
   FrameSystemPhase: {
     _enum: {
@@ -1687,14 +1840,14 @@ export default {
     }
   },
   /**
-   * Lookup220: frame_system::LastRuntimeUpgradeInfo
+   * Lookup236: frame_system::LastRuntimeUpgradeInfo
    **/
   FrameSystemLastRuntimeUpgradeInfo: {
     specVersion: 'Compact<u32>',
     specName: 'Text'
   },
   /**
-   * Lookup223: frame_system::pallet::Call<T>
+   * Lookup239: frame_system::pallet::Call<T>
    **/
   FrameSystemCall: {
     _enum: {
@@ -1732,7 +1885,7 @@ export default {
     }
   },
   /**
-   * Lookup226: frame_system::limits::BlockWeights
+   * Lookup242: frame_system::limits::BlockWeights
    **/
   FrameSystemLimitsBlockWeights: {
     baseBlock: 'u64',
@@ -1740,7 +1893,7 @@ export default {
     perClass: 'FrameSupportWeightsPerDispatchClassWeightsPerClass'
   },
   /**
-   * Lookup227: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
+   * Lookup243: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
    **/
   FrameSupportWeightsPerDispatchClassWeightsPerClass: {
     normal: 'FrameSystemLimitsWeightsPerClass',
@@ -1748,7 +1901,7 @@ export default {
     mandatory: 'FrameSystemLimitsWeightsPerClass'
   },
   /**
-   * Lookup228: frame_system::limits::WeightsPerClass
+   * Lookup244: frame_system::limits::WeightsPerClass
    **/
   FrameSystemLimitsWeightsPerClass: {
     baseExtrinsic: 'u64',
@@ -1757,13 +1910,13 @@ export default {
     reserved: 'Option<u64>'
   },
   /**
-   * Lookup229: frame_system::limits::BlockLength
+   * Lookup245: frame_system::limits::BlockLength
    **/
   FrameSystemLimitsBlockLength: {
     max: 'FrameSupportWeightsPerDispatchClassU32'
   },
   /**
-   * Lookup230: frame_support::weights::PerDispatchClass<T>
+   * Lookup246: frame_support::weights::PerDispatchClass<T>
    **/
   FrameSupportWeightsPerDispatchClassU32: {
     normal: 'u32',
@@ -1771,14 +1924,14 @@ export default {
     mandatory: 'u32'
   },
   /**
-   * Lookup231: frame_support::weights::RuntimeDbWeight
+   * Lookup247: frame_support::weights::RuntimeDbWeight
    **/
   FrameSupportWeightsRuntimeDbWeight: {
     read: 'u64',
     write: 'u64'
   },
   /**
-   * Lookup232: sp_version::RuntimeVersion
+   * Lookup248: sp_version::RuntimeVersion
    **/
   SpVersionRuntimeVersion: {
     specName: 'Text',
@@ -1791,13 +1944,13 @@ export default {
     stateVersion: 'u8'
   },
   /**
-   * Lookup238: frame_system::pallet::Error<T>
+   * Lookup254: frame_system::pallet::Error<T>
    **/
   FrameSystemError: {
     _enum: ['InvalidSpecName', 'SpecVersionNeedsToIncrease', 'FailedToExtractRuntimeVersion', 'NonDefaultComposite', 'NonZeroRefCount', 'CallFiltered']
   },
   /**
-   * Lookup239: pallet_utility::pallet::Call<T>
+   * Lookup255: pallet_utility::pallet::Call<T>
    **/
   PalletUtilityCall: {
     _enum: {
@@ -1821,7 +1974,7 @@ export default {
     }
   },
   /**
-   * Lookup242: pallet_babe::pallet::Call<T>
+   * Lookup258: pallet_babe::pallet::Call<T>
    **/
   PalletBabeCall: {
     _enum: {
@@ -1839,7 +1992,7 @@ export default {
     }
   },
   /**
-   * Lookup243: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
+   * Lookup259: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
    **/
   SpConsensusSlotsEquivocationProof: {
     offender: 'SpConsensusBabeAppPublic',
@@ -1848,7 +2001,7 @@ export default {
     secondHeader: 'SpRuntimeHeader'
   },
   /**
-   * Lookup244: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
+   * Lookup260: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
    **/
   SpRuntimeHeader: {
     parentHash: 'H256',
@@ -1858,15 +2011,15 @@ export default {
     digest: 'SpRuntimeDigest'
   },
   /**
-   * Lookup245: sp_runtime::traits::BlakeTwo256
+   * Lookup261: sp_runtime::traits::BlakeTwo256
    **/
   SpRuntimeBlakeTwo256: 'Null',
   /**
-   * Lookup246: sp_consensus_babe::app::Public
+   * Lookup262: sp_consensus_babe::app::Public
    **/
   SpConsensusBabeAppPublic: 'SpCoreSr25519Public',
   /**
-   * Lookup248: sp_session::MembershipProof
+   * Lookup264: sp_session::MembershipProof
    **/
   SpSessionMembershipProof: {
     session: 'u32',
@@ -1874,7 +2027,7 @@ export default {
     validatorCount: 'u32'
   },
   /**
-   * Lookup249: sp_consensus_babe::digests::NextConfigDescriptor
+   * Lookup265: sp_consensus_babe::digests::NextConfigDescriptor
    **/
   SpConsensusBabeDigestsNextConfigDescriptor: {
     _enum: {
@@ -1886,13 +2039,13 @@ export default {
     }
   },
   /**
-   * Lookup250: sp_consensus_babe::AllowedSlots
+   * Lookup266: sp_consensus_babe::AllowedSlots
    **/
   SpConsensusBabeAllowedSlots: {
     _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
   },
   /**
-   * Lookup251: pallet_timestamp::pallet::Call<T>
+   * Lookup267: pallet_timestamp::pallet::Call<T>
    **/
   PalletTimestampCall: {
     _enum: {
@@ -1902,7 +2055,7 @@ export default {
     }
   },
   /**
-   * Lookup253: pallet_authorship::pallet::Call<T>
+   * Lookup269: pallet_authorship::pallet::Call<T>
    **/
   PalletAuthorshipCall: {
     _enum: {
@@ -1912,7 +2065,7 @@ export default {
     }
   },
   /**
-   * Lookup255: pallet_balances::pallet::Call<T, I>
+   * Lookup271: pallet_balances::pallet::Call<T, I>
    **/
   PalletBalancesCall: {
     _enum: {
@@ -1945,7 +2098,7 @@ export default {
     }
   },
   /**
-   * Lookup256: pallet_election_provider_multi_phase::pallet::Call<T>
+   * Lookup272: pallet_election_provider_multi_phase::pallet::Call<T>
    **/
   PalletElectionProviderMultiPhaseCall: {
     _enum: {
@@ -1969,7 +2122,7 @@ export default {
     }
   },
   /**
-   * Lookup257: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
+   * Lookup273: pallet_election_provider_multi_phase::RawSolution<joystream_node_runtime::NposSolution16>
    **/
   PalletElectionProviderMultiPhaseRawSolution: {
     solution: 'JoystreamNodeRuntimeNposSolution16',
@@ -1977,7 +2130,7 @@ export default {
     round: 'u32'
   },
   /**
-   * Lookup258: joystream_node_runtime::NposSolution16
+   * Lookup274: joystream_node_runtime::NposSolution16
    **/
   JoystreamNodeRuntimeNposSolution16: {
     votes1: 'Vec<(Compact<u32>,Compact<u16>)>',
@@ -1998,7 +2151,7 @@ export default {
     votes16: 'Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);15],Compact<u16>)>'
   },
   /**
-   * Lookup309: sp_npos_elections::ElectionScore
+   * Lookup325: sp_npos_elections::ElectionScore
    **/
   SpNposElectionsElectionScore: {
     minimalStake: 'u128',
@@ -2006,21 +2159,21 @@ export default {
     sumStakeSquared: 'u128'
   },
   /**
-   * Lookup310: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
+   * Lookup326: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
    **/
   PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
     voters: 'Compact<u32>',
     targets: 'Compact<u32>'
   },
   /**
-   * Lookup314: sp_npos_elections::Support<sp_core::crypto::AccountId32>
+   * Lookup330: sp_npos_elections::Support<sp_core::crypto::AccountId32>
    **/
   SpNposElectionsSupport: {
     total: 'u128',
     voters: 'Vec<(AccountId32,u128)>'
   },
   /**
-   * Lookup317: pallet_staking::pallet::pallet::Call<T>
+   * Lookup333: pallet_staking::pallet::pallet::Call<T>
    **/
   PalletStakingPalletCall: {
     _enum: {
@@ -2112,7 +2265,7 @@ export default {
     }
   },
   /**
-   * Lookup318: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
+   * Lookup334: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
    **/
   PalletStakingRewardDestination: {
     _enum: {
@@ -2124,7 +2277,7 @@ export default {
     }
   },
   /**
-   * Lookup322: pallet_staking::pallet::pallet::ConfigOp<T>
+   * Lookup338: pallet_staking::pallet::pallet::ConfigOp<T>
    **/
   PalletStakingPalletConfigOpU128: {
     _enum: {
@@ -2134,7 +2287,7 @@ export default {
     }
   },
   /**
-   * Lookup323: pallet_staking::pallet::pallet::ConfigOp<T>
+   * Lookup339: pallet_staking::pallet::pallet::ConfigOp<T>
    **/
   PalletStakingPalletConfigOpU32: {
     _enum: {
@@ -2144,7 +2297,7 @@ export default {
     }
   },
   /**
-   * Lookup324: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
+   * Lookup340: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
    **/
   PalletStakingPalletConfigOpPercent: {
     _enum: {
@@ -2154,7 +2307,7 @@ export default {
     }
   },
   /**
-   * Lookup325: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
+   * Lookup341: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
    **/
   PalletStakingPalletConfigOpPerbill: {
     _enum: {
@@ -2164,7 +2317,7 @@ export default {
     }
   },
   /**
-   * Lookup326: pallet_session::pallet::Call<T>
+   * Lookup342: pallet_session::pallet::Call<T>
    **/
   PalletSessionCall: {
     _enum: {
@@ -2179,7 +2332,7 @@ export default {
     }
   },
   /**
-   * Lookup327: joystream_node_runtime::SessionKeys
+   * Lookup343: joystream_node_runtime::SessionKeys
    **/
   JoystreamNodeRuntimeSessionKeys: {
     grandpa: 'SpFinalityGrandpaAppPublic',
@@ -2188,11 +2341,11 @@ export default {
     authorityDiscovery: 'SpAuthorityDiscoveryAppPublic'
   },
   /**
-   * Lookup328: sp_authority_discovery::app::Public
+   * Lookup344: sp_authority_discovery::app::Public
    **/
   SpAuthorityDiscoveryAppPublic: 'SpCoreSr25519Public',
   /**
-   * Lookup329: pallet_grandpa::pallet::Call<T>
+   * Lookup345: pallet_grandpa::pallet::Call<T>
    **/
   PalletGrandpaCall: {
     _enum: {
@@ -2211,14 +2364,14 @@ export default {
     }
   },
   /**
-   * Lookup330: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
+   * Lookup346: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
    **/
   SpFinalityGrandpaEquivocationProof: {
     setId: 'u64',
     equivocation: 'SpFinalityGrandpaEquivocation'
   },
   /**
-   * Lookup331: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
+   * Lookup347: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
    **/
   SpFinalityGrandpaEquivocation: {
     _enum: {
@@ -2227,7 +2380,7 @@ export default {
     }
   },
   /**
-   * Lookup332: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+   * Lookup348: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
    **/
   FinalityGrandpaEquivocationPrevote: {
     roundNumber: 'u64',
@@ -2236,22 +2389,22 @@ export default {
     second: '(FinalityGrandpaPrevote,SpFinalityGrandpaAppSignature)'
   },
   /**
-   * Lookup333: finality_grandpa::Prevote<primitive_types::H256, N>
+   * Lookup349: finality_grandpa::Prevote<primitive_types::H256, N>
    **/
   FinalityGrandpaPrevote: {
     targetHash: 'H256',
     targetNumber: 'u32'
   },
   /**
-   * Lookup334: sp_finality_grandpa::app::Signature
+   * Lookup350: sp_finality_grandpa::app::Signature
    **/
   SpFinalityGrandpaAppSignature: 'SpCoreEd25519Signature',
   /**
-   * Lookup335: sp_core::ed25519::Signature
+   * Lookup351: sp_core::ed25519::Signature
    **/
   SpCoreEd25519Signature: '[u8;64]',
   /**
-   * Lookup338: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
+   * Lookup354: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
    **/
   FinalityGrandpaEquivocationPrecommit: {
     roundNumber: 'u64',
@@ -2260,14 +2413,14 @@ export default {
     second: '(FinalityGrandpaPrecommit,SpFinalityGrandpaAppSignature)'
   },
   /**
-   * Lookup339: finality_grandpa::Precommit<primitive_types::H256, N>
+   * Lookup355: finality_grandpa::Precommit<primitive_types::H256, N>
    **/
   FinalityGrandpaPrecommit: {
     targetHash: 'H256',
     targetNumber: 'u32'
   },
   /**
-   * Lookup341: pallet_im_online::pallet::Call<T>
+   * Lookup357: pallet_im_online::pallet::Call<T>
    **/
   PalletImOnlineCall: {
     _enum: {
@@ -2278,7 +2431,7 @@ export default {
     }
   },
   /**
-   * Lookup342: pallet_im_online::Heartbeat<BlockNumber>
+   * Lookup358: pallet_im_online::Heartbeat<BlockNumber>
    **/
   PalletImOnlineHeartbeat: {
     blockNumber: 'u32',
@@ -2288,22 +2441,22 @@ export default {
     validatorsLen: 'u32'
   },
   /**
-   * Lookup343: sp_core::offchain::OpaqueNetworkState
+   * Lookup359: sp_core::offchain::OpaqueNetworkState
    **/
   SpCoreOffchainOpaqueNetworkState: {
     peerId: 'Bytes',
     externalAddresses: 'Vec<Bytes>'
   },
   /**
-   * Lookup347: pallet_im_online::sr25519::app_sr25519::Signature
+   * Lookup363: pallet_im_online::sr25519::app_sr25519::Signature
    **/
   PalletImOnlineSr25519AppSr25519Signature: 'SpCoreSr25519Signature',
   /**
-   * Lookup348: sp_core::sr25519::Signature
+   * Lookup364: sp_core::sr25519::Signature
    **/
   SpCoreSr25519Signature: '[u8;64]',
   /**
-   * Lookup349: pallet_sudo::pallet::Call<T>
+   * Lookup365: pallet_sudo::pallet::Call<T>
    **/
   PalletSudoCall: {
     _enum: {
@@ -2327,7 +2480,7 @@ export default {
     }
   },
   /**
-   * Lookup350: pallet_bags_list::pallet::Call<T, I>
+   * Lookup366: pallet_bags_list::pallet::Call<T, I>
    **/
   PalletBagsListCall: {
     _enum: {
@@ -2340,7 +2493,7 @@ export default {
     }
   },
   /**
-   * Lookup351: pallet_vesting::pallet::Call<T>
+   * Lookup367: pallet_vesting::pallet::Call<T>
    **/
   PalletVestingCall: {
     _enum: {
@@ -2364,7 +2517,7 @@ export default {
     }
   },
   /**
-   * Lookup352: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
+   * Lookup368: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
    **/
   PalletVestingVestingInfo: {
     locked: 'u128',
@@ -2372,7 +2525,39 @@ export default {
     startingBlock: 'u32'
   },
   /**
-   * Lookup353: pallet_council::Call<T>
+   * Lookup369: pallet_multisig::pallet::Call<T>
+   **/
+  PalletMultisigCall: {
+    _enum: {
+      as_multi_threshold_1: {
+        otherSignatories: 'Vec<AccountId32>',
+        call: 'Call',
+      },
+      as_multi: {
+        threshold: 'u16',
+        otherSignatories: 'Vec<AccountId32>',
+        maybeTimepoint: 'Option<PalletMultisigTimepoint>',
+        call: 'WrapperKeepOpaque<Call>',
+        storeCall: 'bool',
+        maxWeight: 'u64',
+      },
+      approve_as_multi: {
+        threshold: 'u16',
+        otherSignatories: 'Vec<AccountId32>',
+        maybeTimepoint: 'Option<PalletMultisigTimepoint>',
+        callHash: '[u8;32]',
+        maxWeight: 'u64',
+      },
+      cancel_as_multi: {
+        threshold: 'u16',
+        otherSignatories: 'Vec<AccountId32>',
+        timepoint: 'PalletMultisigTimepoint',
+        callHash: '[u8;32]'
+      }
+    }
+  },
+  /**
+   * Lookup372: pallet_council::Call<T>
    **/
   PalletCouncilCall: {
     _enum: {
@@ -2423,7 +2608,7 @@ export default {
     }
   },
   /**
-   * Lookup354: pallet_referendum::Call<T, I>
+   * Lookup373: pallet_referendum::Call<T, I>
    **/
   PalletReferendumCall: {
     _enum: {
@@ -2439,7 +2624,7 @@ export default {
     }
   },
   /**
-   * Lookup355: pallet_membership::Call<T>
+   * Lookup374: pallet_membership::Call<T>
    **/
   PalletMembershipCall: {
     _enum: {
@@ -2507,7 +2692,7 @@ export default {
     }
   },
   /**
-   * Lookup356: pallet_forum::Call<T>
+   * Lookup375: pallet_forum::Call<T>
    **/
   PalletForumCall: {
     _enum: {
@@ -2577,13 +2762,6 @@ export default {
         text: 'Bytes',
         editable: 'bool',
       },
-      react_post: {
-        forumUserId: 'u64',
-        categoryId: 'u64',
-        threadId: 'u64',
-        postId: 'u64',
-        react: 'u64',
-      },
       edit_post_text: {
         forumUserId: 'u64',
         categoryId: 'u64',
@@ -2611,7 +2789,7 @@ export default {
     }
   },
   /**
-   * Lookup357: pallet_constitution::Call<T>
+   * Lookup376: pallet_constitution::Call<T>
    **/
   PalletConstitutionCall: {
     _enum: {
@@ -2621,7 +2799,83 @@ export default {
     }
   },
   /**
-   * Lookup359: pallet_content::Call<T>
+   * Lookup377: pallet_bounty::Call<T>
+   **/
+  PalletBountyCall: {
+    _enum: {
+      create_bounty: {
+        params: 'PalletBountyBountyParameters',
+        metadata: 'Bytes',
+      },
+      fund_bounty: {
+        funder: 'PalletBountyBountyActor',
+        bountyId: 'u64',
+        amount: 'u128',
+      },
+      terminate_bounty: {
+        bountyId: 'u64',
+      },
+      switch_oracle: {
+        newOracle: 'PalletBountyBountyActor',
+        bountyId: 'u64',
+      },
+      withdraw_funding: {
+        funder: 'PalletBountyBountyActor',
+        bountyId: 'u64',
+      },
+      announce_work_entry: {
+        memberId: 'u64',
+        bountyId: 'u64',
+        stakingAccountId: 'AccountId32',
+        workDescription: 'Bytes',
+      },
+      submit_work: {
+        memberId: 'u64',
+        bountyId: 'u64',
+        entryId: 'u64',
+        workData: 'Bytes',
+      },
+      end_working_period: {
+        bountyId: 'u64',
+      },
+      submit_oracle_judgment: {
+        bountyId: 'u64',
+        judgment: 'BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>',
+        rationale: 'Bytes',
+      },
+      withdraw_entrant_stake: {
+        memberId: 'u64',
+        bountyId: 'u64',
+        entryId: 'u64',
+      },
+      withdraw_oracle_reward: {
+        bountyId: 'u64',
+      },
+      contributor_remark: {
+        contributor: 'PalletBountyBountyActor',
+        bountyId: 'u64',
+        msg: 'Bytes',
+      },
+      oracle_remark: {
+        oracle: 'PalletBountyBountyActor',
+        bountyId: 'u64',
+        msg: 'Bytes',
+      },
+      entrant_remark: {
+        entrantId: 'u64',
+        bountyId: 'u64',
+        entryId: 'u64',
+        msg: 'Bytes',
+      },
+      creator_remark: {
+        creator: 'PalletBountyBountyActor',
+        bountyId: 'u64',
+        msg: 'Bytes'
+      }
+    }
+  },
+  /**
+   * Lookup379: pallet_content::Call<T>
    **/
   PalletContentCall: {
     _enum: {
@@ -2668,17 +2922,20 @@ export default {
       delete_channel: {
         actor: 'PalletContentPermissionsContentActor',
         channelId: 'u64',
+        channelBagWitness: 'PalletContentChannelBagWitness',
         numObjectsToDelete: 'u64',
       },
       delete_channel_assets_as_moderator: {
         actor: 'PalletContentPermissionsContentActor',
         channelId: 'u64',
         assetsToRemove: 'BTreeSet<u64>',
+        storageBucketsNumWitness: 'u32',
         rationale: 'Bytes',
       },
       delete_channel_as_moderator: {
         actor: 'PalletContentPermissionsContentActor',
         channelId: 'u64',
+        channelBagWitness: 'PalletContentChannelBagWitness',
         numObjectsToDelete: 'u64',
         rationale: 'Bytes',
       },
@@ -2702,16 +2959,19 @@ export default {
         actor: 'PalletContentPermissionsContentActor',
         videoId: 'u64',
         numObjectsToDelete: 'u64',
+        storageBucketsNumWitness: 'Option<u32>',
       },
       delete_video_assets_as_moderator: {
         actor: 'PalletContentPermissionsContentActor',
         videoId: 'u64',
+        storageBucketsNumWitness: 'u32',
         assetsToRemove: 'BTreeSet<u64>',
         rationale: 'Bytes',
       },
       delete_video_as_moderator: {
         actor: 'PalletContentPermissionsContentActor',
         videoId: 'u64',
+        storageBucketsNumWitness: 'Option<u32>',
         numObjectsToDelete: 'u64',
         rationale: 'Bytes',
       },
@@ -2726,7 +2986,7 @@ export default {
       },
       claim_channel_reward: {
         actor: 'PalletContentPermissionsContentActor',
-        proof: 'Vec<PalletContentProofElementRecord>',
+        proof: 'Vec<PalletCommonProofElementRecord>',
         item: 'PalletContentPullPaymentElement',
       },
       withdraw_from_channel_balance: {
@@ -2742,7 +3002,7 @@ export default {
       },
       claim_and_withdraw_channel_reward: {
         actor: 'PalletContentPermissionsContentActor',
-        proof: 'Vec<PalletContentProofElementRecord>',
+        proof: 'Vec<PalletCommonProofElementRecord>',
         item: 'PalletContentPullPaymentElement',
       },
       issue_nft: {
@@ -2860,7 +3120,7 @@ export default {
       },
       accept_channel_transfer: {
         channelId: 'u64',
-        commitmentParams: 'PalletContentTransferCommitmentParameters',
+        commitmentParams: 'PalletContentTransferCommitmentParametersBTreeMap',
       },
       update_global_nft_limit: {
         nftLimitPeriod: 'PalletContentNftLimitPeriod',
@@ -2892,6 +3152,7 @@ export default {
         actor: 'PalletContentPermissionsContentActor',
         channelId: 'u64',
         outputs: 'PalletProjectTokenTransfersPaymentWithVesting',
+        metadata: 'Bytes',
       },
       make_creator_token_permissionless: {
         actor: 'PalletContentPermissionsContentActor',
@@ -2927,23 +3188,30 @@ export default {
     }
   },
   /**
-   * Lookup361: pallet_content::types::ProofElementRecord<primitive_types::H256, pallet_content::types::Side>
+   * Lookup380: pallet_content::types::ChannelBagWitness
    **/
-  PalletContentProofElementRecord: {
+  PalletContentChannelBagWitness: {
+    storageBucketsNum: 'u32',
+    distributionBucketsNum: 'u32'
+  },
+  /**
+   * Lookup382: pallet_common::ProofElementRecord<primitive_types::H256, pallet_common::Side>
+   **/
+  PalletCommonProofElementRecord: {
     _alias: {
       hash_: 'hash'
     },
     hash_: 'H256',
-    side: 'PalletContentSide'
+    side: 'PalletCommonSide'
   },
   /**
-   * Lookup362: pallet_content::types::Side
+   * Lookup383: pallet_common::Side
    **/
-  PalletContentSide: {
+  PalletCommonSide: {
     _enum: ['Left', 'Right']
   },
   /**
-   * Lookup363: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
+   * Lookup384: pallet_content::types::PullPaymentElement<ChannelId, Balance, primitive_types::H256>
    **/
   PalletContentPullPaymentElement: {
     channelId: 'u64',
@@ -2951,7 +3219,7 @@ export default {
     reason: 'H256'
   },
   /**
-   * Lookup364: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
+   * Lookup385: pallet_content::types::InitTransferParameters<MemberId, CuratorGroupId, Balance>
    **/
   PalletContentInitTransferParameters: {
     newCollaborators: 'BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>',
@@ -2959,7 +3227,7 @@ export default {
     newOwner: 'PalletContentChannelOwner'
   },
   /**
-   * Lookup365: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
+   * Lookup386: pallet_project_token::types::TokenSaleParams<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>>
    **/
   PalletProjectTokenTokenSaleParams: {
     unitPrice: 'u128',
@@ -2971,11 +3239,11 @@ export default {
     metadata: 'Option<Bytes>'
   },
   /**
-   * Lookup366: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
+   * Lookup387: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::PaymentWithVesting<Balance, pallet_project_token::types::VestingScheduleParams<BlockNumber>>>
    **/
   PalletProjectTokenTransfersPaymentWithVesting: 'BTreeMap<u64, PalletProjectTokenPaymentWithVesting>',
   /**
-   * Lookup370: pallet_storage::Call<T>
+   * Lookup391: pallet_storage::Call<T>
    **/
   PalletStorageCall: {
     _enum: {
@@ -3112,9 +3380,6 @@ export default {
       sudo_upload_data_objects: {
         params: 'PalletStorageUploadParametersRecord',
       },
-      sudo_create_dynamic_bag: {
-        params: 'PalletStorageDynBagCreationParametersRecord',
-      },
       storage_operator_remark: {
         workerId: 'u64',
         storageBucketId: 'u64',
@@ -3128,19 +3393,7 @@ export default {
     }
   },
   /**
-   * Lookup371: pallet_storage::DynBagCreationParametersRecord<pallet_storage::DynamicBagIdType<MemberId, ChannelId>, sp_core::crypto::AccountId32, Balance, StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
-   **/
-  PalletStorageDynBagCreationParametersRecord: {
-    bagId: 'PalletStorageDynamicBagIdType',
-    objectCreationList: 'Vec<PalletStorageDataObjectCreationParameters>',
-    stateBloatBondSourceAccountId: 'AccountId32',
-    expectedDataSizeFee: 'u128',
-    expectedDataObjectStateBloatBond: 'u128',
-    storageBuckets: 'BTreeSet<u64>',
-    distributionBuckets: 'BTreeSet<PalletStorageDistributionBucketIdRecord>'
-  },
-  /**
-   * Lookup372: pallet_project_token::Call<T>
+   * Lookup392: pallet_project_token::Call<T>
    **/
   PalletProjectTokenCall: {
     _enum: {
@@ -3148,6 +3401,7 @@ export default {
         srcMemberId: 'u64',
         tokenId: 'u64',
         outputs: 'PalletProjectTokenTransfersPayment',
+        metadata: 'Bytes',
       },
       burn: {
         tokenId: 'u64',
@@ -3180,28 +3434,27 @@ export default {
     }
   },
   /**
-   * Lookup373: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
+   * Lookup393: pallet_project_token::types::Transfers<MemberId, pallet_project_token::types::Payment<Balance>>
    **/
   PalletProjectTokenTransfersPayment: 'BTreeMap<u64, PalletProjectTokenPayment>',
   /**
-   * Lookup374: pallet_project_token::types::Payment<Balance>
+   * Lookup394: pallet_project_token::types::Payment<Balance>
    **/
   PalletProjectTokenPayment: {
-    remark: 'Bytes',
     amount: 'u128'
   },
   /**
-   * Lookup378: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
+   * Lookup398: pallet_project_token::types::MerkleProof<sp_runtime::traits::BlakeTwo256>
    **/
   PalletProjectTokenMerkleProof: 'Vec<(H256,PalletProjectTokenMerkleSide)>',
   /**
-   * Lookup381: pallet_project_token::types::MerkleSide
+   * Lookup401: pallet_project_token::types::MerkleSide
    **/
   PalletProjectTokenMerkleSide: {
     _enum: ['Right', 'Left']
   },
   /**
-   * Lookup382: pallet_proposals_engine::Call<T>
+   * Lookup402: pallet_proposals_engine::Call<T>
    **/
   PalletProposalsEngineCall: {
     _enum: {
@@ -3226,7 +3479,7 @@ export default {
     }
   },
   /**
-   * Lookup383: pallet_proposals_discussion::Call<T>
+   * Lookup403: pallet_proposals_discussion::Call<T>
    **/
   PalletProposalsDiscussionCall: {
     _enum: {
@@ -3255,7 +3508,7 @@ export default {
     }
   },
   /**
-   * Lookup384: pallet_proposals_codex::Call<T>
+   * Lookup404: pallet_proposals_codex::Call<T>
    **/
   PalletProposalsCodexCall: {
     _enum: {
@@ -3266,7 +3519,7 @@ export default {
     }
   },
   /**
-   * Lookup385: pallet_working_group::Call<T, I>
+   * Lookup405: pallet_working_group::Call<T, I>
    **/
   PalletWorkingGroupCall: {
     _enum: {
@@ -3353,7 +3606,7 @@ export default {
     }
   },
   /**
-   * Lookup394: joystream_node_runtime::OriginCaller
+   * Lookup414: joystream_node_runtime::OriginCaller
    **/
   JoystreamNodeRuntimeOriginCaller: {
     _enum: {
@@ -3362,7 +3615,7 @@ export default {
     }
   },
   /**
-   * Lookup395: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
+   * Lookup415: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
    **/
   FrameSupportDispatchRawOrigin: {
     _enum: {
@@ -3372,17 +3625,17 @@ export default {
     }
   },
   /**
-   * Lookup396: sp_core::Void
+   * Lookup416: sp_core::Void
    **/
   SpCoreVoid: 'Null',
   /**
-   * Lookup397: pallet_utility::pallet::Error<T>
+   * Lookup417: pallet_utility::pallet::Error<T>
    **/
   PalletUtilityError: {
     _enum: ['TooManyCalls']
   },
   /**
-   * Lookup404: sp_consensus_babe::digests::PreDigest
+   * Lookup424: sp_consensus_babe::digests::PreDigest
    **/
   SpConsensusBabeDigestsPreDigest: {
     _enum: {
@@ -3393,7 +3646,7 @@ export default {
     }
   },
   /**
-   * Lookup405: sp_consensus_babe::digests::PrimaryPreDigest
+   * Lookup425: sp_consensus_babe::digests::PrimaryPreDigest
    **/
   SpConsensusBabeDigestsPrimaryPreDigest: {
     authorityIndex: 'u32',
@@ -3402,14 +3655,14 @@ export default {
     vrfProof: '[u8;64]'
   },
   /**
-   * Lookup406: sp_consensus_babe::digests::SecondaryPlainPreDigest
+   * Lookup426: sp_consensus_babe::digests::SecondaryPlainPreDigest
    **/
   SpConsensusBabeDigestsSecondaryPlainPreDigest: {
     authorityIndex: 'u32',
     slot: 'u64'
   },
   /**
-   * Lookup407: sp_consensus_babe::digests::SecondaryVRFPreDigest
+   * Lookup427: sp_consensus_babe::digests::SecondaryVRFPreDigest
    **/
   SpConsensusBabeDigestsSecondaryVRFPreDigest: {
     authorityIndex: 'u32',
@@ -3418,20 +3671,20 @@ export default {
     vrfProof: '[u8;64]'
   },
   /**
-   * Lookup409: sp_consensus_babe::BabeEpochConfiguration
+   * Lookup429: sp_consensus_babe::BabeEpochConfiguration
    **/
   SpConsensusBabeBabeEpochConfiguration: {
     c: '(u64,u64)',
     allowedSlots: 'SpConsensusBabeAllowedSlots'
   },
   /**
-   * Lookup410: pallet_babe::pallet::Error<T>
+   * Lookup430: pallet_babe::pallet::Error<T>
    **/
   PalletBabeError: {
     _enum: ['InvalidEquivocationProof', 'InvalidKeyOwnershipProof', 'DuplicateOffenceReport', 'InvalidConfiguration']
   },
   /**
-   * Lookup412: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
+   * Lookup432: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
    **/
   PalletAuthorshipUncleEntryItem: {
     _enum: {
@@ -3440,13 +3693,13 @@ export default {
     }
   },
   /**
-   * Lookup413: pallet_authorship::pallet::Error<T>
+   * Lookup433: pallet_authorship::pallet::Error<T>
    **/
   PalletAuthorshipError: {
     _enum: ['InvalidUncleParent', 'UnclesAlreadySet', 'TooManyUncles', 'GenesisUncle', 'TooHighUncle', 'UncleAlreadyIncluded', 'OldUncle']
   },
   /**
-   * Lookup415: pallet_balances::BalanceLock<Balance>
+   * Lookup435: pallet_balances::BalanceLock<Balance>
    **/
   PalletBalancesBalanceLock: {
     id: '[u8;8]',
@@ -3454,38 +3707,38 @@ export default {
     reasons: 'PalletBalancesReasons'
   },
   /**
-   * Lookup416: pallet_balances::Reasons
+   * Lookup436: pallet_balances::Reasons
    **/
   PalletBalancesReasons: {
     _enum: ['Fee', 'Misc', 'All']
   },
   /**
-   * Lookup419: pallet_balances::ReserveData<ReserveIdentifier, Balance>
+   * Lookup439: pallet_balances::ReserveData<ReserveIdentifier, Balance>
    **/
   PalletBalancesReserveData: {
     id: '[u8;8]',
     amount: 'u128'
   },
   /**
-   * Lookup421: pallet_balances::Releases
+   * Lookup441: pallet_balances::Releases
    **/
   PalletBalancesReleases: {
     _enum: ['V1_0_0', 'V2_0_0']
   },
   /**
-   * Lookup422: pallet_balances::pallet::Error<T, I>
+   * Lookup442: pallet_balances::pallet::Error<T, I>
    **/
   PalletBalancesError: {
     _enum: ['VestingBalance', 'LiquidityRestrictions', 'InsufficientBalance', 'ExistentialDeposit', 'KeepAlive', 'ExistingVestingSchedule', 'DeadAccount', 'TooManyReserves']
   },
   /**
-   * Lookup424: pallet_transaction_payment::Releases
+   * Lookup444: pallet_transaction_payment::Releases
    **/
   PalletTransactionPaymentReleases: {
     _enum: ['V1Ancient', 'V2']
   },
   /**
-   * Lookup425: pallet_election_provider_multi_phase::Phase<Bn>
+   * Lookup445: pallet_election_provider_multi_phase::Phase<Bn>
    **/
   PalletElectionProviderMultiPhasePhase: {
     _enum: {
@@ -3496,7 +3749,7 @@ export default {
     }
   },
   /**
-   * Lookup427: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
+   * Lookup447: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
    **/
   PalletElectionProviderMultiPhaseReadySolution: {
     supports: 'Vec<(AccountId32,SpNposElectionsSupport)>',
@@ -3504,14 +3757,14 @@ export default {
     compute: 'PalletElectionProviderMultiPhaseElectionCompute'
   },
   /**
-   * Lookup428: pallet_election_provider_multi_phase::RoundSnapshot<T>
+   * Lookup448: pallet_election_provider_multi_phase::RoundSnapshot<T>
    **/
   PalletElectionProviderMultiPhaseRoundSnapshot: {
     voters: 'Vec<(AccountId32,u64,Vec<AccountId32>)>',
     targets: 'Vec<AccountId32>'
   },
   /**
-   * Lookup436: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
+   * Lookup456: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, joystream_node_runtime::NposSolution16>
    **/
   PalletElectionProviderMultiPhaseSignedSignedSubmission: {
     who: 'AccountId32',
@@ -3520,13 +3773,13 @@ export default {
     callFee: 'u128'
   },
   /**
-   * Lookup437: pallet_election_provider_multi_phase::pallet::Error<T>
+   * Lookup457: pallet_election_provider_multi_phase::pallet::Error<T>
    **/
   PalletElectionProviderMultiPhaseError: {
     _enum: ['PreDispatchEarlySubmission', 'PreDispatchWrongWinnerCount', 'PreDispatchWeakSubmission', 'SignedQueueFull', 'SignedCannotPayDeposit', 'SignedInvalidWitness', 'SignedTooMuchWeight', 'OcwCallWrongEra', 'MissingSnapshotMetadata', 'InvalidSubmissionIndex', 'CallNotAllowed', 'FallbackFailed']
   },
   /**
-   * Lookup438: pallet_staking::StakingLedger<T>
+   * Lookup458: pallet_staking::StakingLedger<T>
    **/
   PalletStakingStakingLedger: {
     stash: 'AccountId32',
@@ -3536,14 +3789,14 @@ export default {
     claimedRewards: 'Vec<u32>'
   },
   /**
-   * Lookup440: pallet_staking::UnlockChunk<Balance>
+   * Lookup460: pallet_staking::UnlockChunk<Balance>
    **/
   PalletStakingUnlockChunk: {
     value: 'Compact<u128>',
     era: 'Compact<u32>'
   },
   /**
-   * Lookup442: pallet_staking::Nominations<T>
+   * Lookup462: pallet_staking::Nominations<T>
    **/
   PalletStakingNominations: {
     targets: 'Vec<AccountId32>',
@@ -3551,27 +3804,27 @@ export default {
     suppressed: 'bool'
   },
   /**
-   * Lookup443: pallet_staking::ActiveEraInfo
+   * Lookup463: pallet_staking::ActiveEraInfo
    **/
   PalletStakingActiveEraInfo: {
     index: 'u32',
     start: 'Option<u64>'
   },
   /**
-   * Lookup445: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
+   * Lookup465: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
    **/
   PalletStakingEraRewardPoints: {
     total: 'u32',
     individual: 'BTreeMap<AccountId32, u32>'
   },
   /**
-   * Lookup449: pallet_staking::Forcing
+   * Lookup469: pallet_staking::Forcing
    **/
   PalletStakingForcing: {
     _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
   },
   /**
-   * Lookup451: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
+   * Lookup471: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
    **/
   PalletStakingUnappliedSlash: {
     validator: 'AccountId32',
@@ -3581,7 +3834,7 @@ export default {
     payout: 'u128'
   },
   /**
-   * Lookup453: pallet_staking::slashing::SlashingSpans
+   * Lookup473: pallet_staking::slashing::SlashingSpans
    **/
   PalletStakingSlashingSlashingSpans: {
     spanIndex: 'u32',
@@ -3590,36 +3843,36 @@ export default {
     prior: 'Vec<u32>'
   },
   /**
-   * Lookup454: pallet_staking::slashing::SpanRecord<Balance>
+   * Lookup474: pallet_staking::slashing::SpanRecord<Balance>
    **/
   PalletStakingSlashingSpanRecord: {
     slashed: 'u128',
     paidOut: 'u128'
   },
   /**
-   * Lookup457: pallet_staking::Releases
+   * Lookup477: pallet_staking::Releases
    **/
   PalletStakingReleases: {
     _enum: ['V1_0_0Ancient', 'V2_0_0', 'V3_0_0', 'V4_0_0', 'V5_0_0', 'V6_0_0', 'V7_0_0', 'V8_0_0', 'V9_0_0']
   },
   /**
-   * Lookup458: pallet_staking::pallet::pallet::Error<T>
+   * Lookup478: pallet_staking::pallet::pallet::Error<T>
    **/
   PalletStakingPalletError: {
-    _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow']
+    _enum: ['NotController', 'NotStash', 'AlreadyBonded', 'AlreadyPaired', 'EmptyTargets', 'DuplicateIndex', 'InvalidSlashIndex', 'InsufficientBond', 'NoMoreChunks', 'NoUnlockChunk', 'FundedTarget', 'InvalidEraToReward', 'InvalidNumberOfNominations', 'NotSortedAndUnique', 'AlreadyClaimed', 'IncorrectHistoryDepth', 'IncorrectSlashingSpans', 'BadState', 'TooManyTargets', 'BadTarget', 'CannotChillOther', 'TooManyNominators', 'TooManyValidators', 'CommissionTooLow', 'BondingRestricted']
   },
   /**
-   * Lookup462: sp_core::crypto::KeyTypeId
+   * Lookup482: sp_core::crypto::KeyTypeId
    **/
   SpCoreCryptoKeyTypeId: '[u8;4]',
   /**
-   * Lookup463: pallet_session::pallet::Error<T>
+   * Lookup483: pallet_session::pallet::Error<T>
    **/
   PalletSessionError: {
     _enum: ['InvalidProof', 'NoAssociatedValidatorId', 'DuplicatedKey', 'NoKeys', 'NoAccount']
   },
   /**
-   * Lookup465: pallet_grandpa::StoredState<N>
+   * Lookup485: pallet_grandpa::StoredState<N>
    **/
   PalletGrandpaStoredState: {
     _enum: {
@@ -3636,7 +3889,7 @@ export default {
     }
   },
   /**
-   * Lookup466: pallet_grandpa::StoredPendingChange<N, Limit>
+   * Lookup486: pallet_grandpa::StoredPendingChange<N, Limit>
    **/
   PalletGrandpaStoredPendingChange: {
     scheduledAt: 'u32',
@@ -3645,39 +3898,39 @@ export default {
     forced: 'Option<u32>'
   },
   /**
-   * Lookup468: pallet_grandpa::pallet::Error<T>
+   * Lookup488: pallet_grandpa::pallet::Error<T>
    **/
   PalletGrandpaError: {
     _enum: ['PauseFailed', 'ResumeFailed', 'ChangePending', 'TooSoon', 'InvalidKeyOwnershipProof', 'InvalidEquivocationProof', 'DuplicateOffenceReport']
   },
   /**
-   * Lookup474: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
+   * Lookup494: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
    **/
   PalletImOnlineBoundedOpaqueNetworkState: {
     peerId: 'Bytes',
     externalAddresses: 'Vec<Bytes>'
   },
   /**
-   * Lookup478: pallet_im_online::pallet::Error<T>
+   * Lookup498: pallet_im_online::pallet::Error<T>
    **/
   PalletImOnlineError: {
     _enum: ['InvalidKey', 'DuplicatedHeartbeat']
   },
   /**
-   * Lookup479: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
+   * Lookup499: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
    **/
   SpStakingOffenceOffenceDetails: {
     offender: '(AccountId32,PalletStakingExposure)',
     reporters: 'Vec<AccountId32>'
   },
   /**
-   * Lookup482: pallet_sudo::pallet::Error<T>
+   * Lookup502: pallet_sudo::pallet::Error<T>
    **/
   PalletSudoError: {
     _enum: ['RequireSudo']
   },
   /**
-   * Lookup483: pallet_bags_list::list::Node<T, I>
+   * Lookup503: pallet_bags_list::list::Node<T, I>
    **/
   PalletBagsListListNode: {
     id: 'AccountId32',
@@ -3687,14 +3940,14 @@ export default {
     score: 'u64'
   },
   /**
-   * Lookup484: pallet_bags_list::list::Bag<T, I>
+   * Lookup504: pallet_bags_list::list::Bag<T, I>
    **/
   PalletBagsListListBag: {
     head: 'Option<AccountId32>',
     tail: 'Option<AccountId32>'
   },
   /**
-   * Lookup485: pallet_bags_list::pallet::Error<T, I>
+   * Lookup505: pallet_bags_list::pallet::Error<T, I>
    **/
   PalletBagsListError: {
     _enum: {
@@ -3702,54 +3955,76 @@ export default {
     }
   },
   /**
-   * Lookup486: pallet_bags_list::list::ListError
+   * Lookup506: pallet_bags_list::list::ListError
    **/
   PalletBagsListListListError: {
     _enum: ['Duplicate', 'NotHeavier', 'NotInSameBag', 'NodeNotFound']
   },
   /**
-   * Lookup489: pallet_vesting::Releases
+   * Lookup509: pallet_vesting::Releases
    **/
   PalletVestingReleases: {
     _enum: ['V0', 'V1']
   },
   /**
-   * Lookup490: pallet_vesting::pallet::Error<T>
+   * Lookup510: pallet_vesting::pallet::Error<T>
    **/
   PalletVestingError: {
     _enum: ['NotVesting', 'AtMaxVestingSchedules', 'AmountLow', 'ScheduleIndexOutOfBounds', 'InvalidScheduleParams']
   },
   /**
-   * Lookup491: pallet_council::CouncilStageUpdate<BlockNumber>
+   * Lookup512: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
+   **/
+  PalletMultisigMultisig: {
+    when: 'PalletMultisigTimepoint',
+    deposit: 'u128',
+    depositor: 'AccountId32',
+    approvals: 'Vec<AccountId32>'
+  },
+  /**
+   * Lookup514: pallet_multisig::pallet::Error<T>
+   **/
+  PalletMultisigError: {
+    _enum: ['MinimumThreshold', 'AlreadyApproved', 'NoApprovalsNeeded', 'TooFewSignatories', 'TooManySignatories', 'SignatoriesOutOfOrder', 'SenderInSignatories', 'NotFound', 'NotOwner', 'NoTimepoint', 'WrongTimepoint', 'UnexpectedTimepoint', 'MaxWeightTooLow', 'AlreadyStored']
+  },
+  /**
+   * Lookup515: pallet_council::CouncilStageUpdate<BlockNumber>
    **/
   PalletCouncilCouncilStageUpdate: {
     stage: 'PalletCouncilCouncilStage',
     changedAt: 'u32'
   },
   /**
-   * Lookup492: pallet_council::CouncilStage
+   * Lookup516: pallet_council::CouncilStage<BlockNumber>
    **/
   PalletCouncilCouncilStage: {
     _enum: {
       Announcing: 'PalletCouncilCouncilStageAnnouncing',
       Election: 'PalletCouncilCouncilStageElection',
-      Idle: 'Null'
+      Idle: 'PalletCouncilCouncilStageIdle'
     }
   },
   /**
-   * Lookup493: pallet_council::CouncilStageAnnouncing
+   * Lookup517: pallet_council::CouncilStageAnnouncing<BlockNumber>
    **/
   PalletCouncilCouncilStageAnnouncing: {
-    candidatesCount: 'u64'
+    candidatesCount: 'u64',
+    endsAt: 'u32'
   },
   /**
-   * Lookup494: pallet_council::CouncilStageElection
+   * Lookup518: pallet_council::CouncilStageElection
    **/
   PalletCouncilCouncilStageElection: {
     candidatesCount: 'u64'
   },
   /**
-   * Lookup496: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
+   * Lookup519: pallet_council::CouncilStageIdle<BlockNumber>
+   **/
+  PalletCouncilCouncilStageIdle: {
+    endsAt: 'u32'
+  },
+  /**
+   * Lookup521: pallet_council::CouncilMember<sp_core::crypto::AccountId32, MemberId, Balance, BlockNumber>
    **/
   PalletCouncilCouncilMember: {
     stakingAccountId: 'AccountId32',
@@ -3760,7 +4035,7 @@ export default {
     unpaidReward: 'u128'
   },
   /**
-   * Lookup497: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
+   * Lookup522: pallet_council::Candidate<sp_core::crypto::AccountId32, Balance, primitive_types::H256, VotePower>
    **/
   PalletCouncilCandidate: {
     stakingAccountId: 'AccountId32',
@@ -3771,13 +4046,13 @@ export default {
     noteHash: 'Option<H256>'
   },
   /**
-   * Lookup498: pallet_council::Error<T>
+   * Lookup523: pallet_council::Error<T>
    **/
   PalletCouncilError: {
     _enum: ['BadOrigin', 'CantCandidateNow', 'CantReleaseStakeNow', 'CandidacyStakeTooLow', 'CantCandidateTwice', 'ConflictingStake', 'StakeStillNeeded', 'NoStake', 'InsufficientBalanceForStaking', 'CantVoteForYourself', 'MemberIdNotMatchAccount', 'InvalidAccountToStakeReuse', 'NotCandidatingNow', 'CantWithdrawCandidacyNow', 'NotCouncilor', 'InsufficientFundsForFundingRequest', 'ZeroBalanceFundRequest', 'RepeatedFundRequestAccount', 'EmptyFundingRequests', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'CandidateDoesNotExist', 'InsufficientBalanceForTransfer']
   },
   /**
-   * Lookup499: pallet_referendum::ReferendumStage<BlockNumber, MemberId, VotePower>
+   * Lookup524: pallet_referendum::ReferendumStage<BlockNumber, MemberId, VotePower>
    **/
   PalletReferendumReferendumStage: {
     _enum: {
@@ -3787,24 +4062,26 @@ export default {
     }
   },
   /**
-   * Lookup500: pallet_referendum::ReferendumStageVoting<BlockNumber>
+   * Lookup525: pallet_referendum::ReferendumStageVoting<BlockNumber>
    **/
   PalletReferendumReferendumStageVoting: {
     started: 'u32',
     winningTargetCount: 'u64',
-    currentCycleId: 'u64'
+    currentCycleId: 'u64',
+    endsAt: 'u32'
   },
   /**
-   * Lookup501: pallet_referendum::ReferendumStageRevealing<BlockNumber, MemberId, VotePower>
+   * Lookup526: pallet_referendum::ReferendumStageRevealing<BlockNumber, MemberId, VotePower>
    **/
   PalletReferendumReferendumStageRevealing: {
     started: 'u32',
     winningTargetCount: 'u64',
     intermediateWinners: 'Vec<PalletReferendumOptionResult>',
-    currentCycleId: 'u64'
+    currentCycleId: 'u64',
+    endsAt: 'u32'
   },
   /**
-   * Lookup502: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
+   * Lookup527: pallet_referendum::CastVote<primitive_types::H256, Currency, MemberId>
    **/
   PalletReferendumCastVote: {
     commitment: 'H256',
@@ -3813,13 +4090,13 @@ export default {
     voteFor: 'Option<u64>'
   },
   /**
-   * Lookup503: pallet_referendum::Error<T, I>
+   * Lookup528: pallet_referendum::Error<T, I>
    **/
   PalletReferendumError: {
     _enum: ['BadOrigin', 'ReferendumNotRunning', 'RevealingNotInProgress', 'ConflictStakesOnAccount', 'InsufficientBalanceToStake', 'InsufficientStake', 'InvalidReveal', 'InvalidVote', 'VoteNotExisting', 'AlreadyVotedThisCycle', 'UnstakingVoteInSameCycle', 'SaltTooLong', 'UnstakingForbidden']
   },
   /**
-   * Lookup504: pallet_membership::MembershipObject<sp_core::crypto::AccountId32>
+   * Lookup529: pallet_membership::MembershipObject<sp_core::crypto::AccountId32>
    **/
   PalletMembershipMembershipObject: {
     handleHash: 'Bytes',
@@ -3829,20 +4106,20 @@ export default {
     invites: 'u32'
   },
   /**
-   * Lookup505: pallet_membership::StakingAccountMemberBinding<MemberId>
+   * Lookup530: pallet_membership::StakingAccountMemberBinding<MemberId>
    **/
   PalletMembershipStakingAccountMemberBinding: {
     memberId: 'u64',
     confirmed: 'bool'
   },
   /**
-   * Lookup506: pallet_membership::Error<T>
+   * Lookup531: pallet_membership::Error<T>
    **/
   PalletMembershipError: {
     _enum: ['NotEnoughBalanceToBuyMembership', 'ControllerAccountRequired', 'RootAccountRequired', 'UnsignedOrigin', 'MemberProfileNotFound', 'HandleAlreadyRegistered', 'HandleMustBeProvidedDuringRegistration', 'ReferrerIsNotMember', 'CannotTransferInvitesForNotMember', 'NotEnoughInvites', 'WorkingGroupLeaderNotSet', 'StakingAccountIsAlreadyRegistered', 'StakingAccountDoesntExist', 'StakingAccountAlreadyConfirmed', 'WorkingGroupBudgetIsNotSufficientForInviting', 'ConflictingLock', 'CannotExceedReferralCutPercentLimit', 'ConflictStakesOnAccount', 'InsufficientBalanceToCoverStake', 'GifLockExceedsCredit', 'InsufficientBalanceToGift']
   },
   /**
-   * Lookup507: pallet_forum::Category<CategoryId, ThreadId, primitive_types::H256>
+   * Lookup532: pallet_forum::Category<CategoryId, ThreadId, primitive_types::H256>
    **/
   PalletForumCategory: {
     titleHash: 'H256',
@@ -3855,47 +4132,96 @@ export default {
     stickyThreadIds: 'Vec<u64>'
   },
   /**
-   * Lookup508: pallet_forum::Thread<ForumUserId, CategoryId, Balance>
+   * Lookup533: pallet_forum::Thread<ForumUserId, CategoryId, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletForumThread: {
     categoryId: 'u64',
     authorId: 'u64',
-    cleanupPayOff: 'u128',
-    numberOfPosts: 'u64'
+    cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
+    numberOfEditablePosts: 'u64'
   },
   /**
-   * Lookup509: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, Balance, BlockNumber>
+   * Lookup534: pallet_forum::Post<ForumUserId, ThreadId, primitive_types::H256, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletForumPost: {
     threadId: 'u64',
     textHash: 'H256',
     authorId: 'u64',
-    cleanupPayOff: 'u128',
+    cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
     lastEdited: 'u32'
   },
   /**
-   * Lookup510: pallet_forum::Error<T>
+   * Lookup535: pallet_forum::Error<T>
    **/
   PalletForumError: {
-    _enum: ['OriginNotForumLead', 'ForumUserIdNotMatchAccount', 'ModeratorIdNotMatchAccount', 'AccountDoesNotMatchThreadAuthor', 'ThreadDoesNotExist', 'ModeratorModerateOriginCategory', 'ModeratorModerateDestinationCategory', 'ThreadMoveInvalid', 'ThreadNotBeingUpdated', 'InsufficientBalanceForThreadCreation', 'CannotDeleteThreadWithOutstandingPosts', 'PostDoesNotExist', 'AccountDoesNotMatchPostAuthor', 'InsufficientBalanceForPost', 'CategoryNotBeingUpdated', 'AncestorCategoryImmutable', 'MaxValidCategoryDepthExceeded', 'CategoryDoesNotExist', 'CategoryModeratorDoesNotExist', 'CategoryNotEmptyThreads', 'CategoryNotEmptyCategories', 'ModeratorCantDeleteCategory', 'ModeratorCantUpdateCategory', 'StickiedThreadIdsDuplicates', 'DataMigrationNotDone', 'MapSizeLimit', 'PathLengthShouldBeGreaterThanZero']
+    _enum: ['OriginNotForumLead', 'ForumUserIdNotMatchAccount', 'ModeratorIdNotMatchAccount', 'AccountDoesNotMatchThreadAuthor', 'ThreadDoesNotExist', 'ModeratorModerateOriginCategory', 'ModeratorModerateDestinationCategory', 'ThreadMoveInvalid', 'ThreadNotBeingUpdated', 'InsufficientBalanceForThreadCreation', 'CannotDeleteThreadWithOutstandingPosts', 'PostDoesNotExist', 'AccountDoesNotMatchPostAuthor', 'InsufficientBalanceForPost', 'CategoryNotBeingUpdated', 'AncestorCategoryImmutable', 'MaxValidCategoryDepthExceeded', 'CategoryDoesNotExist', 'CategoryModeratorDoesNotExist', 'CategoryNotEmptyThreads', 'CategoryNotEmptyCategories', 'ModeratorCantDeleteCategory', 'ModeratorCantUpdateCategory', 'StickiedThreadIdsDuplicates', 'MapSizeLimit', 'PathLengthShouldBeGreaterThanZero']
   },
   /**
-   * Lookup511: pallet_constitution::ConstitutionInfo
+   * Lookup536: pallet_constitution::ConstitutionInfo
    **/
   PalletConstitutionConstitutionInfo: {
     textHash: 'Bytes'
   },
   /**
-   * Lookup513: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>, MemberId, AuctionId>, DataObjectId, Balance>
+   * Lookup537: pallet_bounty::BountyRecord<Balance, BlockNumber, MemberId>
+   **/
+  PalletBountyBountyRecord: {
+    creationParams: 'PalletBountyBountyParameters',
+    totalFunding: 'u128',
+    milestone: 'PalletBountyBountyMilestone',
+    activeWorkEntryCount: 'u32',
+    hasUnpaidOracleReward: 'bool'
+  },
+  /**
+   * Lookup538: pallet_bounty::BountyMilestone<BlockNumber>
+   **/
+  PalletBountyBountyMilestone: {
+    _enum: {
+      Created: {
+        createdAt: 'u32',
+        hasContributions: 'bool',
+      },
+      BountyMaxFundingReached: 'Null',
+      WorkSubmitted: 'Null',
+      Terminated: 'Null',
+      JudgmentSubmitted: {
+        successfulBounty: 'bool'
+      }
+    }
+  },
+  /**
+   * Lookup540: pallet_bounty::Contribution<T>
+   **/
+  PalletBountyContribution: {
+    amount: 'u128',
+    funderStateBloatBondAmount: 'u128'
+  },
+  /**
+   * Lookup541: pallet_bounty::EntryRecord<sp_core::crypto::AccountId32, MemberId, BlockNumber>
+   **/
+  PalletBountyEntryRecord: {
+    memberId: 'u64',
+    stakingAccountId: 'AccountId32',
+    submittedAt: 'u32',
+    workSubmitted: 'bool'
+  },
+  /**
+   * Lookup542: pallet_bounty::Error<T>
+   **/
+  PalletBountyError: {
+    _enum: ['MinFundingAmountCannotBeGreaterThanMaxAmount', 'BountyDoesntExist', 'SwitchOracleOriginIsRoot', 'InvalidStageUnexpectedFunding', 'InvalidStageUnexpectedNoFundingContributed', 'InvalidStageUnexpectedCancelled', 'InvalidStageUnexpectedWorkSubmission', 'InvalidStageUnexpectedJudgment', 'InvalidStageUnexpectedSuccessfulBountyWithdrawal', 'InvalidStageUnexpectedFailedBountyWithdrawal', 'InsufficientBalanceForBounty', 'NoBountyContributionFound', 'InsufficientBalanceForStake', 'ConflictingStakes', 'WorkEntryDoesntExist', 'CherryLessThenMinimumAllowed', 'CannotSubmitWorkToClosedContractBounty', 'ClosedContractMemberListIsEmpty', 'ClosedContractMemberListIsTooLarge', 'ClosedContractMemberNotFound', 'InvalidOracleMemberId', 'InvalidStakingAccountForMember', 'ZeroWinnerReward', 'TotalRewardShouldBeEqualToTotalFunding', 'EntrantStakeIsLessThanMininum', 'FundingAmountCannotBeZero', 'FundingPeriodCannotBeZero', 'WinnerShouldHasWorkSubmission', 'InvalidContributorActorSpecified', 'InvalidOracleActorSpecified', 'InvalidEntrantWorkerSpecified', 'InvalidCreatorActorSpecified', 'WorkEntryDoesntBelongToWorker', 'OracleRewardAlreadyWithdrawn']
+  },
+  /**
+   * Lookup544: pallet_content::types::VideoRecord<ChannelId, pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>, MemberId, AuctionId>, frame_support::storage::bounded_btree_set::BoundedBTreeSet<T, S>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletContentVideoRecord: {
     inChannel: 'u64',
     nftStatus: 'Option<PalletContentNftTypesOwnedNft>',
     dataObjects: 'BTreeSet<u64>',
-    videoStateBloatBond: 'u128'
+    videoStateBloatBond: 'PalletCommonBloatBondRepayableBloatBond'
   },
   /**
-   * Lookup514: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>, MemberId, AuctionId>
+   * Lookup545: pallet_content::nft::types::OwnedNft<pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>, MemberId, AuctionId>
    **/
   PalletContentNftTypesOwnedNft: {
     owner: 'PalletContentNftTypesNftOwner',
@@ -3904,7 +4230,7 @@ export default {
     openAuctionsNonce: 'u64'
   },
   /**
-   * Lookup515: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>
+   * Lookup546: pallet_content::nft::types::TransactionalStatusRecord<MemberId, Balance, pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>, pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>>
    **/
   PalletContentNftTypesTransactionalStatusRecord: {
     _enum: {
@@ -3916,7 +4242,7 @@ export default {
     }
   },
   /**
-   * Lookup516: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>
+   * Lookup547: pallet_content::nft::types::EnglishAuctionRecord<BlockNumber, Balance, MemberId>
    **/
   PalletContentNftTypesEnglishAuctionRecord: {
     startingPrice: 'u128',
@@ -3929,14 +4255,14 @@ export default {
     topBid: 'Option<PalletContentNftTypesEnglishAuctionBid>'
   },
   /**
-   * Lookup518: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
+   * Lookup549: pallet_content::nft::types::EnglishAuctionBid<Balance, MemberId>
    **/
   PalletContentNftTypesEnglishAuctionBid: {
     amount: 'u128',
     bidderId: 'u64'
   },
   /**
-   * Lookup519: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>
+   * Lookup550: pallet_content::nft::types::OpenAuctionRecord<BlockNumber, AuctionId, Balance, MemberId>
    **/
   PalletContentNftTypesOpenAuctionRecord: {
     startingPrice: 'u128',
@@ -3947,7 +4273,7 @@ export default {
     start: 'u32'
   },
   /**
-   * Lookup520: pallet_content::nft::types::NftOwner<MemberId>
+   * Lookup551: pallet_content::nft::types::NftOwner<MemberId>
    **/
   PalletContentNftTypesNftOwner: {
     _enum: {
@@ -3956,7 +4282,7 @@ export default {
     }
   },
   /**
-   * Lookup522: pallet_content::permissions::curator_group::CuratorGroup<T>
+   * Lookup554: pallet_content::permissions::curator_group::CuratorGroup<T>
    **/
   PalletContentPermissionsCuratorGroup: {
     curators: 'BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>',
@@ -3964,7 +4290,7 @@ export default {
     permissionsByLevel: 'BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupContentModerationAction>>'
   },
   /**
-   * Lookup523: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
+   * Lookup555: pallet_content::nft::types::OpenAuctionBidRecord<Balance, BlockNumber, AuctionId>
    **/
   PalletContentNftTypesOpenAuctionBidRecord: {
     amount: 'u128',
@@ -3972,13 +4298,13 @@ export default {
     auctionId: 'u64'
   },
   /**
-   * Lookup524: pallet_content::errors::Error<T>
+   * Lookup556: pallet_content::errors::Error<T>
    **/
   PalletContentErrorsError: {
-    _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowIsLessThenStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawFromChannelAmountExceedsBalanceMinusExistentialDeposit', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales']
+    _enum: ['ChannelStateBloatBondChanged', 'VideoStateBloatBondChanged', 'MinCashoutValueTooLow', 'MaxCashoutValueTooHigh', 'MaxNumberOfChannelCollaboratorsExceeded', 'MaxNumberOfChannelAssetsExceeded', 'MaxNumberOfVideoAssetsExceeded', 'InvalidChannelBagWitnessProvided', 'InvalidStorageBucketsNumWitnessProvided', 'MissingStorageBucketsNumWitness', 'ChannelOwnerMemberDoesNotExist', 'ChannelOwnerCuratorGroupDoesNotExist', 'ChannelStateBloatBondBelowExistentialDeposit', 'NumberOfAssetsToRemoveIsZero', 'CuratorIsNotAMemberOfGivenCuratorGroup', 'CuratorIsAlreadyAMemberOfGivenCuratorGroup', 'CuratorGroupDoesNotExist', 'CuratorsPerGroupLimitReached', 'CuratorGroupIsNotActive', 'CuratorIdInvalid', 'LeadAuthFailed', 'MemberAuthFailed', 'CuratorAuthFailed', 'BadOrigin', 'ActorNotAuthorized', 'CategoryDoesNotExist', 'ChannelDoesNotExist', 'VideoDoesNotExist', 'VideoInSeason', 'ActorCannotBeLead', 'ActorCannotOwnChannel', 'NftAlreadyOwnedByChannel', 'NftAlreadyExists', 'NftDoesNotExist', 'OverflowOrUnderflowHappened', 'DoesNotOwnNft', 'RoyaltyUpperBoundExceeded', 'RoyaltyLowerBoundExceeded', 'AuctionDurationUpperBoundExceeded', 'AuctionDurationLowerBoundExceeded', 'ExtensionPeriodUpperBoundExceeded', 'ExtensionPeriodLowerBoundExceeded', 'BidLockDurationUpperBoundExceeded', 'BidLockDurationLowerBoundExceeded', 'StartingPriceUpperBoundExceeded', 'StartingPriceLowerBoundExceeded', 'AuctionBidStepUpperBoundExceeded', 'AuctionBidStepLowerBoundExceeded', 'InsufficientBalance', 'BidStepConstraintViolated', 'InvalidBidAmountSpecified', 'StartingPriceConstraintViolated', 'ActionHasBidsAlready', 'NftIsNotIdle', 'PendingOfferDoesNotExist', 'RewardAccountIsNotSet', 'ActorIsNotBidder', 'AuctionCannotBeCompleted', 'BidDoesNotExist', 'BidIsForPastAuction', 'StartsAtLowerBoundExceeded', 'StartsAtUpperBoundExceeded', 'AuctionDidNotStart', 'NotInAuctionState', 'MemberIsNotAllowedToParticipate', 'MemberProfileNotFound', 'NftNotInBuyNowState', 'InvalidBuyNowWitnessPriceProvided', 'IsNotOpenAuctionType', 'IsNotEnglishAuctionType', 'BidLockDurationIsNotExpired', 'NftAuctionIsAlreadyExpired', 'BuyNowMustBeGreaterThanStartingPrice', 'TargetMemberDoesNotExist', 'InvalidNftOfferWitnessPriceProvided', 'MaxAuctionWhiteListLengthUpperBoundExceeded', 'WhitelistHasOnlyOneMember', 'WhitelistedMemberDoesNotExist', 'NftNonChannelOwnerDoesNotExist', 'ExtensionPeriodIsGreaterThenAuctionDuration', 'NoAssetsSpecified', 'InvalidAssetsProvided', 'ChannelContainsVideos', 'ChannelContainsAssets', 'InvalidBagSizeSpecified', 'MigrationNotFinished', 'ReplyDoesNotExist', 'UnsufficientBalance', 'InsufficientTreasuryBalance', 'InvalidMemberProvided', 'ActorNotAMember', 'PaymentProofVerificationFailed', 'CashoutAmountExceedsMaximumAmount', 'CashoutAmountBelowMinimumAmount', 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance', 'WithdrawFromChannelAmountIsZero', 'ChannelCashoutsDisabled', 'MinCashoutAllowedExceedsMaxCashoutAllowed', 'CuratorModerationActionNotAllowed', 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded', 'ChannelFeaturePaused', 'ChannelBagMissing', 'AssetsToRemoveBeyondEntityAssetsSet', 'InvalidVideoDataObjectsCountProvided', 'InvalidChannelTransferStatus', 'InvalidChannelTransferAcceptor', 'InvalidChannelTransferCommitmentParams', 'ChannelAgentInsufficientPermissions', 'InvalidChannelOwner', 'ZeroReward', 'InsufficientBalanceForTransfer', 'InsufficientBalanceForChannelCreation', 'InsufficientBalanceForVideoCreation', 'InsufficientCouncilBudget', 'GlobalNftDailyLimitExceeded', 'GlobalNftWeeklyLimitExceeded', 'ChannelNftDailyLimitExceeded', 'ChannelNftWeeklyLimitExceeded', 'CreatorTokenAlreadyIssued', 'CreatorTokenNotIssued', 'MemberIdCouldNotBeDerivedFromActor', 'CannotWithdrawFromChannelWithCreatorTokenIssued', 'PatronageCanOnlyBeClaimedForMemberOwnedChannels', 'ChannelTransfersBlockedDuringRevenueSplits', 'ChannelTransfersBlockedDuringTokenSales']
   },
   /**
-   * Lookup525: pallet_storage::BagRecord<StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
+   * Lookup557: pallet_storage::BagRecord<StorageBucketId, pallet_storage::DistributionBucketIdRecord<DistributionBucketFamilyId, DistributionBucketIndex>>
    **/
   PalletStorageBagRecord: {
     storedBy: 'BTreeSet<u64>',
@@ -3987,7 +4313,7 @@ export default {
     objectsNumber: 'u64'
   },
   /**
-   * Lookup526: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
+   * Lookup558: pallet_storage::StorageBucketRecord<WorkerId, sp_core::crypto::AccountId32>
    **/
   PalletStorageStorageBucketRecord: {
     operatorStatus: 'PalletStorageStorageBucketOperatorStatus',
@@ -3996,7 +4322,7 @@ export default {
     assignedBags: 'u64'
   },
   /**
-   * Lookup527: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
+   * Lookup559: pallet_storage::StorageBucketOperatorStatus<WorkerId, sp_core::crypto::AccountId32>
    **/
   PalletStorageStorageBucketOperatorStatus: {
     _enum: {
@@ -4006,32 +4332,32 @@ export default {
     }
   },
   /**
-   * Lookup528: pallet_storage::DynamicBagCreationPolicy<DistributionBucketFamilyId>
+   * Lookup560: pallet_storage::DynamicBagCreationPolicy<DistributionBucketFamilyId>
    **/
   PalletStorageDynamicBagCreationPolicy: {
     numberOfStorageBuckets: 'u64',
     families: 'BTreeMap<u64, u32>'
   },
   /**
-   * Lookup530: pallet_storage::DataObject<Balance>
+   * Lookup562: pallet_storage::DataObject<pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletStorageDataObject: {
     _alias: {
       size_: 'size'
     },
     accepted: 'bool',
-    stateBloatBond: 'u128',
+    stateBloatBond: 'PalletCommonBloatBondRepayableBloatBond',
     size_: 'u64',
     ipfsContentId: 'Bytes'
   },
   /**
-   * Lookup531: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
+   * Lookup563: pallet_storage::DistributionBucketFamilyRecord<DistributionBucketIndex>
    **/
   PalletStorageDistributionBucketFamilyRecord: {
     nextDistributionBucketIndex: 'u64'
   },
   /**
-   * Lookup532: pallet_storage::DistributionBucketRecord<WorkerId>
+   * Lookup564: pallet_storage::DistributionBucketRecord<WorkerId>
    **/
   PalletStorageDistributionBucketRecord: {
     acceptingNewBags: 'bool',
@@ -4041,31 +4367,31 @@ export default {
     assignedBags: 'u64'
   },
   /**
-   * Lookup533: pallet_common::constraints::BoundedValueConstraint<Val>
+   * Lookup565: pallet_common::constraints::BoundedValueConstraint<Val>
    **/
   PalletCommonConstraintsBoundedValueConstraint: {
     min: 'u64',
     maxMinDiff: 'u64'
   },
   /**
-   * Lookup534: pallet_storage::Error<T>
+   * Lookup566: pallet_storage::Error<T>
    **/
   PalletStorageError: {
-    _enum: ['ArithmeticError', 'InvalidCidLength', 'NoObjectsOnUpload', 'StorageBucketDoesntExist', 'StorageBucketIsNotBoundToBag', 'StorageBucketIsBoundToBag', 'NoStorageBucketInvitation', 'StorageProviderAlreadySet', 'StorageProviderMustBeSet', 'DifferentStorageProviderInvited', 'InvitedStorageProvider', 'StorageBucketIdCollectionsAreEmpty', 'StorageBucketsNumberViolatesDynamicBagCreationPolicy', 'DistributionBucketsViolatesDynamicBagCreationPolicy', 'EmptyContentId', 'ZeroObjectSize', 'InvalidStateBloatBondSourceAccount', 'InvalidStorageProvider', 'InsufficientBalance', 'DataObjectDoesntExist', 'UploadingBlocked', 'DataObjectIdCollectionIsEmpty', 'SourceAndDestinationBagsAreEqual', 'DataObjectBlacklisted', 'BlacklistSizeLimitExceeded', 'VoucherMaxObjectSizeLimitExceeded', 'VoucherMaxObjectNumberLimitExceeded', 'StorageBucketObjectNumberLimitReached', 'StorageBucketObjectSizeLimitReached', 'InsufficientTreasuryBalance', 'CannotDeleteNonEmptyStorageBucket', 'DataObjectIdParamsAreEmpty', 'StorageBucketsPerBagLimitTooLow', 'StorageBucketsPerBagLimitTooHigh', 'StorageBucketPerBagLimitExceeded', 'StorageBucketDoesntAcceptNewBags', 'DynamicBagExists', 'DynamicBagDoesntExist', 'StorageProviderOperatorDoesntExist', 'DataSizeFeeChanged', 'DataObjectStateBloatBondChanged', 'CannotDeleteNonEmptyDynamicBag', 'MaxDistributionBucketFamilyNumberLimitExceeded', 'DistributionBucketFamilyDoesntExist', 'DistributionBucketDoesntExist', 'DistributionBucketIdCollectionsAreEmpty', 'DistributionBucketDoesntAcceptNewBags', 'MaxDistributionBucketNumberPerBagLimitExceeded', 'DistributionBucketIsNotBoundToBag', 'DistributionBucketIsBoundToBag', 'DistributionBucketsPerBagLimitTooLow', 'DistributionBucketsPerBagLimitTooHigh', 'DistributionProviderOperatorDoesntExist', 'DistributionProviderOperatorAlreadyInvited', 'DistributionProviderOperatorSet', 'NoDistributionBucketInvitation', 'MustBeDistributionProviderOperatorForBucket', 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached', 'DistributionFamilyBoundToBagCreationPolicy', 'MaxDataObjectSizeExceeded', 'InvalidTransactorAccount', 'NumberOfStorageBucketsOutsideOfAllowedContraints', 'NumberOfDistributionBucketsOutsideOfAllowedContraints']
+    _enum: ['ArithmeticError', 'InvalidCidLength', 'NoObjectsOnUpload', 'StorageBucketDoesntExist', 'StorageBucketIsNotBoundToBag', 'StorageBucketIsBoundToBag', 'NoStorageBucketInvitation', 'StorageProviderAlreadySet', 'StorageProviderMustBeSet', 'DifferentStorageProviderInvited', 'InvitedStorageProvider', 'StorageBucketIdCollectionsAreEmpty', 'StorageBucketsNumberViolatesDynamicBagCreationPolicy', 'DistributionBucketsViolatesDynamicBagCreationPolicy', 'EmptyContentId', 'ZeroObjectSize', 'InvalidStateBloatBondSourceAccount', 'InvalidStorageProvider', 'InsufficientBalance', 'DataObjectDoesntExist', 'UploadingBlocked', 'DataObjectIdCollectionIsEmpty', 'SourceAndDestinationBagsAreEqual', 'DataObjectBlacklisted', 'BlacklistSizeLimitExceeded', 'VoucherMaxObjectSizeLimitExceeded', 'VoucherMaxObjectNumberLimitExceeded', 'StorageBucketObjectNumberLimitReached', 'StorageBucketObjectSizeLimitReached', 'InsufficientTreasuryBalance', 'CannotDeleteNonEmptyStorageBucket', 'DataObjectIdParamsAreEmpty', 'StorageBucketsPerBagLimitTooLow', 'StorageBucketsPerBagLimitTooHigh', 'StorageBucketPerBagLimitExceeded', 'StorageBucketDoesntAcceptNewBags', 'DynamicBagExists', 'DynamicBagDoesntExist', 'StorageProviderOperatorDoesntExist', 'DataSizeFeeChanged', 'DataObjectStateBloatBondChanged', 'CannotDeleteNonEmptyDynamicBag', 'MaxDistributionBucketFamilyNumberLimitExceeded', 'DistributionBucketFamilyDoesntExist', 'DistributionBucketDoesntExist', 'DistributionBucketIdCollectionsAreEmpty', 'DistributionBucketDoesntAcceptNewBags', 'MaxDistributionBucketNumberPerBagLimitExceeded', 'DistributionBucketIsNotBoundToBag', 'DistributionBucketIsBoundToBag', 'DistributionBucketsPerBagLimitTooLow', 'DistributionBucketsPerBagLimitTooHigh', 'DistributionProviderOperatorDoesntExist', 'DistributionProviderOperatorAlreadyInvited', 'DistributionProviderOperatorSet', 'NoDistributionBucketInvitation', 'MustBeDistributionProviderOperatorForBucket', 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached', 'DistributionFamilyBoundToBagCreationPolicy', 'MaxDataObjectSizeExceeded', 'InvalidTransactorAccount', 'NumberOfStorageBucketsOutsideOfAllowedContraints', 'NumberOfDistributionBucketsOutsideOfAllowedContraints', 'CallDisabled']
   },
   /**
-   * Lookup535: pallet_project_token::types::AccountData<pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, Balance, pallet_project_token::types::StakingStatus<Balance>, JoyBalance>
+   * Lookup567: pallet_project_token::types::AccountData<pallet_project_token::types::VestingSchedule<BlockNumber, Balance>, Balance, pallet_project_token::types::StakingStatus<Balance>, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletProjectTokenAccountData: {
     vestingSchedules: 'BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>',
     amount: 'u128',
     splitStakingStatus: 'Option<PalletProjectTokenStakingStatus>',
-    bloatBond: 'u128',
+    bloatBond: 'PalletCommonBloatBondRepayableBloatBond',
     nextVestingTransferId: 'u64',
     lastSaleTotalPurchasedAmount: 'Option<(u32,u128)>'
   },
   /**
-   * Lookup536: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
+   * Lookup568: pallet_project_token::types::VestingSchedule<BlockNumber, Balance>
    **/
   PalletProjectTokenVestingSchedule: {
     linearVestingStartBlock: 'u32',
@@ -4075,14 +4401,14 @@ export default {
     burnedAmount: 'u128'
   },
   /**
-   * Lookup537: pallet_project_token::types::StakingStatus<Balance>
+   * Lookup569: pallet_project_token::types::StakingStatus<Balance>
    **/
   PalletProjectTokenStakingStatus: {
     splitId: 'u32',
     amount: 'u128'
   },
   /**
-   * Lookup544: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
+   * Lookup576: pallet_project_token::types::TokenData<Balance, primitive_types::H256, BlockNumber, pallet_project_token::types::TokenSale<JoyBalance, Balance, BlockNumber, pallet_project_token::types::VestingScheduleParams<BlockNumber>, MemberId, sp_core::crypto::AccountId32>, pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>>
    **/
   PalletProjectTokenTokenData: {
     totalSupply: 'u128',
@@ -4098,7 +4424,7 @@ export default {
     nextRevenueSplitId: 'u32'
   },
   /**
-   * Lookup545: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
+   * Lookup577: pallet_project_token::types::RevenueSplitState<JoyBalance, BlockNumber>
    **/
   PalletProjectTokenRevenueSplitState: {
     _enum: {
@@ -4107,7 +4433,7 @@ export default {
     }
   },
   /**
-   * Lookup546: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
+   * Lookup578: pallet_project_token::types::RevenueSplitInfo<JoyBalance, BlockNumber>
    **/
   PalletProjectTokenRevenueSplitInfo: {
     allocation: 'u128',
@@ -4115,14 +4441,14 @@ export default {
     dividendsClaimed: 'u128'
   },
   /**
-   * Lookup547: pallet_project_token::types::Timeline<BlockNumber>
+   * Lookup579: pallet_project_token::types::Timeline<BlockNumber>
    **/
   PalletProjectTokenTimeline: {
     start: 'u32',
     duration: 'u32'
   },
   /**
-   * Lookup549: pallet_project_token::types::PatronageData<Balance, BlockNumber>
+   * Lookup581: pallet_project_token::types::PatronageData<Balance, BlockNumber>
    **/
   PalletProjectTokenPatronageData: {
     rate: 'Perquintill',
@@ -4130,13 +4456,13 @@ export default {
     lastUnclaimedPatronageTallyBlock: 'u32'
   },
   /**
-   * Lookup551: pallet_project_token::errors::Error<T>
+   * Lookup583: pallet_project_token::errors::Error<T>
    **/
   PalletProjectTokenErrorsError: {
-    _enum: ['InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'MerkleProofVerificationFailure', 'TargetPatronageRateIsHigherThanCurrentRate', 'TokenSymbolAlreadyInUse', 'AccountAlreadyExists', 'TransferDestinationMemberDoesNotExist', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount']
+    _enum: ['InsufficientTransferrableBalance', 'TokenDoesNotExist', 'AccountInformationDoesNotExist', 'MerkleProofVerificationFailure', 'TargetPatronageRateIsHigherThanCurrentRate', 'TokenSymbolAlreadyInUse', 'InitialAllocationToNonExistingMember', 'AccountAlreadyExists', 'TransferDestinationMemberDoesNotExist', 'TokenIssuanceNotInIdleState', 'InsufficientJoyBalance', 'JoyTransferSubjectToDusting', 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode', 'AttemptToRemoveNonEmptyAccount', 'CannotJoinWhitelistInPermissionlessMode', 'CannotDeissueTokenWithOutstandingAccounts', 'NoUpcomingSale', 'NoActiveSale', 'InsufficientBalanceForTokenPurchase', 'NotEnoughTokensOnSale', 'SaleStartingBlockInThePast', 'SaleAccessProofRequired', 'SaleAccessProofParticipantIsNotSender', 'SalePurchaseCapExceeded', 'MaxVestingSchedulesPerAccountPerTokenReached', 'PreviousSaleNotFinalized', 'NoTokensToRecover', 'SaleDurationTooShort', 'SaleDurationIsZero', 'SaleUpperBoundQuantityIsZero', 'SaleCapPerMemberIsZero', 'SaleUnitPriceIsZero', 'SalePurchaseAmountIsZero', 'RevenueSplitTimeToStartTooShort', 'RevenueSplitDurationTooShort', 'RevenueSplitAlreadyActiveForToken', 'RevenueSplitNotActiveForToken', 'RevenueSplitDidNotEnd', 'RevenueSplitNotOngoing', 'UserAlreadyParticipating', 'InsufficientBalanceForSplitParticipation', 'UserNotParticipantingInAnySplit', 'CannotParticipateInSplitWithZeroAmount', 'CannotIssueSplitWithZeroAllocationAmount', 'CannotModifySupplyWhenRevenueSplitsAreActive', 'RevenueSplitRateIsZero', 'BurnAmountIsZero', 'BurnAmountGreaterThanAccountTokensAmount']
   },
   /**
-   * Lookup552: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
+   * Lookup584: pallet_proposals_engine::types::Proposal<BlockNumber, ProposerId, Balance, sp_core::crypto::AccountId32>
    **/
   PalletProposalsEngineProposal: {
     parameters: 'PalletProposalsEngineProposalParameters',
@@ -4149,7 +4475,7 @@ export default {
     stakingAccountId: 'Option<AccountId32>'
   },
   /**
-   * Lookup553: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
+   * Lookup585: pallet_proposals_engine::types::ProposalParameters<BlockNumber, Balance>
    **/
   PalletProposalsEngineProposalParameters: {
     votingPeriod: 'u32',
@@ -4162,7 +4488,7 @@ export default {
     constitutionality: 'u32'
   },
   /**
-   * Lookup554: pallet_proposals_engine::types::VotingResults
+   * Lookup586: pallet_proposals_engine::types::VotingResults
    **/
   PalletProposalsEngineVotingResults: {
     abstentions: 'u32',
@@ -4171,13 +4497,13 @@ export default {
     slashes: 'u32'
   },
   /**
-   * Lookup556: pallet_proposals_engine::Error<T>
+   * Lookup588: pallet_proposals_engine::Error<T>
    **/
   PalletProposalsEngineError: {
     _enum: ['EmptyTitleProvided', 'EmptyDescriptionProvided', 'TitleIsTooLong', 'DescriptionIsTooLong', 'ProposalNotFound', 'ProposalFinalized', 'AlreadyVoted', 'NotAuthor', 'MaxActiveProposalNumberExceeded', 'EmptyStake', 'StakeShouldBeEmpty', 'StakeDiffersFromRequired', 'InvalidParameterApprovalThreshold', 'InvalidParameterSlashingThreshold', 'RequireRootOrigin', 'ProposalHasVotes', 'ZeroExactExecutionBlock', 'InvalidExactExecutionBlock', 'InsufficientBalanceForStake', 'ConflictingStakes', 'InvalidStakingAccountForMember']
   },
   /**
-   * Lookup557: pallet_proposals_discussion::types::DiscussionThread<ThreadAuthorId, BlockNumber, MemberId>
+   * Lookup589: pallet_proposals_discussion::types::DiscussionThread<MemberId, BlockNumber>
    **/
   PalletProposalsDiscussionDiscussionThread: {
     activatedAt: 'u32',
@@ -4185,27 +4511,27 @@ export default {
     mode: 'PalletProposalsDiscussionThreadMode'
   },
   /**
-   * Lookup558: pallet_proposals_discussion::types::DiscussionPost<PostAuthorId, Balance, BlockNumber>
+   * Lookup590: pallet_proposals_discussion::types::DiscussionPost<MemberId, BlockNumber, pallet_common::bloat_bond::RepayableBloatBond<sp_core::crypto::AccountId32, Balance>>
    **/
   PalletProposalsDiscussionDiscussionPost: {
     authorId: 'u64',
-    cleanupPayOff: 'u128',
+    cleanupPayOff: 'PalletCommonBloatBondRepayableBloatBond',
     lastEdited: 'u32'
   },
   /**
-   * Lookup559: pallet_proposals_discussion::Error<T>
+   * Lookup591: pallet_proposals_discussion::Error<T>
    **/
   PalletProposalsDiscussionError: {
-    _enum: ['ThreadDoesntExist', 'PostDoesntExist', 'RequireRootOrigin', 'CannotPostOnClosedThread', 'NotAuthorOrCouncilor', 'MaxWhiteListSizeExceeded', 'InsufficientBalanceForPost', 'CannotDeletePost']
+    _enum: ['ThreadDoesntExist', 'PostDoesntExist', 'RequireRootOrigin', 'CannotPostOnClosedThread', 'NotAuthorOrCouncilor', 'MaxWhiteListSizeExceeded', 'WhitelistedMemberDoesNotExist', 'InsufficientBalanceForPost', 'CannotDeletePost']
   },
   /**
-   * Lookup560: pallet_proposals_codex::Error<T>
+   * Lookup592: pallet_proposals_codex::Error<T>
    **/
   PalletProposalsCodexError: {
-    _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout']
+    _enum: ['SignalProposalIsEmpty', 'RuntimeProposalIsEmpty', 'InvalidFundingRequestProposalBalance', 'InvalidValidatorCount', 'RequireRootOrigin', 'InvalidCouncilElectionParameterCouncilSize', 'InvalidCouncilElectionParameterCandidacyLimit', 'InvalidCouncilElectionParameterMinVotingStake', 'InvalidCouncilElectionParameterNewTermDuration', 'InvalidCouncilElectionParameterMinCouncilStake', 'InvalidCouncilElectionParameterRevealingPeriod', 'InvalidCouncilElectionParameterVotingPeriod', 'InvalidCouncilElectionParameterAnnouncingPeriod', 'InvalidWorkingGroupBudgetCapacity', 'InvalidSetLeadParameterCannotBeCouncilor', 'SlashingStakeIsZero', 'DecreasingStakeIsZero', 'InsufficientFundsForBudgetUpdate', 'InvalidFundingRequestProposalNumberOfAccount', 'InvalidFundingRequestProposalRepeatedAccount', 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout', 'InvalidLeadWorkerId', 'InvalidLeadOpeningId', 'InvalidLeadApplicationId', 'InvalidProposalId']
   },
   /**
-   * Lookup561: pallet_working_group::types::Opening<BlockNumber, Balance>
+   * Lookup593: pallet_working_group::types::Opening<BlockNumber, Balance>
    **/
   PalletWorkingGroupOpening: {
     openingType: 'PalletWorkingGroupOpeningType',
@@ -4216,7 +4542,7 @@ export default {
     creationStake: 'u128'
   },
   /**
-   * Lookup562: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId>
+   * Lookup594: pallet_working_group::types::JobApplication<sp_core::crypto::AccountId32, MemberId>
    **/
   PalletWorkingGroupJobApplication: {
     roleAccountId: 'AccountId32',
@@ -4227,7 +4553,7 @@ export default {
     openingId: 'u64'
   },
   /**
-   * Lookup563: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
+   * Lookup595: pallet_working_group::types::GroupWorker<sp_core::crypto::AccountId32, MemberId, BlockNumber, Balance>
    **/
   PalletWorkingGroupGroupWorker: {
     memberId: 'u64',
@@ -4241,13 +4567,13 @@ export default {
     createdAt: 'u32'
   },
   /**
-   * Lookup564: pallet_working_group::errors::Error<T, I>
+   * Lookup596: pallet_working_group::errors::Error<T, I>
    **/
   PalletWorkingGroupErrorsError: {
     _enum: ['StakeBalanceCannotBeZero', 'OpeningDoesNotExist', 'CannotHireMultipleLeaders', 'WorkerApplicationDoesNotExist', 'MaxActiveWorkerNumberExceeded', 'SuccessfulWorkerApplicationDoesNotExist', 'CannotHireLeaderWhenLeaderExists', 'IsNotLeadAccount', 'CurrentLeadNotSet', 'WorkerDoesNotExist', 'InvalidMemberOrigin', 'SignerIsNotWorkerRoleAccount', 'BelowMinimumStakes', 'InsufficientBalanceToCoverStake', 'ApplicationStakeDoesntMatchOpening', 'OriginIsNotApplicant', 'WorkerIsLeaving', 'CannotRewardWithZero', 'InvalidStakingAccountForMember', 'ConflictStakesOnAccount', 'WorkerHasNoReward', 'UnstakingPeriodLessThanMinimum', 'CannotSpendZero', 'InsufficientBudgetForSpending', 'NoApplicationsProvided', 'CannotDecreaseStakeDeltaGreaterThanStake', 'ApplicationsNotForOpening', 'WorkerStorageValueTooLong', 'InsufficientTokensForFunding', 'ZeroTokensFunding', 'InsufficientBalanceForTransfer']
   },
   /**
-   * Lookup574: sp_runtime::MultiSignature
+   * Lookup606: sp_runtime::MultiSignature
    **/
   SpRuntimeMultiSignature: {
     _enum: {
@@ -4257,39 +4583,39 @@ export default {
     }
   },
   /**
-   * Lookup575: sp_core::ecdsa::Signature
+   * Lookup607: sp_core::ecdsa::Signature
    **/
   SpCoreEcdsaSignature: '[u8;65]',
   /**
-   * Lookup578: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
+   * Lookup610: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
    **/
   FrameSystemExtensionsCheckNonZeroSender: 'Null',
   /**
-   * Lookup579: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
+   * Lookup611: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
    **/
   FrameSystemExtensionsCheckSpecVersion: 'Null',
   /**
-   * Lookup580: frame_system::extensions::check_tx_version::CheckTxVersion<T>
+   * Lookup612: frame_system::extensions::check_tx_version::CheckTxVersion<T>
    **/
   FrameSystemExtensionsCheckTxVersion: 'Null',
   /**
-   * Lookup581: frame_system::extensions::check_genesis::CheckGenesis<T>
+   * Lookup613: frame_system::extensions::check_genesis::CheckGenesis<T>
    **/
   FrameSystemExtensionsCheckGenesis: 'Null',
   /**
-   * Lookup584: frame_system::extensions::check_nonce::CheckNonce<T>
+   * Lookup616: frame_system::extensions::check_nonce::CheckNonce<T>
    **/
   FrameSystemExtensionsCheckNonce: 'Compact<u32>',
   /**
-   * Lookup585: frame_system::extensions::check_weight::CheckWeight<T>
+   * Lookup617: frame_system::extensions::check_weight::CheckWeight<T>
    **/
   FrameSystemExtensionsCheckWeight: 'Null',
   /**
-   * Lookup586: pallet_transaction_payment::ChargeTransactionPayment<T>
+   * Lookup618: pallet_transaction_payment::ChargeTransactionPayment<T>
    **/
   PalletTransactionPaymentChargeTransactionPayment: 'Compact<u128>',
   /**
-   * Lookup587: joystream_node_runtime::Runtime
+   * Lookup619: joystream_node_runtime::Runtime
    **/
   JoystreamNodeRuntimeRuntime: 'Null'
 };
diff --git a/src/augment/registry.ts b/src/augment/registry.ts
index e7672726e19e27a01476b7dd21734aad0576f384..7f09072d788d2c1f865bde869a02b3b8d1854157 100644
--- a/src/augment/registry.ts
+++ b/src/augment/registry.ts
@@ -1,7 +1,7 @@
 // Auto-generated via `yarn polkadot-types-from-defs`, do not edit
 /* eslint-disable */
 
-import type { FinalityGrandpaEquivocationPrecommit, FinalityGrandpaEquivocationPrevote, FinalityGrandpaPrecommit, FinalityGrandpaPrevote, FrameSupportDispatchRawOrigin, FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchClass, FrameSupportWeightsDispatchInfo, FrameSupportWeightsPays, FrameSupportWeightsPerDispatchClassU32, FrameSupportWeightsPerDispatchClassU64, FrameSupportWeightsPerDispatchClassWeightsPerClass, FrameSupportWeightsRuntimeDbWeight, FrameSystemAccountInfo, FrameSystemCall, FrameSystemError, FrameSystemEvent, FrameSystemEventRecord, FrameSystemExtensionsCheckGenesis, FrameSystemExtensionsCheckNonZeroSender, FrameSystemExtensionsCheckNonce, FrameSystemExtensionsCheckSpecVersion, FrameSystemExtensionsCheckTxVersion, FrameSystemExtensionsCheckWeight, FrameSystemLastRuntimeUpgradeInfo, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, FrameSystemLimitsWeightsPerClass, FrameSystemPhase, JoystreamNodeRuntimeNposSolution16, JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeRuntime, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipCall, PalletAuthorshipError, PalletAuthorshipUncleEntryItem, PalletBabeCall, PalletBabeError, PalletBagsListCall, PalletBagsListError, PalletBagsListEvent, PalletBagsListListBag, PalletBagsListListListError, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesCall, PalletBalancesError, PalletBalancesEvent, PalletBalancesReasons, PalletBalancesReleases, PalletBalancesReserveData, PalletCommonBalanceKind, PalletCommonConstraintsBoundedValueConstraint, PalletCommonFundingRequestParameters, PalletCommonWorkingGroup, PalletConstitutionCall, PalletConstitutionConstitutionInfo, PalletConstitutionEvent, PalletContentCall, PalletContentChannelActionPermission, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelOwner, PalletContentChannelPayoutsPayloadParametersRecord, PalletContentChannelRecord, PalletContentChannelTransferStatus, PalletContentChannelUpdateParametersRecord, PalletContentErrorsError, PalletContentInitTransferParameters, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionBid, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesEnglishAuctionRecord, PalletContentNftTypesInitTransactionalStatusRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesNftOwner, PalletContentNftTypesOpenAuctionBidRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentNftTypesOpenAuctionRecord, PalletContentNftTypesOwnedNft, PalletContentNftTypesTransactionalStatusRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroup, PalletContentPermissionsCuratorGroupContentModerationAction, PalletContentPermissionsCuratorGroupPausableChannelFeature, PalletContentProofElementRecord, PalletContentPullPaymentElement, PalletContentRawEvent, PalletContentSide, PalletContentStorageAssetsRecord, PalletContentTransferCommitmentParameters, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoRecord, PalletContentVideoUpdateParametersRecord, PalletCouncilCall, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStage, PalletCouncilCouncilStageAnnouncing, PalletCouncilCouncilStageElection, PalletCouncilCouncilStageUpdate, PalletCouncilError, PalletCouncilRawEvent, PalletElectionProviderMultiPhaseCall, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhaseError, PalletElectionProviderMultiPhaseEvent, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCall, PalletForumCategory, PalletForumError, PalletForumExtendedPostIdObject, PalletForumPost, PalletForumPrivilegedActor, PalletForumRawEvent, PalletForumThread, PalletGrandpaCall, PalletGrandpaError, PalletGrandpaEvent, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineCall, PalletImOnlineError, PalletImOnlineEvent, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Public, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCall, PalletMembershipCreateFoundingMemberParameters, PalletMembershipError, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMembershipMembershipObject, PalletMembershipRawEvent, PalletMembershipStakingAccountMemberBinding, PalletOffencesEvent, PalletProjectTokenAccountData, PalletProjectTokenCall, PalletProjectTokenErrorsError, PalletProjectTokenEventsRawEvent, PalletProjectTokenMerkleProof, PalletProjectTokenMerkleSide, PalletProjectTokenPatronageData, PalletProjectTokenPayment, PalletProjectTokenPaymentWithVesting, PalletProjectTokenRevenueSplitInfo, PalletProjectTokenRevenueSplitState, PalletProjectTokenSingleDataObjectUploadParams, PalletProjectTokenStakingStatus, PalletProjectTokenTimeline, PalletProjectTokenTokenAllocation, PalletProjectTokenTokenData, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransferPolicy, PalletProjectTokenTransferPolicyParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProjectTokenVestingSchedule, PalletProjectTokenVestingScheduleParams, PalletProjectTokenVestingSource, PalletProjectTokenWhitelistParams, PalletProposalsCodexCall, PalletProposalsCodexCreateOpeningParameters, PalletProposalsCodexError, PalletProposalsCodexFillOpeningParameters, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsCodexRawEvent, PalletProposalsCodexTerminateRoleParameters, PalletProposalsDiscussionCall, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsDiscussionError, PalletProposalsDiscussionRawEvent, PalletProposalsDiscussionThreadMode, PalletProposalsEngineCall, PalletProposalsEngineError, PalletProposalsEngineProposal, PalletProposalsEngineProposalParameters, PalletProposalsEngineProposalStatusesApprovedProposalDecision, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineRawEvent, PalletProposalsEngineVoteKind, PalletProposalsEngineVotingResults, PalletReferendumCall, PalletReferendumCastVote, PalletReferendumError, PalletReferendumInstance1, PalletReferendumOptionResult, PalletReferendumRawEvent, PalletReferendumReferendumStage, PalletReferendumReferendumStageRevealing, PalletReferendumReferendumStageVoting, PalletSessionCall, PalletSessionError, PalletSessionEvent, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingIndividualExposure, PalletStakingNominations, PalletStakingPalletCall, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletError, PalletStakingPalletEvent, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingUnlockChunk, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageCall, PalletStorageDataObject, PalletStorageDataObjectCreationParameters, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketIdRecord, PalletStorageDistributionBucketRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageError, PalletStorageRawEvent, PalletStorageStaticBagId, PalletStorageStorageBucketOperatorStatus, PalletStorageStorageBucketRecord, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletSudoCall, PalletSudoError, PalletSudoEvent, PalletTimestampCall, PalletTransactionPaymentChargeTransactionPayment, PalletTransactionPaymentReleases, PalletUtilityCall, PalletUtilityError, PalletUtilityEvent, PalletUtilityRawEvent, PalletVestingCall, PalletVestingError, PalletVestingEvent, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupCall, PalletWorkingGroupErrorsError, PalletWorkingGroupGroupWorker, PalletWorkingGroupInstance1, PalletWorkingGroupInstance2, PalletWorkingGroupInstance3, PalletWorkingGroupInstance4, PalletWorkingGroupInstance5, PalletWorkingGroupInstance6, PalletWorkingGroupInstance7, PalletWorkingGroupInstance8, PalletWorkingGroupInstance9, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, PalletWorkingGroupOpeningType, PalletWorkingGroupRawEventInstance1, PalletWorkingGroupRawEventInstance2, PalletWorkingGroupRawEventInstance3, PalletWorkingGroupRawEventInstance4, PalletWorkingGroupRawEventInstance5, PalletWorkingGroupRawEventInstance6, PalletWorkingGroupRawEventInstance7, PalletWorkingGroupRawEventInstance8, PalletWorkingGroupRawEventInstance9, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakeParameters, PalletWorkingGroupStakePolicy, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAllowedSlots, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpConsensusBabeDigestsPrimaryPreDigest, SpConsensusBabeDigestsSecondaryPlainPreDigest, SpConsensusBabeDigestsSecondaryVRFPreDigest, SpConsensusSlotsEquivocationProof, SpCoreCryptoKeyTypeId, SpCoreEcdsaSignature, SpCoreEd25519Public, SpCoreEd25519Signature, SpCoreOffchainOpaqueNetworkState, SpCoreSr25519Public, SpCoreSr25519Signature, SpCoreVoid, SpFinalityGrandpaAppPublic, SpFinalityGrandpaAppSignature, SpFinalityGrandpaEquivocation, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeArithmeticError, SpRuntimeBlakeTwo256, SpRuntimeDigest, SpRuntimeDigestDigestItem, SpRuntimeDispatchError, SpRuntimeHeader, SpRuntimeModuleError, SpRuntimeMultiSignature, SpRuntimeTokenError, SpRuntimeTransactionalError, SpSessionMembershipProof, SpStakingOffenceOffenceDetails, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
+import type { FinalityGrandpaEquivocationPrecommit, FinalityGrandpaEquivocationPrevote, FinalityGrandpaPrecommit, FinalityGrandpaPrevote, FrameSupportDispatchRawOrigin, FrameSupportTokensMiscBalanceStatus, FrameSupportWeightsDispatchClass, FrameSupportWeightsDispatchInfo, FrameSupportWeightsPays, FrameSupportWeightsPerDispatchClassU32, FrameSupportWeightsPerDispatchClassU64, FrameSupportWeightsPerDispatchClassWeightsPerClass, FrameSupportWeightsRuntimeDbWeight, FrameSystemAccountInfo, FrameSystemCall, FrameSystemError, FrameSystemEvent, FrameSystemEventRecord, FrameSystemExtensionsCheckGenesis, FrameSystemExtensionsCheckNonZeroSender, FrameSystemExtensionsCheckNonce, FrameSystemExtensionsCheckSpecVersion, FrameSystemExtensionsCheckTxVersion, FrameSystemExtensionsCheckWeight, FrameSystemLastRuntimeUpgradeInfo, FrameSystemLimitsBlockLength, FrameSystemLimitsBlockWeights, FrameSystemLimitsWeightsPerClass, FrameSystemPhase, JoystreamNodeRuntimeNposSolution16, JoystreamNodeRuntimeOriginCaller, JoystreamNodeRuntimeRuntime, JoystreamNodeRuntimeSessionKeys, PalletAuthorshipCall, PalletAuthorshipError, PalletAuthorshipUncleEntryItem, PalletBabeCall, PalletBabeError, PalletBagsListCall, PalletBagsListError, PalletBagsListEvent, PalletBagsListListBag, PalletBagsListListListError, PalletBagsListListNode, PalletBalancesAccountData, PalletBalancesBalanceLock, PalletBalancesCall, PalletBalancesError, PalletBalancesEvent, PalletBalancesReasons, PalletBalancesReleases, PalletBalancesReserveData, PalletBountyAssuranceContractType, PalletBountyBountyActor, PalletBountyBountyMilestone, PalletBountyBountyParameters, PalletBountyBountyRecord, PalletBountyCall, PalletBountyContribution, PalletBountyEntryRecord, PalletBountyError, PalletBountyFundingType, PalletBountyOracleWorkEntryJudgment, PalletBountyRawEvent, PalletCommonBalanceKind, PalletCommonBloatBondRepayableBloatBond, PalletCommonConstraintsBoundedValueConstraint, PalletCommonFundingRequestParameters, PalletCommonProofElementRecord, PalletCommonSide, PalletCommonWorkingGroup, PalletConstitutionCall, PalletConstitutionConstitutionInfo, PalletConstitutionEvent, PalletContentCall, PalletContentChannelActionPermission, PalletContentChannelBagWitness, PalletContentChannelCreationParametersRecord, PalletContentChannelFundsDestination, PalletContentChannelOwner, PalletContentChannelPayoutsPayloadParametersRecord, PalletContentChannelRecord, PalletContentChannelTransferStatus, PalletContentChannelUpdateParametersRecord, PalletContentErrorsError, PalletContentInitTransferParameters, PalletContentLimitPerPeriod, PalletContentNftCounter, PalletContentNftLimitPeriod, PalletContentNftTypesEnglishAuctionBid, PalletContentNftTypesEnglishAuctionParamsRecord, PalletContentNftTypesEnglishAuctionRecord, PalletContentNftTypesInitTransactionalStatusRecord, PalletContentNftTypesNftIssuanceParametersRecord, PalletContentNftTypesNftOwner, PalletContentNftTypesOpenAuctionBidRecord, PalletContentNftTypesOpenAuctionParamsRecord, PalletContentNftTypesOpenAuctionRecord, PalletContentNftTypesOwnedNft, PalletContentNftTypesTransactionalStatusRecord, PalletContentPendingTransfer, PalletContentPermissionsContentActor, PalletContentPermissionsCuratorGroup, PalletContentPermissionsCuratorGroupContentModerationAction, PalletContentPermissionsCuratorGroupPausableChannelFeature, PalletContentPullPaymentElement, PalletContentRawEvent, PalletContentStorageAssetsRecord, PalletContentTransferCommitmentParametersBTreeMap, PalletContentTransferCommitmentParametersBoundedBTreeMap, PalletContentUpdateChannelPayoutsParametersRecord, PalletContentVideoCreationParametersRecord, PalletContentVideoRecord, PalletContentVideoUpdateParametersRecord, PalletCouncilCall, PalletCouncilCandidate, PalletCouncilCouncilMember, PalletCouncilCouncilStage, PalletCouncilCouncilStageAnnouncing, PalletCouncilCouncilStageElection, PalletCouncilCouncilStageIdle, PalletCouncilCouncilStageUpdate, PalletCouncilError, PalletCouncilRawEvent, PalletElectionProviderMultiPhaseCall, PalletElectionProviderMultiPhaseElectionCompute, PalletElectionProviderMultiPhaseError, PalletElectionProviderMultiPhaseEvent, PalletElectionProviderMultiPhasePhase, PalletElectionProviderMultiPhaseRawSolution, PalletElectionProviderMultiPhaseReadySolution, PalletElectionProviderMultiPhaseRoundSnapshot, PalletElectionProviderMultiPhaseSignedSignedSubmission, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize, PalletForumCall, PalletForumCategory, PalletForumError, PalletForumExtendedPostIdObject, PalletForumPost, PalletForumPrivilegedActor, PalletForumRawEvent, PalletForumThread, PalletGrandpaCall, PalletGrandpaError, PalletGrandpaEvent, PalletGrandpaStoredPendingChange, PalletGrandpaStoredState, PalletImOnlineBoundedOpaqueNetworkState, PalletImOnlineCall, PalletImOnlineError, PalletImOnlineEvent, PalletImOnlineHeartbeat, PalletImOnlineSr25519AppSr25519Public, PalletImOnlineSr25519AppSr25519Signature, PalletMembershipBuyMembershipParameters, PalletMembershipCall, PalletMembershipCreateFoundingMemberParameters, PalletMembershipError, PalletMembershipGiftMembershipParameters, PalletMembershipInviteMembershipParameters, PalletMembershipMembershipObject, PalletMembershipRawEvent, PalletMembershipStakingAccountMemberBinding, PalletMultisigCall, PalletMultisigError, PalletMultisigEvent, PalletMultisigMultisig, PalletMultisigTimepoint, PalletOffencesEvent, PalletProjectTokenAccountData, PalletProjectTokenCall, PalletProjectTokenErrorsError, PalletProjectTokenEventsRawEvent, PalletProjectTokenMerkleProof, PalletProjectTokenMerkleSide, PalletProjectTokenPatronageData, PalletProjectTokenPayment, PalletProjectTokenPaymentWithVesting, PalletProjectTokenRevenueSplitInfo, PalletProjectTokenRevenueSplitState, PalletProjectTokenSingleDataObjectUploadParams, PalletProjectTokenStakingStatus, PalletProjectTokenTimeline, PalletProjectTokenTokenAllocation, PalletProjectTokenTokenData, PalletProjectTokenTokenIssuanceParameters, PalletProjectTokenTokenSale, PalletProjectTokenTokenSaleParams, PalletProjectTokenTransferPolicy, PalletProjectTokenTransferPolicyParams, PalletProjectTokenTransfersPayment, PalletProjectTokenTransfersPaymentWithVesting, PalletProjectTokenValidated, PalletProjectTokenValidatedPayment, PalletProjectTokenVestingSchedule, PalletProjectTokenVestingScheduleParams, PalletProjectTokenVestingSource, PalletProjectTokenWhitelistParams, PalletProposalsCodexCall, PalletProposalsCodexCreateOpeningParameters, PalletProposalsCodexError, PalletProposalsCodexFillOpeningParameters, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, PalletProposalsCodexRawEvent, PalletProposalsCodexTerminateRoleParameters, PalletProposalsDiscussionCall, PalletProposalsDiscussionDiscussionPost, PalletProposalsDiscussionDiscussionThread, PalletProposalsDiscussionError, PalletProposalsDiscussionRawEvent, PalletProposalsDiscussionThreadMode, PalletProposalsEngineCall, PalletProposalsEngineError, PalletProposalsEngineProposal, PalletProposalsEngineProposalParameters, PalletProposalsEngineProposalStatusesApprovedProposalDecision, PalletProposalsEngineProposalStatusesExecutionStatus, PalletProposalsEngineProposalStatusesProposalDecision, PalletProposalsEngineProposalStatusesProposalStatus, PalletProposalsEngineRawEvent, PalletProposalsEngineVoteKind, PalletProposalsEngineVotingResults, PalletReferendumCall, PalletReferendumCastVote, PalletReferendumError, PalletReferendumInstance1, PalletReferendumOptionResult, PalletReferendumRawEvent, PalletReferendumReferendumStage, PalletReferendumReferendumStageRevealing, PalletReferendumReferendumStageVoting, PalletSessionCall, PalletSessionError, PalletSessionEvent, PalletStakingActiveEraInfo, PalletStakingEraRewardPoints, PalletStakingExposure, PalletStakingForcing, PalletStakingIndividualExposure, PalletStakingNominations, PalletStakingPalletCall, PalletStakingPalletConfigOpPerbill, PalletStakingPalletConfigOpPercent, PalletStakingPalletConfigOpU128, PalletStakingPalletConfigOpU32, PalletStakingPalletError, PalletStakingPalletEvent, PalletStakingReleases, PalletStakingRewardDestination, PalletStakingSlashingSlashingSpans, PalletStakingSlashingSpanRecord, PalletStakingStakingLedger, PalletStakingUnappliedSlash, PalletStakingUnlockChunk, PalletStakingValidatorPrefs, PalletStorageBagIdType, PalletStorageBagRecord, PalletStorageCall, PalletStorageDataObject, PalletStorageDataObjectCreationParameters, PalletStorageDistributionBucketFamilyRecord, PalletStorageDistributionBucketIdRecord, PalletStorageDistributionBucketRecord, PalletStorageDynBagCreationParametersRecord, PalletStorageDynamicBagCreationPolicy, PalletStorageDynamicBagIdType, PalletStorageDynamicBagType, PalletStorageError, PalletStorageRawEvent, PalletStorageStaticBagId, PalletStorageStorageBucketOperatorStatus, PalletStorageStorageBucketRecord, PalletStorageUploadParametersRecord, PalletStorageVoucher, PalletSudoCall, PalletSudoError, PalletSudoEvent, PalletTimestampCall, PalletTransactionPaymentChargeTransactionPayment, PalletTransactionPaymentReleases, PalletUtilityCall, PalletUtilityError, PalletUtilityEvent, PalletUtilityRawEvent, PalletVestingCall, PalletVestingError, PalletVestingEvent, PalletVestingReleases, PalletVestingVestingInfo, PalletWorkingGroupApplyOnOpeningParams, PalletWorkingGroupCall, PalletWorkingGroupErrorsError, PalletWorkingGroupGroupWorker, PalletWorkingGroupInstance1, PalletWorkingGroupInstance2, PalletWorkingGroupInstance3, PalletWorkingGroupInstance4, PalletWorkingGroupInstance5, PalletWorkingGroupInstance6, PalletWorkingGroupInstance7, PalletWorkingGroupInstance8, PalletWorkingGroupInstance9, PalletWorkingGroupJobApplication, PalletWorkingGroupOpening, PalletWorkingGroupOpeningType, PalletWorkingGroupRawEventInstance1, PalletWorkingGroupRawEventInstance2, PalletWorkingGroupRawEventInstance3, PalletWorkingGroupRawEventInstance4, PalletWorkingGroupRawEventInstance5, PalletWorkingGroupRawEventInstance6, PalletWorkingGroupRawEventInstance7, PalletWorkingGroupRawEventInstance8, PalletWorkingGroupRawEventInstance9, PalletWorkingGroupRewardPaymentType, PalletWorkingGroupStakeParameters, PalletWorkingGroupStakePolicy, SpAuthorityDiscoveryAppPublic, SpConsensusBabeAllowedSlots, SpConsensusBabeAppPublic, SpConsensusBabeBabeEpochConfiguration, SpConsensusBabeDigestsNextConfigDescriptor, SpConsensusBabeDigestsPreDigest, SpConsensusBabeDigestsPrimaryPreDigest, SpConsensusBabeDigestsSecondaryPlainPreDigest, SpConsensusBabeDigestsSecondaryVRFPreDigest, SpConsensusSlotsEquivocationProof, SpCoreCryptoKeyTypeId, SpCoreEcdsaSignature, SpCoreEd25519Public, SpCoreEd25519Signature, SpCoreOffchainOpaqueNetworkState, SpCoreSr25519Public, SpCoreSr25519Signature, SpCoreVoid, SpFinalityGrandpaAppPublic, SpFinalityGrandpaAppSignature, SpFinalityGrandpaEquivocation, SpFinalityGrandpaEquivocationProof, SpNposElectionsElectionScore, SpNposElectionsSupport, SpRuntimeArithmeticError, SpRuntimeBlakeTwo256, SpRuntimeDigest, SpRuntimeDigestDigestItem, SpRuntimeDispatchError, SpRuntimeHeader, SpRuntimeModuleError, SpRuntimeMultiSignature, SpRuntimeTokenError, SpRuntimeTransactionalError, SpSessionMembershipProof, SpStakingOffenceOffenceDetails, SpVersionRuntimeVersion } from '@polkadot/types/lookup';
 
 declare module '@polkadot/types/types/registry' {
   export interface InterfaceTypes {
@@ -57,15 +57,31 @@ declare module '@polkadot/types/types/registry' {
     PalletBalancesReasons: PalletBalancesReasons;
     PalletBalancesReleases: PalletBalancesReleases;
     PalletBalancesReserveData: PalletBalancesReserveData;
+    PalletBountyAssuranceContractType: PalletBountyAssuranceContractType;
+    PalletBountyBountyActor: PalletBountyBountyActor;
+    PalletBountyBountyMilestone: PalletBountyBountyMilestone;
+    PalletBountyBountyParameters: PalletBountyBountyParameters;
+    PalletBountyBountyRecord: PalletBountyBountyRecord;
+    PalletBountyCall: PalletBountyCall;
+    PalletBountyContribution: PalletBountyContribution;
+    PalletBountyEntryRecord: PalletBountyEntryRecord;
+    PalletBountyError: PalletBountyError;
+    PalletBountyFundingType: PalletBountyFundingType;
+    PalletBountyOracleWorkEntryJudgment: PalletBountyOracleWorkEntryJudgment;
+    PalletBountyRawEvent: PalletBountyRawEvent;
     PalletCommonBalanceKind: PalletCommonBalanceKind;
+    PalletCommonBloatBondRepayableBloatBond: PalletCommonBloatBondRepayableBloatBond;
     PalletCommonConstraintsBoundedValueConstraint: PalletCommonConstraintsBoundedValueConstraint;
     PalletCommonFundingRequestParameters: PalletCommonFundingRequestParameters;
+    PalletCommonProofElementRecord: PalletCommonProofElementRecord;
+    PalletCommonSide: PalletCommonSide;
     PalletCommonWorkingGroup: PalletCommonWorkingGroup;
     PalletConstitutionCall: PalletConstitutionCall;
     PalletConstitutionConstitutionInfo: PalletConstitutionConstitutionInfo;
     PalletConstitutionEvent: PalletConstitutionEvent;
     PalletContentCall: PalletContentCall;
     PalletContentChannelActionPermission: PalletContentChannelActionPermission;
+    PalletContentChannelBagWitness: PalletContentChannelBagWitness;
     PalletContentChannelCreationParametersRecord: PalletContentChannelCreationParametersRecord;
     PalletContentChannelFundsDestination: PalletContentChannelFundsDestination;
     PalletContentChannelOwner: PalletContentChannelOwner;
@@ -94,12 +110,11 @@ declare module '@polkadot/types/types/registry' {
     PalletContentPermissionsCuratorGroup: PalletContentPermissionsCuratorGroup;
     PalletContentPermissionsCuratorGroupContentModerationAction: PalletContentPermissionsCuratorGroupContentModerationAction;
     PalletContentPermissionsCuratorGroupPausableChannelFeature: PalletContentPermissionsCuratorGroupPausableChannelFeature;
-    PalletContentProofElementRecord: PalletContentProofElementRecord;
     PalletContentPullPaymentElement: PalletContentPullPaymentElement;
     PalletContentRawEvent: PalletContentRawEvent;
-    PalletContentSide: PalletContentSide;
     PalletContentStorageAssetsRecord: PalletContentStorageAssetsRecord;
-    PalletContentTransferCommitmentParameters: PalletContentTransferCommitmentParameters;
+    PalletContentTransferCommitmentParametersBTreeMap: PalletContentTransferCommitmentParametersBTreeMap;
+    PalletContentTransferCommitmentParametersBoundedBTreeMap: PalletContentTransferCommitmentParametersBoundedBTreeMap;
     PalletContentUpdateChannelPayoutsParametersRecord: PalletContentUpdateChannelPayoutsParametersRecord;
     PalletContentVideoCreationParametersRecord: PalletContentVideoCreationParametersRecord;
     PalletContentVideoRecord: PalletContentVideoRecord;
@@ -110,6 +125,7 @@ declare module '@polkadot/types/types/registry' {
     PalletCouncilCouncilStage: PalletCouncilCouncilStage;
     PalletCouncilCouncilStageAnnouncing: PalletCouncilCouncilStageAnnouncing;
     PalletCouncilCouncilStageElection: PalletCouncilCouncilStageElection;
+    PalletCouncilCouncilStageIdle: PalletCouncilCouncilStageIdle;
     PalletCouncilCouncilStageUpdate: PalletCouncilCouncilStageUpdate;
     PalletCouncilError: PalletCouncilError;
     PalletCouncilRawEvent: PalletCouncilRawEvent;
@@ -152,6 +168,11 @@ declare module '@polkadot/types/types/registry' {
     PalletMembershipMembershipObject: PalletMembershipMembershipObject;
     PalletMembershipRawEvent: PalletMembershipRawEvent;
     PalletMembershipStakingAccountMemberBinding: PalletMembershipStakingAccountMemberBinding;
+    PalletMultisigCall: PalletMultisigCall;
+    PalletMultisigError: PalletMultisigError;
+    PalletMultisigEvent: PalletMultisigEvent;
+    PalletMultisigMultisig: PalletMultisigMultisig;
+    PalletMultisigTimepoint: PalletMultisigTimepoint;
     PalletOffencesEvent: PalletOffencesEvent;
     PalletProjectTokenAccountData: PalletProjectTokenAccountData;
     PalletProjectTokenCall: PalletProjectTokenCall;
diff --git a/src/augment/types-lookup.ts b/src/augment/types-lookup.ts
index 02cc38a0ca8212c8548229bdd89712dd8427a5a1..241909e749ee1d00870fc5b8d039ee89f9a321fe 100644
--- a/src/augment/types-lookup.ts
+++ b/src/augment/types-lookup.ts
@@ -2,7 +2,7 @@
 /* eslint-disable */
 
 declare module '@polkadot/types/lookup' {
-  import type { BTreeMap, BTreeSet, Bytes, Compact, Enum, Null, Option, Result, Struct, Text, U8aFixed, Vec, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
+  import type { BTreeMap, BTreeSet, Bytes, Compact, Enum, Null, Option, Result, Struct, Text, U8aFixed, Vec, WrapperKeepOpaque, bool, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
   import type { ITuple } from '@polkadot/types-codec/types';
   import type { AccountId32, Call, H256, PerU16, Perbill, Percent, Permill, Perquintill } from '@polkadot/types/interfaces/runtime';
   import type { Event } from '@polkadot/types/interfaces/system';
@@ -439,17 +439,59 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'VestingUpdated' | 'VestingCompleted';
   }
 
-  /** @name PalletCouncilRawEvent (61) */
+  /** @name PalletMultisigEvent (61) */
+  export interface PalletMultisigEvent extends Enum {
+    readonly isNewMultisig: boolean;
+    readonly asNewMultisig: {
+      readonly approving: AccountId32;
+      readonly multisig: AccountId32;
+      readonly callHash: U8aFixed;
+    } & Struct;
+    readonly isMultisigApproval: boolean;
+    readonly asMultisigApproval: {
+      readonly approving: AccountId32;
+      readonly timepoint: PalletMultisigTimepoint;
+      readonly multisig: AccountId32;
+      readonly callHash: U8aFixed;
+    } & Struct;
+    readonly isMultisigExecuted: boolean;
+    readonly asMultisigExecuted: {
+      readonly approving: AccountId32;
+      readonly timepoint: PalletMultisigTimepoint;
+      readonly multisig: AccountId32;
+      readonly callHash: U8aFixed;
+      readonly result: Result<Null, SpRuntimeDispatchError>;
+    } & Struct;
+    readonly isMultisigCancelled: boolean;
+    readonly asMultisigCancelled: {
+      readonly cancelling: AccountId32;
+      readonly timepoint: PalletMultisigTimepoint;
+      readonly multisig: AccountId32;
+      readonly callHash: U8aFixed;
+    } & Struct;
+    readonly type: 'NewMultisig' | 'MultisigApproval' | 'MultisigExecuted' | 'MultisigCancelled';
+  }
+
+  /** @name PalletMultisigTimepoint (62) */
+  export interface PalletMultisigTimepoint extends Struct {
+    readonly height: u32;
+    readonly index: u32;
+  }
+
+  /** @name PalletCouncilRawEvent (63) */
   export interface PalletCouncilRawEvent extends Enum {
     readonly isAnnouncingPeriodStarted: boolean;
+    readonly asAnnouncingPeriodStarted: u32;
     readonly isNotEnoughCandidates: boolean;
+    readonly asNotEnoughCandidates: u32;
     readonly isVotingPeriodStarted: boolean;
     readonly asVotingPeriodStarted: u64;
     readonly isNewCandidate: boolean;
     readonly asNewCandidate: ITuple<[u64, AccountId32, AccountId32, u128]>;
     readonly isNewCouncilElected: boolean;
-    readonly asNewCouncilElected: Vec<u64>;
+    readonly asNewCouncilElected: ITuple<[Vec<u64>, u32]>;
     readonly isNewCouncilNotElected: boolean;
+    readonly asNewCouncilNotElected: u32;
     readonly isCandidacyStakeRelease: boolean;
     readonly asCandidacyStakeRelease: u64;
     readonly isCandidacyWithdraw: boolean;
@@ -479,13 +521,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AnnouncingPeriodStarted' | 'NotEnoughCandidates' | 'VotingPeriodStarted' | 'NewCandidate' | 'NewCouncilElected' | 'NewCouncilNotElected' | 'CandidacyStakeRelease' | 'CandidacyWithdraw' | 'CandidacyNoteSet' | 'RewardPayment' | 'BudgetBalanceSet' | 'BudgetRefill' | 'BudgetRefillPlanned' | 'BudgetIncrementUpdated' | 'CouncilorRewardUpdated' | 'RequestFunded' | 'CouncilBudgetFunded' | 'CouncilorRemarked' | 'CandidateRemarked';
   }
 
-  /** @name PalletReferendumRawEvent (63) */
+  /** @name PalletReferendumRawEvent (65) */
   export interface PalletReferendumRawEvent extends Enum {
     readonly isReferendumStarted: boolean;
-    readonly asReferendumStarted: u64;
+    readonly asReferendumStarted: ITuple<[u64, u32]>;
     readonly isReferendumStartedForcefully: boolean;
-    readonly asReferendumStartedForcefully: u64;
+    readonly asReferendumStartedForcefully: ITuple<[u64, u32]>;
     readonly isRevealingStageStarted: boolean;
+    readonly asRevealingStageStarted: u32;
     readonly isReferendumFinished: boolean;
     readonly asReferendumFinished: Vec<PalletReferendumOptionResult>;
     readonly isVoteCast: boolean;
@@ -497,23 +540,23 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ReferendumStarted' | 'ReferendumStartedForcefully' | 'RevealingStageStarted' | 'ReferendumFinished' | 'VoteCast' | 'VoteRevealed' | 'StakeReleased';
   }
 
-  /** @name PalletReferendumInstance1 (64) */
+  /** @name PalletReferendumInstance1 (66) */
   export type PalletReferendumInstance1 = Null;
 
-  /** @name PalletReferendumOptionResult (66) */
+  /** @name PalletReferendumOptionResult (68) */
   export interface PalletReferendumOptionResult extends Struct {
     readonly optionId: u64;
     readonly votePower: u128;
   }
 
-  /** @name PalletMembershipRawEvent (67) */
+  /** @name PalletMembershipRawEvent (69) */
   export interface PalletMembershipRawEvent extends Enum {
     readonly isMemberInvited: boolean;
     readonly asMemberInvited: ITuple<[u64, PalletMembershipInviteMembershipParameters]>;
     readonly isMembershipGifted: boolean;
     readonly asMembershipGifted: ITuple<[u64, PalletMembershipGiftMembershipParameters]>;
     readonly isMembershipBought: boolean;
-    readonly asMembershipBought: ITuple<[u64, PalletMembershipBuyMembershipParameters]>;
+    readonly asMembershipBought: ITuple<[u64, PalletMembershipBuyMembershipParameters, u32]>;
     readonly isMemberProfileUpdated: boolean;
     readonly asMemberProfileUpdated: ITuple<[u64, Option<Bytes>, Option<Bytes>]>;
     readonly isMemberAccountsUpdated: boolean;
@@ -541,11 +584,11 @@ declare module '@polkadot/types/lookup' {
     readonly isMemberRemarked: boolean;
     readonly asMemberRemarked: ITuple<[u64, Bytes]>;
     readonly isFoundingMemberCreated: boolean;
-    readonly asFoundingMemberCreated: ITuple<[u64, PalletMembershipCreateFoundingMemberParameters]>;
+    readonly asFoundingMemberCreated: ITuple<[u64, PalletMembershipCreateFoundingMemberParameters, u32]>;
     readonly type: 'MemberInvited' | 'MembershipGifted' | 'MembershipBought' | 'MemberProfileUpdated' | 'MemberAccountsUpdated' | 'MemberVerificationStatusUpdated' | 'ReferralCutUpdated' | 'InvitesTransferred' | 'MembershipPriceUpdated' | 'InitialInvitationBalanceUpdated' | 'LeaderInvitationQuotaUpdated' | 'InitialInvitationCountUpdated' | 'StakingAccountAdded' | 'StakingAccountRemoved' | 'StakingAccountConfirmed' | 'MemberRemarked' | 'FoundingMemberCreated';
   }
 
-  /** @name PalletMembershipBuyMembershipParameters (68) */
+  /** @name PalletMembershipBuyMembershipParameters (70) */
   export interface PalletMembershipBuyMembershipParameters extends Struct {
     readonly rootAccount: AccountId32;
     readonly controllerAccount: AccountId32;
@@ -554,7 +597,7 @@ declare module '@polkadot/types/lookup' {
     readonly referrerId: Option<u64>;
   }
 
-  /** @name PalletMembershipInviteMembershipParameters (71) */
+  /** @name PalletMembershipInviteMembershipParameters (73) */
   export interface PalletMembershipInviteMembershipParameters extends Struct {
     readonly invitingMemberId: u64;
     readonly rootAccount: AccountId32;
@@ -563,7 +606,7 @@ declare module '@polkadot/types/lookup' {
     readonly metadata: Bytes;
   }
 
-  /** @name PalletMembershipCreateFoundingMemberParameters (72) */
+  /** @name PalletMembershipCreateFoundingMemberParameters (74) */
   export interface PalletMembershipCreateFoundingMemberParameters extends Struct {
     readonly rootAccount: AccountId32;
     readonly controllerAccount: AccountId32;
@@ -571,7 +614,7 @@ declare module '@polkadot/types/lookup' {
     readonly metadata: Bytes;
   }
 
-  /** @name PalletMembershipGiftMembershipParameters (73) */
+  /** @name PalletMembershipGiftMembershipParameters (75) */
   export interface PalletMembershipGiftMembershipParameters extends Struct {
     readonly rootAccount: AccountId32;
     readonly controllerAccount: AccountId32;
@@ -583,7 +626,7 @@ declare module '@polkadot/types/lookup' {
     readonly applyRootAccountInvitationLock: Option<u128>;
   }
 
-  /** @name PalletForumRawEvent (75) */
+  /** @name PalletForumRawEvent (77) */
   export interface PalletForumRawEvent extends Enum {
     readonly isCategoryCreated: boolean;
     readonly asCategoryCreated: ITuple<[u64, Option<u64>, Bytes, Bytes]>;
@@ -615,16 +658,14 @@ declare module '@polkadot/types/lookup' {
     readonly asPostDeleted: ITuple<[Bytes, u64, BTreeMap<PalletForumExtendedPostIdObject, bool>]>;
     readonly isPostTextUpdated: boolean;
     readonly asPostTextUpdated: ITuple<[u64, u64, u64, u64, Bytes]>;
-    readonly isPostReacted: boolean;
-    readonly asPostReacted: ITuple<[u64, u64, u64, u64, u64]>;
     readonly isCategoryStickyThreadUpdate: boolean;
     readonly asCategoryStickyThreadUpdate: ITuple<[u64, Vec<u64>, PalletForumPrivilegedActor]>;
     readonly isCategoryMembershipOfModeratorUpdated: boolean;
     readonly asCategoryMembershipOfModeratorUpdated: ITuple<[u64, u64, bool]>;
-    readonly type: 'CategoryCreated' | 'CategoryArchivalStatusUpdated' | 'CategoryTitleUpdated' | 'CategoryDescriptionUpdated' | 'CategoryDeleted' | 'ThreadCreated' | 'ThreadModerated' | 'ThreadUpdated' | 'ThreadMetadataUpdated' | 'ThreadDeleted' | 'ThreadMoved' | 'PostAdded' | 'PostModerated' | 'PostDeleted' | 'PostTextUpdated' | 'PostReacted' | 'CategoryStickyThreadUpdate' | 'CategoryMembershipOfModeratorUpdated';
+    readonly type: 'CategoryCreated' | 'CategoryArchivalStatusUpdated' | 'CategoryTitleUpdated' | 'CategoryDescriptionUpdated' | 'CategoryDeleted' | 'ThreadCreated' | 'ThreadModerated' | 'ThreadUpdated' | 'ThreadMetadataUpdated' | 'ThreadDeleted' | 'ThreadMoved' | 'PostAdded' | 'PostModerated' | 'PostDeleted' | 'PostTextUpdated' | 'CategoryStickyThreadUpdate' | 'CategoryMembershipOfModeratorUpdated';
   }
 
-  /** @name PalletForumPrivilegedActor (76) */
+  /** @name PalletForumPrivilegedActor (78) */
   export interface PalletForumPrivilegedActor extends Enum {
     readonly isLead: boolean;
     readonly isModerator: boolean;
@@ -632,21 +673,127 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Lead' | 'Moderator';
   }
 
-  /** @name PalletForumExtendedPostIdObject (77) */
+  /** @name PalletForumExtendedPostIdObject (79) */
   export interface PalletForumExtendedPostIdObject extends Struct {
     readonly categoryId: u64;
     readonly threadId: u64;
     readonly postId: u64;
   }
 
-  /** @name PalletConstitutionEvent (81) */
+  /** @name PalletConstitutionEvent (83) */
   export interface PalletConstitutionEvent extends Enum {
     readonly isConstutionAmended: boolean;
     readonly asConstutionAmended: ITuple<[Bytes, Bytes]>;
     readonly type: 'ConstutionAmended';
   }
 
-  /** @name PalletUtilityRawEvent (82) */
+  /** @name PalletBountyRawEvent (84) */
+  export interface PalletBountyRawEvent extends Enum {
+    readonly isBountyCreated: boolean;
+    readonly asBountyCreated: ITuple<[u64, PalletBountyBountyParameters, Bytes]>;
+    readonly isBountyOracleSwitched: boolean;
+    readonly asBountyOracleSwitched: ITuple<[u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+    readonly isBountyTerminated: boolean;
+    readonly asBountyTerminated: ITuple<[u64, PalletBountyBountyActor, PalletBountyBountyActor, PalletBountyBountyActor]>;
+    readonly isBountyFunded: boolean;
+    readonly asBountyFunded: ITuple<[u64, PalletBountyBountyActor, u128]>;
+    readonly isBountyMaxFundingReached: boolean;
+    readonly asBountyMaxFundingReached: u64;
+    readonly isBountyFundingWithdrawal: boolean;
+    readonly asBountyFundingWithdrawal: ITuple<[u64, PalletBountyBountyActor]>;
+    readonly isBountyCreatorCherryWithdrawal: boolean;
+    readonly asBountyCreatorCherryWithdrawal: ITuple<[u64, PalletBountyBountyActor]>;
+    readonly isBountyCreatorOracleRewardWithdrawal: boolean;
+    readonly asBountyCreatorOracleRewardWithdrawal: ITuple<[u64, PalletBountyBountyActor]>;
+    readonly isBountyOracleRewardWithdrawal: boolean;
+    readonly asBountyOracleRewardWithdrawal: ITuple<[u64, PalletBountyBountyActor, u128]>;
+    readonly isBountyRemoved: boolean;
+    readonly asBountyRemoved: u64;
+    readonly isWorkEntryAnnounced: boolean;
+    readonly asWorkEntryAnnounced: ITuple<[u64, u64, u64, AccountId32, Bytes]>;
+    readonly isWorkSubmitted: boolean;
+    readonly asWorkSubmitted: ITuple<[u64, u64, u64, Bytes]>;
+    readonly isOracleJudgmentSubmitted: boolean;
+    readonly asOracleJudgmentSubmitted: ITuple<[u64, PalletBountyBountyActor, BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>, Bytes]>;
+    readonly isWorkEntrantFundsWithdrawn: boolean;
+    readonly asWorkEntrantFundsWithdrawn: ITuple<[u64, u64, u64]>;
+    readonly isBountyContributorRemarked: boolean;
+    readonly asBountyContributorRemarked: ITuple<[PalletBountyBountyActor, u64, Bytes]>;
+    readonly isBountyOracleRemarked: boolean;
+    readonly asBountyOracleRemarked: ITuple<[PalletBountyBountyActor, u64, Bytes]>;
+    readonly isBountyEntrantRemarked: boolean;
+    readonly asBountyEntrantRemarked: ITuple<[u64, u64, u64, Bytes]>;
+    readonly isBountyCreatorRemarked: boolean;
+    readonly asBountyCreatorRemarked: ITuple<[PalletBountyBountyActor, u64, Bytes]>;
+    readonly isWorkSubmissionPeriodEnded: boolean;
+    readonly asWorkSubmissionPeriodEnded: ITuple<[u64, PalletBountyBountyActor]>;
+    readonly isWorkEntrantStakeUnlocked: boolean;
+    readonly asWorkEntrantStakeUnlocked: ITuple<[u64, u64, AccountId32]>;
+    readonly isWorkEntrantStakeSlashed: boolean;
+    readonly asWorkEntrantStakeSlashed: ITuple<[u64, u64, AccountId32, u128]>;
+    readonly isFunderStateBloatBondWithdrawn: boolean;
+    readonly asFunderStateBloatBondWithdrawn: ITuple<[u64, PalletBountyBountyActor, u128]>;
+    readonly isCreatorStateBloatBondWithdrawn: boolean;
+    readonly asCreatorStateBloatBondWithdrawn: ITuple<[u64, PalletBountyBountyActor, u128]>;
+    readonly type: 'BountyCreated' | 'BountyOracleSwitched' | 'BountyTerminated' | 'BountyFunded' | 'BountyMaxFundingReached' | 'BountyFundingWithdrawal' | 'BountyCreatorCherryWithdrawal' | 'BountyCreatorOracleRewardWithdrawal' | 'BountyOracleRewardWithdrawal' | 'BountyRemoved' | 'WorkEntryAnnounced' | 'WorkSubmitted' | 'OracleJudgmentSubmitted' | 'WorkEntrantFundsWithdrawn' | 'BountyContributorRemarked' | 'BountyOracleRemarked' | 'BountyEntrantRemarked' | 'BountyCreatorRemarked' | 'WorkSubmissionPeriodEnded' | 'WorkEntrantStakeUnlocked' | 'WorkEntrantStakeSlashed' | 'FunderStateBloatBondWithdrawn' | 'CreatorStateBloatBondWithdrawn';
+  }
+
+  /** @name PalletBountyBountyParameters (85) */
+  export interface PalletBountyBountyParameters extends Struct {
+    readonly oracle: PalletBountyBountyActor;
+    readonly contractType: PalletBountyAssuranceContractType;
+    readonly creator: PalletBountyBountyActor;
+    readonly cherry: u128;
+    readonly oracleReward: u128;
+    readonly entrantStake: u128;
+    readonly fundingType: PalletBountyFundingType;
+  }
+
+  /** @name PalletBountyBountyActor (86) */
+  export interface PalletBountyBountyActor extends Enum {
+    readonly isCouncil: boolean;
+    readonly isMember: boolean;
+    readonly asMember: u64;
+    readonly type: 'Council' | 'Member';
+  }
+
+  /** @name PalletBountyAssuranceContractType (87) */
+  export interface PalletBountyAssuranceContractType extends Enum {
+    readonly isOpen: boolean;
+    readonly isClosed: boolean;
+    readonly asClosed: BTreeSet<u64>;
+    readonly type: 'Open' | 'Closed';
+  }
+
+  /** @name PalletBountyFundingType (89) */
+  export interface PalletBountyFundingType extends Enum {
+    readonly isPerpetual: boolean;
+    readonly asPerpetual: {
+      readonly target: u128;
+    } & Struct;
+    readonly isLimited: boolean;
+    readonly asLimited: {
+      readonly target: u128;
+      readonly fundingPeriod: u32;
+    } & Struct;
+    readonly type: 'Perpetual' | 'Limited';
+  }
+
+  /** @name PalletBountyOracleWorkEntryJudgment (91) */
+  export interface PalletBountyOracleWorkEntryJudgment extends Enum {
+    readonly isWinner: boolean;
+    readonly asWinner: {
+      readonly reward: u128;
+    } & Struct;
+    readonly isRejected: boolean;
+    readonly asRejected: {
+      readonly slashingShare: Perbill;
+      readonly actionJustification: Bytes;
+    } & Struct;
+    readonly type: 'Winner' | 'Rejected';
+  }
+
+  /** @name PalletUtilityRawEvent (94) */
   export interface PalletUtilityRawEvent extends Enum {
     readonly isSignaled: boolean;
     readonly asSignaled: Bytes;
@@ -659,7 +806,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Signaled' | 'RuntimeUpgraded' | 'UpdatedWorkingGroupBudget' | 'TokensBurned';
   }
 
-  /** @name PalletCommonWorkingGroup (83) */
+  /** @name PalletCommonWorkingGroup (95) */
   export interface PalletCommonWorkingGroup extends Enum {
     readonly isForum: boolean;
     readonly isStorage: boolean;
@@ -673,14 +820,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Forum' | 'Storage' | 'Content' | 'OperationsAlpha' | 'Gateway' | 'Distribution' | 'OperationsBeta' | 'OperationsGamma' | 'Membership';
   }
 
-  /** @name PalletCommonBalanceKind (84) */
+  /** @name PalletCommonBalanceKind (96) */
   export interface PalletCommonBalanceKind extends Enum {
     readonly isPositive: boolean;
     readonly isNegative: boolean;
     readonly type: 'Positive' | 'Negative';
   }
 
-  /** @name PalletContentRawEvent (85) */
+  /** @name PalletContentRawEvent (97) */
   export interface PalletContentRawEvent extends Enum {
     readonly isCuratorGroupCreated: boolean;
     readonly asCuratorGroupCreated: u64;
@@ -783,7 +930,7 @@ declare module '@polkadot/types/lookup' {
     readonly isCancelChannelTransfer: boolean;
     readonly asCancelChannelTransfer: ITuple<[u64, PalletContentPermissionsContentActor]>;
     readonly isChannelTransferAccepted: boolean;
-    readonly asChannelTransferAccepted: ITuple<[u64, PalletContentTransferCommitmentParameters]>;
+    readonly asChannelTransferAccepted: ITuple<[u64, PalletContentTransferCommitmentParametersBTreeMap]>;
     readonly isGlobalNftLimitUpdated: boolean;
     readonly asGlobalNftLimitUpdated: ITuple<[PalletContentNftLimitPeriod, u64]>;
     readonly isChannelNftLimitUpdated: boolean;
@@ -795,7 +942,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'CuratorGroupCreated' | 'CuratorGroupPermissionsUpdated' | 'CuratorGroupStatusSet' | 'CuratorAdded' | 'CuratorRemoved' | 'ChannelCreated' | 'ChannelUpdated' | 'ChannelPrivilegeLevelUpdated' | 'ChannelStateBloatBondValueUpdated' | 'VideoStateBloatBondValueUpdated' | 'ChannelAssetsRemoved' | 'ChannelDeleted' | 'ChannelDeletedByModerator' | 'ChannelVisibilitySetByModerator' | 'ChannelPausedFeaturesUpdatedByModerator' | 'ChannelAssetsDeletedByModerator' | 'ChannelFundsWithdrawn' | 'ChannelRewardClaimedAndWithdrawn' | 'VideoCreated' | 'VideoUpdated' | 'VideoDeleted' | 'VideoDeletedByModerator' | 'VideoVisibilitySetByModerator' | 'VideoAssetsDeletedByModerator' | 'ChannelPayoutsUpdated' | 'ChannelRewardUpdated' | 'CouncilRewardClaimed' | 'EnglishAuctionStarted' | 'OpenAuctionStarted' | 'NftIssued' | 'NftDestroyed' | 'AuctionBidMade' | 'AuctionBidCanceled' | 'AuctionCanceled' | 'EnglishAuctionSettled' | 'BidMadeCompletingAuction' | 'OpenAuctionBidAccepted' | 'OfferStarted' | 'OfferAccepted' | 'OfferCanceled' | 'NftSellOrderMade' | 'NftBought' | 'BuyNowCanceled' | 'BuyNowPriceUpdated' | 'NftSlingedBackToTheOriginalArtist' | 'ChannelOwnerRemarked' | 'ChannelAgentRemarked' | 'NftOwnerRemarked' | 'InitializedChannelTransfer' | 'CancelChannelTransfer' | 'ChannelTransferAccepted' | 'GlobalNftLimitUpdated' | 'ChannelNftLimitUpdated' | 'ToggledNftLimits' | 'CreatorTokenIssued';
   }
 
-  /** @name PalletContentPermissionsContentActor (86) */
+  /** @name PalletContentPermissionsContentActor (98) */
   export interface PalletContentPermissionsContentActor extends Enum {
     readonly isCurator: boolean;
     readonly asCurator: ITuple<[u64, u64]>;
@@ -805,7 +952,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Curator' | 'Member' | 'Lead';
   }
 
-  /** @name PalletContentChannelRecord (87) */
+  /** @name PalletContentChannelRecord (99) */
   export interface PalletContentChannelRecord extends Struct {
     readonly owner: PalletContentChannelOwner;
     readonly numVideos: u64;
@@ -820,19 +967,10 @@ declare module '@polkadot/types/lookup' {
     readonly dailyNftCounter: PalletContentNftCounter;
     readonly weeklyNftCounter: PalletContentNftCounter;
     readonly creatorTokenId: Option<u64>;
-    readonly channelStateBloatBond: u128;
+    readonly channelStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
   }
 
-  /** @name PalletContentChannelOwner (88) */
-  export interface PalletContentChannelOwner extends Enum {
-    readonly isMember: boolean;
-    readonly asMember: u64;
-    readonly isCuratorGroup: boolean;
-    readonly asCuratorGroup: u64;
-    readonly type: 'Member' | 'CuratorGroup';
-  }
-
-  /** @name PalletContentChannelActionPermission (91) */
+  /** @name PalletContentChannelActionPermission (103) */
   export interface PalletContentChannelActionPermission extends Enum {
     readonly isUpdateChannelMetadata: boolean;
     readonly isManageNonVideoChannelAssets: boolean;
@@ -858,7 +996,22 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'UpdateChannelMetadata' | 'ManageNonVideoChannelAssets' | 'ManageChannelCollaborators' | 'UpdateVideoMetadata' | 'AddVideo' | 'ManageVideoAssets' | 'DeleteChannel' | 'DeleteVideo' | 'ManageVideoNfts' | 'AgentRemark' | 'TransferChannel' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'IssueCreatorToken' | 'ClaimCreatorTokenPatronage' | 'InitAndManageCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRate' | 'ManageRevenueSplits' | 'DeissueCreatorToken';
   }
 
-  /** @name PalletContentPermissionsCuratorGroupPausableChannelFeature (96) */
+  /** @name PalletCommonBloatBondRepayableBloatBond (108) */
+  export interface PalletCommonBloatBondRepayableBloatBond extends Struct {
+    readonly repaymentRestrictedTo: Option<AccountId32>;
+    readonly amount: u128;
+  }
+
+  /** @name PalletContentChannelOwner (109) */
+  export interface PalletContentChannelOwner extends Enum {
+    readonly isMember: boolean;
+    readonly asMember: u64;
+    readonly isCuratorGroup: boolean;
+    readonly asCuratorGroup: u64;
+    readonly type: 'Member' | 'CuratorGroup';
+  }
+
+  /** @name PalletContentPermissionsCuratorGroupPausableChannelFeature (111) */
   export interface PalletContentPermissionsCuratorGroupPausableChannelFeature extends Enum {
     readonly isChannelFundsTransfer: boolean;
     readonly isCreatorCashout: boolean;
@@ -870,7 +1023,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ChannelFundsTransfer' | 'CreatorCashout' | 'VideoNftIssuance' | 'VideoCreation' | 'VideoUpdate' | 'ChannelUpdate' | 'CreatorTokenIssuance';
   }
 
-  /** @name PalletContentChannelTransferStatus (98) */
+  /** @name PalletContentChannelTransferStatus (113) */
   export interface PalletContentChannelTransferStatus extends Enum {
     readonly isNoActiveTransfer: boolean;
     readonly isPendingTransfer: boolean;
@@ -878,32 +1031,32 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NoActiveTransfer' | 'PendingTransfer';
   }
 
-  /** @name PalletContentPendingTransfer (99) */
+  /** @name PalletContentPendingTransfer (114) */
   export interface PalletContentPendingTransfer extends Struct {
     readonly newOwner: PalletContentChannelOwner;
-    readonly transferParams: PalletContentTransferCommitmentParameters;
+    readonly transferParams: PalletContentTransferCommitmentParametersBoundedBTreeMap;
   }
 
-  /** @name PalletContentTransferCommitmentParameters (100) */
-  export interface PalletContentTransferCommitmentParameters extends Struct {
+  /** @name PalletContentTransferCommitmentParametersBoundedBTreeMap (115) */
+  export interface PalletContentTransferCommitmentParametersBoundedBTreeMap extends Struct {
     readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>;
     readonly price: u128;
     readonly transferId: u64;
   }
 
-  /** @name PalletContentLimitPerPeriod (102) */
+  /** @name PalletContentLimitPerPeriod (116) */
   export interface PalletContentLimitPerPeriod extends Struct {
     readonly limit: u64;
     readonly blockNumberPeriod: u32;
   }
 
-  /** @name PalletContentNftCounter (103) */
+  /** @name PalletContentNftCounter (117) */
   export interface PalletContentNftCounter extends Struct {
     readonly counter: u64;
     readonly lastUpdated: u32;
   }
 
-  /** @name PalletContentNftTypesEnglishAuctionParamsRecord (104) */
+  /** @name PalletContentNftTypesEnglishAuctionParamsRecord (118) */
   export interface PalletContentNftTypesEnglishAuctionParamsRecord extends Struct {
     readonly startingPrice: u128;
     readonly buyNowPrice: Option<u128>;
@@ -914,7 +1067,7 @@ declare module '@polkadot/types/lookup' {
     readonly minBidStep: u128;
   }
 
-  /** @name PalletContentNftTypesOpenAuctionParamsRecord (106) */
+  /** @name PalletContentNftTypesOpenAuctionParamsRecord (120) */
   export interface PalletContentNftTypesOpenAuctionParamsRecord extends Struct {
     readonly startingPrice: u128;
     readonly buyNowPrice: Option<u128>;
@@ -923,7 +1076,7 @@ declare module '@polkadot/types/lookup' {
     readonly bidLockDuration: u32;
   }
 
-  /** @name PalletContentNftTypesNftIssuanceParametersRecord (107) */
+  /** @name PalletContentNftTypesNftIssuanceParametersRecord (121) */
   export interface PalletContentNftTypesNftIssuanceParametersRecord extends Struct {
     readonly royalty: Option<Perbill>;
     readonly nftMetadata: Bytes;
@@ -931,7 +1084,7 @@ declare module '@polkadot/types/lookup' {
     readonly initTransactionalStatus: PalletContentNftTypesInitTransactionalStatusRecord;
   }
 
-  /** @name PalletContentNftTypesInitTransactionalStatusRecord (108) */
+  /** @name PalletContentNftTypesInitTransactionalStatusRecord (122) */
   export interface PalletContentNftTypesInitTransactionalStatusRecord extends Enum {
     readonly isIdle: boolean;
     readonly isBuyNow: boolean;
@@ -945,7 +1098,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Idle' | 'BuyNow' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction';
   }
 
-  /** @name PalletContentChannelCreationParametersRecord (110) */
+  /** @name PalletContentChannelCreationParametersRecord (124) */
   export interface PalletContentChannelCreationParametersRecord extends Struct {
     readonly assets: Option<PalletContentStorageAssetsRecord>;
     readonly meta: Option<Bytes>;
@@ -956,52 +1109,55 @@ declare module '@polkadot/types/lookup' {
     readonly expectedDataObjectStateBloatBond: u128;
   }
 
-  /** @name PalletContentStorageAssetsRecord (111) */
+  /** @name PalletContentStorageAssetsRecord (125) */
   export interface PalletContentStorageAssetsRecord extends Struct {
     readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
     readonly expectedDataSizeFee: u128;
   }
 
-  /** @name PalletStorageDataObjectCreationParameters (113) */
+  /** @name PalletStorageDataObjectCreationParameters (127) */
   export interface PalletStorageDataObjectCreationParameters extends Struct {
     readonly size_: u64;
     readonly ipfsContentId: Bytes;
   }
 
-  /** @name PalletStorageDistributionBucketIdRecord (114) */
+  /** @name PalletStorageDistributionBucketIdRecord (128) */
   export interface PalletStorageDistributionBucketIdRecord extends Struct {
     readonly distributionBucketFamilyId: u64;
     readonly distributionBucketIndex: u64;
   }
 
-  /** @name PalletContentChannelUpdateParametersRecord (118) */
+  /** @name PalletContentChannelUpdateParametersRecord (132) */
   export interface PalletContentChannelUpdateParametersRecord extends Struct {
     readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
     readonly newMeta: Option<Bytes>;
     readonly assetsToRemove: BTreeSet<u64>;
     readonly collaborators: Option<BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>>;
     readonly expectedDataObjectStateBloatBond: u128;
+    readonly storageBucketsNumWitness: Option<u32>;
   }
 
-  /** @name PalletContentVideoCreationParametersRecord (120) */
+  /** @name PalletContentVideoCreationParametersRecord (134) */
   export interface PalletContentVideoCreationParametersRecord extends Struct {
     readonly assets: Option<PalletContentStorageAssetsRecord>;
     readonly meta: Option<Bytes>;
     readonly autoIssueNft: Option<PalletContentNftTypesNftIssuanceParametersRecord>;
     readonly expectedVideoStateBloatBond: u128;
     readonly expectedDataObjectStateBloatBond: u128;
+    readonly storageBucketsNumWitness: u32;
   }
 
-  /** @name PalletContentVideoUpdateParametersRecord (122) */
+  /** @name PalletContentVideoUpdateParametersRecord (136) */
   export interface PalletContentVideoUpdateParametersRecord extends Struct {
     readonly assetsToUpload: Option<PalletContentStorageAssetsRecord>;
     readonly newMeta: Option<Bytes>;
     readonly assetsToRemove: BTreeSet<u64>;
     readonly autoIssueNft: Option<PalletContentNftTypesNftIssuanceParametersRecord>;
     readonly expectedDataObjectStateBloatBond: u128;
+    readonly storageBucketsNumWitness: Option<u32>;
   }
 
-  /** @name PalletContentPermissionsCuratorGroupContentModerationAction (125) */
+  /** @name PalletContentPermissionsCuratorGroupContentModerationAction (139) */
   export interface PalletContentPermissionsCuratorGroupContentModerationAction extends Enum {
     readonly isHideVideo: boolean;
     readonly isHideChannel: boolean;
@@ -1016,7 +1172,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'HideVideo' | 'HideChannel' | 'ChangeChannelFeatureStatus' | 'DeleteVideo' | 'DeleteChannel' | 'DeleteVideoAssets' | 'DeleteNonVideoChannelAssets' | 'UpdateChannelNftLimits';
   }
 
-  /** @name PalletContentUpdateChannelPayoutsParametersRecord (129) */
+  /** @name PalletContentTransferCommitmentParametersBTreeMap (143) */
+  export interface PalletContentTransferCommitmentParametersBTreeMap extends Struct {
+    readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>;
+    readonly price: u128;
+    readonly transferId: u64;
+  }
+
+  /** @name PalletContentUpdateChannelPayoutsParametersRecord (144) */
   export interface PalletContentUpdateChannelPayoutsParametersRecord extends Struct {
     readonly commitment: Option<H256>;
     readonly payload: Option<PalletContentChannelPayoutsPayloadParametersRecord>;
@@ -1025,7 +1188,7 @@ declare module '@polkadot/types/lookup' {
     readonly channelCashoutsEnabled: Option<bool>;
   }
 
-  /** @name PalletContentChannelPayoutsPayloadParametersRecord (130) */
+  /** @name PalletContentChannelPayoutsPayloadParametersRecord (145) */
   export interface PalletContentChannelPayoutsPayloadParametersRecord extends Struct {
     readonly uploaderAccount: AccountId32;
     readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
@@ -1033,7 +1196,7 @@ declare module '@polkadot/types/lookup' {
     readonly expectedDataObjectStateBloatBond: u128;
   }
 
-  /** @name PalletContentChannelFundsDestination (134) */
+  /** @name PalletContentChannelFundsDestination (149) */
   export interface PalletContentChannelFundsDestination extends Enum {
     readonly isAccountId: boolean;
     readonly asAccountId: AccountId32;
@@ -1041,14 +1204,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AccountId' | 'CouncilBudget';
   }
 
-  /** @name PalletContentNftLimitPeriod (135) */
+  /** @name PalletContentNftLimitPeriod (150) */
   export interface PalletContentNftLimitPeriod extends Enum {
     readonly isDaily: boolean;
     readonly isWeekly: boolean;
     readonly type: 'Daily' | 'Weekly';
   }
 
-  /** @name PalletStorageRawEvent (136) */
+  /** @name PalletStorageRawEvent (151) */
   export interface PalletStorageRawEvent extends Enum {
     readonly isStorageBucketCreated: boolean;
     readonly asStorageBucketCreated: ITuple<[u64, Option<u64>, bool, u64, u64]>;
@@ -1057,7 +1220,7 @@ declare module '@polkadot/types/lookup' {
     readonly isStorageBucketsUpdatedForBag: boolean;
     readonly asStorageBucketsUpdatedForBag: ITuple<[PalletStorageBagIdType, BTreeSet<u64>, BTreeSet<u64>]>;
     readonly isDataObjectsUploaded: boolean;
-    readonly asDataObjectsUploaded: ITuple<[Vec<u64>, PalletStorageUploadParametersRecord, u128]>;
+    readonly asDataObjectsUploaded: ITuple<[BTreeSet<u64>, PalletStorageUploadParametersRecord, u128]>;
     readonly isStorageOperatorMetadataSet: boolean;
     readonly asStorageOperatorMetadataSet: ITuple<[u64, u64, Bytes]>;
     readonly isStorageBucketVoucherLimitsSet: boolean;
@@ -1087,17 +1250,15 @@ declare module '@polkadot/types/lookup' {
     readonly isUpdateBlacklist: boolean;
     readonly asUpdateBlacklist: ITuple<[BTreeSet<Bytes>, BTreeSet<Bytes>]>;
     readonly isDynamicBagDeleted: boolean;
-    readonly asDynamicBagDeleted: ITuple<[AccountId32, PalletStorageDynamicBagIdType]>;
+    readonly asDynamicBagDeleted: PalletStorageDynamicBagIdType;
     readonly isDynamicBagCreated: boolean;
-    readonly asDynamicBagCreated: ITuple<[PalletStorageDynamicBagIdType, BTreeSet<u64>, BTreeSet<PalletStorageDistributionBucketIdRecord>]>;
+    readonly asDynamicBagCreated: ITuple<[PalletStorageDynBagCreationParametersRecord, BTreeSet<u64>]>;
     readonly isVoucherChanged: boolean;
     readonly asVoucherChanged: ITuple<[u64, PalletStorageVoucher]>;
     readonly isStorageBucketDeleted: boolean;
     readonly asStorageBucketDeleted: u64;
     readonly isNumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: boolean;
     readonly asNumberOfStorageBucketsInDynamicBagCreationPolicyUpdated: ITuple<[PalletStorageDynamicBagType, u64]>;
-    readonly isBagObjectsChanged: boolean;
-    readonly asBagObjectsChanged: ITuple<[PalletStorageBagIdType, u64, u64]>;
     readonly isDistributionBucketFamilyCreated: boolean;
     readonly asDistributionBucketFamilyCreated: u64;
     readonly isDistributionBucketFamilyDeleted: boolean;
@@ -1131,15 +1292,15 @@ declare module '@polkadot/types/lookup' {
     readonly isDataObjectStateBloatBondValueUpdated: boolean;
     readonly asDataObjectStateBloatBondValueUpdated: u128;
     readonly isDataObjectsUpdated: boolean;
-    readonly asDataObjectsUpdated: ITuple<[PalletStorageUploadParametersRecord, BTreeSet<u64>]>;
+    readonly asDataObjectsUpdated: ITuple<[PalletStorageUploadParametersRecord, BTreeSet<u64>, BTreeSet<u64>]>;
     readonly isStorageOperatorRemarked: boolean;
     readonly asStorageOperatorRemarked: ITuple<[u64, u64, Bytes]>;
     readonly isDistributionOperatorRemarked: boolean;
     readonly asDistributionOperatorRemarked: ITuple<[u64, PalletStorageDistributionBucketIdRecord, Bytes]>;
-    readonly type: 'StorageBucketCreated' | 'StorageBucketInvitationAccepted' | 'StorageBucketsUpdatedForBag' | 'DataObjectsUploaded' | 'StorageOperatorMetadataSet' | 'StorageBucketVoucherLimitsSet' | 'PendingDataObjectsAccepted' | 'StorageBucketInvitationCancelled' | 'StorageBucketOperatorInvited' | 'StorageBucketOperatorRemoved' | 'UploadingBlockStatusUpdated' | 'DataObjectPerMegabyteFeeUpdated' | 'StorageBucketsPerBagLimitUpdated' | 'StorageBucketsVoucherMaxLimitsUpdated' | 'DataObjectsMoved' | 'DataObjectsDeleted' | 'StorageBucketStatusUpdated' | 'UpdateBlacklist' | 'DynamicBagDeleted' | 'DynamicBagCreated' | 'VoucherChanged' | 'StorageBucketDeleted' | 'NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated' | 'BagObjectsChanged' | 'DistributionBucketFamilyCreated' | 'DistributionBucketFamilyDeleted' | 'DistributionBucketCreated' | 'DistributionBucketStatusUpdated' | 'DistributionBucketDeleted' | 'DistributionBucketsUpdatedForBag' | 'DistributionBucketsPerBagLimitUpdated' | 'DistributionBucketModeUpdated' | 'FamiliesInDynamicBagCreationPolicyUpdated' | 'DistributionBucketOperatorInvited' | 'DistributionBucketInvitationCancelled' | 'DistributionBucketInvitationAccepted' | 'DistributionBucketMetadataSet' | 'DistributionBucketOperatorRemoved' | 'DistributionBucketFamilyMetadataSet' | 'DataObjectStateBloatBondValueUpdated' | 'DataObjectsUpdated' | 'StorageOperatorRemarked' | 'DistributionOperatorRemarked';
+    readonly type: 'StorageBucketCreated' | 'StorageBucketInvitationAccepted' | 'StorageBucketsUpdatedForBag' | 'DataObjectsUploaded' | 'StorageOperatorMetadataSet' | 'StorageBucketVoucherLimitsSet' | 'PendingDataObjectsAccepted' | 'StorageBucketInvitationCancelled' | 'StorageBucketOperatorInvited' | 'StorageBucketOperatorRemoved' | 'UploadingBlockStatusUpdated' | 'DataObjectPerMegabyteFeeUpdated' | 'StorageBucketsPerBagLimitUpdated' | 'StorageBucketsVoucherMaxLimitsUpdated' | 'DataObjectsMoved' | 'DataObjectsDeleted' | 'StorageBucketStatusUpdated' | 'UpdateBlacklist' | 'DynamicBagDeleted' | 'DynamicBagCreated' | 'VoucherChanged' | 'StorageBucketDeleted' | 'NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated' | 'DistributionBucketFamilyCreated' | 'DistributionBucketFamilyDeleted' | 'DistributionBucketCreated' | 'DistributionBucketStatusUpdated' | 'DistributionBucketDeleted' | 'DistributionBucketsUpdatedForBag' | 'DistributionBucketsPerBagLimitUpdated' | 'DistributionBucketModeUpdated' | 'FamiliesInDynamicBagCreationPolicyUpdated' | 'DistributionBucketOperatorInvited' | 'DistributionBucketInvitationCancelled' | 'DistributionBucketInvitationAccepted' | 'DistributionBucketMetadataSet' | 'DistributionBucketOperatorRemoved' | 'DistributionBucketFamilyMetadataSet' | 'DataObjectStateBloatBondValueUpdated' | 'DataObjectsUpdated' | 'StorageOperatorRemarked' | 'DistributionOperatorRemarked';
   }
 
-  /** @name PalletStorageUploadParametersRecord (137) */
+  /** @name PalletStorageUploadParametersRecord (152) */
   export interface PalletStorageUploadParametersRecord extends Struct {
     readonly bagId: PalletStorageBagIdType;
     readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
@@ -1148,7 +1309,7 @@ declare module '@polkadot/types/lookup' {
     readonly expectedDataObjectStateBloatBond: u128;
   }
 
-  /** @name PalletStorageBagIdType (138) */
+  /** @name PalletStorageBagIdType (153) */
   export interface PalletStorageBagIdType extends Enum {
     readonly isStatic: boolean;
     readonly asStatic: PalletStorageStaticBagId;
@@ -1157,7 +1318,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Static' | 'Dynamic';
   }
 
-  /** @name PalletStorageStaticBagId (139) */
+  /** @name PalletStorageStaticBagId (154) */
   export interface PalletStorageStaticBagId extends Enum {
     readonly isCouncil: boolean;
     readonly isWorkingGroup: boolean;
@@ -1165,7 +1326,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Council' | 'WorkingGroup';
   }
 
-  /** @name PalletStorageDynamicBagIdType (140) */
+  /** @name PalletStorageDynamicBagIdType (155) */
   export interface PalletStorageDynamicBagIdType extends Enum {
     readonly isMember: boolean;
     readonly asMember: u64;
@@ -1174,7 +1335,18 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Member' | 'Channel';
   }
 
-  /** @name PalletStorageVoucher (143) */
+  /** @name PalletStorageDynBagCreationParametersRecord (156) */
+  export interface PalletStorageDynBagCreationParametersRecord extends Struct {
+    readonly bagId: PalletStorageDynamicBagIdType;
+    readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
+    readonly stateBloatBondSourceAccountId: AccountId32;
+    readonly expectedDataSizeFee: u128;
+    readonly expectedDataObjectStateBloatBond: u128;
+    readonly storageBuckets: BTreeSet<u64>;
+    readonly distributionBuckets: BTreeSet<PalletStorageDistributionBucketIdRecord>;
+  }
+
+  /** @name PalletStorageVoucher (159) */
   export interface PalletStorageVoucher extends Struct {
     readonly sizeLimit: u64;
     readonly objectsLimit: u64;
@@ -1182,19 +1354,19 @@ declare module '@polkadot/types/lookup' {
     readonly objectsUsed: u64;
   }
 
-  /** @name PalletStorageDynamicBagType (144) */
+  /** @name PalletStorageDynamicBagType (160) */
   export interface PalletStorageDynamicBagType extends Enum {
     readonly isMember: boolean;
     readonly isChannel: boolean;
     readonly type: 'Member' | 'Channel';
   }
 
-  /** @name PalletProjectTokenEventsRawEvent (148) */
+  /** @name PalletProjectTokenEventsRawEvent (164) */
   export interface PalletProjectTokenEventsRawEvent extends Enum {
     readonly isTokenAmountTransferred: boolean;
-    readonly asTokenAmountTransferred: ITuple<[u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>]>;
+    readonly asTokenAmountTransferred: ITuple<[u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
     readonly isTokenAmountTransferredByIssuer: boolean;
-    readonly asTokenAmountTransferredByIssuer: ITuple<[u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>]>;
+    readonly asTokenAmountTransferredByIssuer: ITuple<[u64, u64, BTreeMap<PalletProjectTokenValidated, PalletProjectTokenValidatedPayment>, Bytes]>;
     readonly isPatronageRateDecreasedTo: boolean;
     readonly asPatronageRateDecreasedTo: ITuple<[u64, Perquintill]>;
     readonly isPatronageCreditClaimed: boolean;
@@ -1230,7 +1402,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'TokenAmountTransferred' | 'TokenAmountTransferredByIssuer' | 'PatronageRateDecreasedTo' | 'PatronageCreditClaimed' | 'RevenueSplitIssued' | 'RevenueSplitFinalized' | 'UserParticipatedInSplit' | 'RevenueSplitLeft' | 'MemberJoinedWhitelist' | 'AccountDustedBy' | 'TokenDeissued' | 'TokenIssued' | 'TokenSaleInitialized' | 'UpcomingTokenSaleUpdated' | 'TokensPurchasedOnSale' | 'TokenSaleFinalized' | 'TransferPolicyChangedToPermissionless' | 'TokensBurned';
   }
 
-  /** @name PalletProjectTokenTransferPolicy (149) */
+  /** @name PalletProjectTokenTransferPolicy (165) */
   export interface PalletProjectTokenTransferPolicy extends Enum {
     readonly isPermissionless: boolean;
     readonly isPermissioned: boolean;
@@ -1238,7 +1410,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Permissionless' | 'Permissioned';
   }
 
-  /** @name PalletProjectTokenTokenIssuanceParameters (150) */
+  /** @name PalletProjectTokenTokenIssuanceParameters (166) */
   export interface PalletProjectTokenTokenIssuanceParameters extends Struct {
     readonly initialAllocation: BTreeMap<u64, PalletProjectTokenTokenAllocation>;
     readonly symbol: H256;
@@ -1247,20 +1419,20 @@ declare module '@polkadot/types/lookup' {
     readonly revenueSplitRate: Permill;
   }
 
-  /** @name PalletProjectTokenTokenAllocation (151) */
+  /** @name PalletProjectTokenTokenAllocation (167) */
   export interface PalletProjectTokenTokenAllocation extends Struct {
     readonly amount: u128;
     readonly vestingScheduleParams: Option<PalletProjectTokenVestingScheduleParams>;
   }
 
-  /** @name PalletProjectTokenVestingScheduleParams (152) */
+  /** @name PalletProjectTokenVestingScheduleParams (168) */
   export interface PalletProjectTokenVestingScheduleParams extends Struct {
     readonly linearVestingDuration: u32;
     readonly blocksBeforeCliff: u32;
     readonly cliffAmountPercentage: Permill;
   }
 
-  /** @name PalletProjectTokenTransferPolicyParams (155) */
+  /** @name PalletProjectTokenTransferPolicyParams (171) */
   export interface PalletProjectTokenTransferPolicyParams extends Enum {
     readonly isPermissionless: boolean;
     readonly isPermissioned: boolean;
@@ -1268,20 +1440,20 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Permissionless' | 'Permissioned';
   }
 
-  /** @name PalletProjectTokenWhitelistParams (156) */
+  /** @name PalletProjectTokenWhitelistParams (172) */
   export interface PalletProjectTokenWhitelistParams extends Struct {
     readonly commitment: H256;
     readonly payload: Option<PalletProjectTokenSingleDataObjectUploadParams>;
   }
 
-  /** @name PalletProjectTokenSingleDataObjectUploadParams (157) */
+  /** @name PalletProjectTokenSingleDataObjectUploadParams (173) */
   export interface PalletProjectTokenSingleDataObjectUploadParams extends Struct {
     readonly objectCreationParams: PalletStorageDataObjectCreationParameters;
     readonly expectedDataSizeFee: u128;
     readonly expectedDataObjectStateBloatBond: u128;
   }
 
-  /** @name PalletProjectTokenValidated (164) */
+  /** @name PalletProjectTokenValidated (180) */
   export interface PalletProjectTokenValidated extends Enum {
     readonly isExisting: boolean;
     readonly asExisting: u64;
@@ -1290,20 +1462,19 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Existing' | 'NonExisting';
   }
 
-  /** @name PalletProjectTokenValidatedPayment (165) */
+  /** @name PalletProjectTokenValidatedPayment (181) */
   export interface PalletProjectTokenValidatedPayment extends Struct {
     readonly payment: PalletProjectTokenPaymentWithVesting;
     readonly vestingCleanupCandidate: Option<PalletProjectTokenVestingSource>;
   }
 
-  /** @name PalletProjectTokenPaymentWithVesting (166) */
+  /** @name PalletProjectTokenPaymentWithVesting (182) */
   export interface PalletProjectTokenPaymentWithVesting extends Struct {
-    readonly remark: Bytes;
     readonly amount: u128;
     readonly vestingSchedule: Option<PalletProjectTokenVestingScheduleParams>;
   }
 
-  /** @name PalletProjectTokenVestingSource (168) */
+  /** @name PalletProjectTokenVestingSource (184) */
   export interface PalletProjectTokenVestingSource extends Enum {
     readonly isInitialIssuance: boolean;
     readonly isSale: boolean;
@@ -1313,7 +1484,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InitialIssuance' | 'Sale' | 'IssuerTransfer';
   }
 
-  /** @name PalletProjectTokenTokenSale (172) */
+  /** @name PalletProjectTokenTokenSale (188) */
   export interface PalletProjectTokenTokenSale extends Struct {
     readonly unitPrice: u128;
     readonly quantityLeft: u128;
@@ -1327,7 +1498,7 @@ declare module '@polkadot/types/lookup' {
     readonly autoFinalize: bool;
   }
 
-  /** @name PalletProposalsEngineRawEvent (174) */
+  /** @name PalletProposalsEngineRawEvent (190) */
   export interface PalletProposalsEngineRawEvent extends Enum {
     readonly isProposalStatusUpdated: boolean;
     readonly asProposalStatusUpdated: ITuple<[u32, PalletProposalsEngineProposalStatusesProposalStatus]>;
@@ -1344,7 +1515,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ProposalStatusUpdated' | 'ProposalDecisionMade' | 'ProposalExecuted' | 'Voted' | 'ProposalCancelled' | 'ProposerRemarked';
   }
 
-  /** @name PalletProposalsEngineProposalStatusesProposalStatus (175) */
+  /** @name PalletProposalsEngineProposalStatusesProposalStatus (191) */
   export interface PalletProposalsEngineProposalStatusesProposalStatus extends Enum {
     readonly isActive: boolean;
     readonly isPendingExecution: boolean;
@@ -1353,7 +1524,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Active' | 'PendingExecution' | 'PendingConstitutionality';
   }
 
-  /** @name PalletProposalsEngineProposalStatusesProposalDecision (176) */
+  /** @name PalletProposalsEngineProposalStatusesProposalDecision (192) */
   export interface PalletProposalsEngineProposalStatusesProposalDecision extends Enum {
     readonly isCanceled: boolean;
     readonly isCanceledByRuntime: boolean;
@@ -1366,14 +1537,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Canceled' | 'CanceledByRuntime' | 'Vetoed' | 'Rejected' | 'Slashed' | 'Expired' | 'Approved';
   }
 
-  /** @name PalletProposalsEngineProposalStatusesApprovedProposalDecision (177) */
+  /** @name PalletProposalsEngineProposalStatusesApprovedProposalDecision (193) */
   export interface PalletProposalsEngineProposalStatusesApprovedProposalDecision extends Enum {
     readonly isPendingExecution: boolean;
     readonly isPendingConstitutionality: boolean;
     readonly type: 'PendingExecution' | 'PendingConstitutionality';
   }
 
-  /** @name PalletProposalsEngineProposalStatusesExecutionStatus (178) */
+  /** @name PalletProposalsEngineProposalStatusesExecutionStatus (194) */
   export interface PalletProposalsEngineProposalStatusesExecutionStatus extends Enum {
     readonly isExecuted: boolean;
     readonly isExecutionFailed: boolean;
@@ -1383,7 +1554,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Executed' | 'ExecutionFailed';
   }
 
-  /** @name PalletProposalsEngineVoteKind (179) */
+  /** @name PalletProposalsEngineVoteKind (195) */
   export interface PalletProposalsEngineVoteKind extends Enum {
     readonly isApprove: boolean;
     readonly isReject: boolean;
@@ -1392,7 +1563,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Approve' | 'Reject' | 'Slash' | 'Abstain';
   }
 
-  /** @name PalletProposalsDiscussionRawEvent (180) */
+  /** @name PalletProposalsDiscussionRawEvent (196) */
   export interface PalletProposalsDiscussionRawEvent extends Enum {
     readonly isThreadCreated: boolean;
     readonly asThreadCreated: ITuple<[u64, u64]>;
@@ -1407,7 +1578,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ThreadCreated' | 'PostCreated' | 'PostUpdated' | 'ThreadModeChanged' | 'PostDeleted';
   }
 
-  /** @name PalletProposalsDiscussionThreadMode (181) */
+  /** @name PalletProposalsDiscussionThreadMode (197) */
   export interface PalletProposalsDiscussionThreadMode extends Enum {
     readonly isOpen: boolean;
     readonly isClosed: boolean;
@@ -1415,14 +1586,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Open' | 'Closed';
   }
 
-  /** @name PalletProposalsCodexRawEvent (182) */
+  /** @name PalletProposalsCodexRawEvent (198) */
   export interface PalletProposalsCodexRawEvent extends Enum {
     readonly isProposalCreated: boolean;
     readonly asProposalCreated: ITuple<[u32, PalletProposalsCodexGeneralProposalParams, PalletProposalsCodexProposalDetails, u64]>;
     readonly type: 'ProposalCreated';
   }
 
-  /** @name PalletProposalsCodexGeneralProposalParams (183) */
+  /** @name PalletProposalsCodexGeneralProposalParams (199) */
   export interface PalletProposalsCodexGeneralProposalParams extends Struct {
     readonly memberId: u64;
     readonly title: Bytes;
@@ -1431,7 +1602,7 @@ declare module '@polkadot/types/lookup' {
     readonly exactExecutionBlock: Option<u32>;
   }
 
-  /** @name PalletProposalsCodexProposalDetails (184) */
+  /** @name PalletProposalsCodexProposalDetails (200) */
   export interface PalletProposalsCodexProposalDetails extends Enum {
     readonly isSignal: boolean;
     readonly asSignal: Bytes;
@@ -1482,13 +1653,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Signal' | 'RuntimeUpgrade' | 'FundingRequest' | 'SetMaxValidatorCount' | 'CreateWorkingGroupLeadOpening' | 'FillWorkingGroupLeadOpening' | 'UpdateWorkingGroupBudget' | 'DecreaseWorkingGroupLeadStake' | 'SlashWorkingGroupLead' | 'SetWorkingGroupLeadReward' | 'TerminateWorkingGroupLead' | 'AmendConstitution' | 'CancelWorkingGroupLeadOpening' | 'SetMembershipPrice' | 'SetCouncilBudgetIncrement' | 'SetCouncilorReward' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'SetMembershipLeadInvitationQuota' | 'SetReferralCut' | 'VetoProposal' | 'UpdateGlobalNftLimit' | 'UpdateChannelPayouts';
   }
 
-  /** @name PalletCommonFundingRequestParameters (186) */
+  /** @name PalletCommonFundingRequestParameters (202) */
   export interface PalletCommonFundingRequestParameters extends Struct {
     readonly account: AccountId32;
     readonly amount: u128;
   }
 
-  /** @name PalletProposalsCodexCreateOpeningParameters (187) */
+  /** @name PalletProposalsCodexCreateOpeningParameters (203) */
   export interface PalletProposalsCodexCreateOpeningParameters extends Struct {
     readonly description: Bytes;
     readonly stakePolicy: PalletWorkingGroupStakePolicy;
@@ -1496,27 +1667,27 @@ declare module '@polkadot/types/lookup' {
     readonly group: PalletCommonWorkingGroup;
   }
 
-  /** @name PalletWorkingGroupStakePolicy (188) */
+  /** @name PalletWorkingGroupStakePolicy (204) */
   export interface PalletWorkingGroupStakePolicy extends Struct {
     readonly stakeAmount: u128;
     readonly leavingUnstakingPeriod: u32;
   }
 
-  /** @name PalletProposalsCodexFillOpeningParameters (189) */
+  /** @name PalletProposalsCodexFillOpeningParameters (205) */
   export interface PalletProposalsCodexFillOpeningParameters extends Struct {
     readonly openingId: u64;
     readonly applicationId: u64;
     readonly workingGroup: PalletCommonWorkingGroup;
   }
 
-  /** @name PalletProposalsCodexTerminateRoleParameters (190) */
+  /** @name PalletProposalsCodexTerminateRoleParameters (206) */
   export interface PalletProposalsCodexTerminateRoleParameters extends Struct {
     readonly workerId: u64;
     readonly slashingAmount: Option<u128>;
     readonly group: PalletCommonWorkingGroup;
   }
 
-  /** @name PalletWorkingGroupRawEventInstance1 (191) */
+  /** @name PalletWorkingGroupRawEventInstance1 (207) */
   export interface PalletWorkingGroupRawEventInstance1 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1572,14 +1743,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupOpeningType (195) */
+  /** @name PalletWorkingGroupOpeningType (211) */
   export interface PalletWorkingGroupOpeningType extends Enum {
     readonly isLeader: boolean;
     readonly isRegular: boolean;
     readonly type: 'Leader' | 'Regular';
   }
 
-  /** @name PalletWorkingGroupApplyOnOpeningParams (196) */
+  /** @name PalletWorkingGroupApplyOnOpeningParams (212) */
   export interface PalletWorkingGroupApplyOnOpeningParams extends Struct {
     readonly memberId: u64;
     readonly openingId: u64;
@@ -1589,23 +1760,23 @@ declare module '@polkadot/types/lookup' {
     readonly stakeParameters: PalletWorkingGroupStakeParameters;
   }
 
-  /** @name PalletWorkingGroupStakeParameters (197) */
+  /** @name PalletWorkingGroupStakeParameters (213) */
   export interface PalletWorkingGroupStakeParameters extends Struct {
     readonly stake: u128;
     readonly stakingAccountId: AccountId32;
   }
 
-  /** @name PalletWorkingGroupInstance1 (198) */
+  /** @name PalletWorkingGroupInstance1 (214) */
   export type PalletWorkingGroupInstance1 = Null;
 
-  /** @name PalletWorkingGroupRewardPaymentType (199) */
+  /** @name PalletWorkingGroupRewardPaymentType (215) */
   export interface PalletWorkingGroupRewardPaymentType extends Enum {
     readonly isMissedReward: boolean;
     readonly isRegularReward: boolean;
     readonly type: 'MissedReward' | 'RegularReward';
   }
 
-  /** @name PalletWorkingGroupRawEventInstance2 (200) */
+  /** @name PalletWorkingGroupRawEventInstance2 (216) */
   export interface PalletWorkingGroupRawEventInstance2 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1661,10 +1832,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance2 (201) */
+  /** @name PalletWorkingGroupInstance2 (217) */
   export type PalletWorkingGroupInstance2 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance3 (202) */
+  /** @name PalletWorkingGroupRawEventInstance3 (218) */
   export interface PalletWorkingGroupRawEventInstance3 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1720,10 +1891,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance3 (203) */
+  /** @name PalletWorkingGroupInstance3 (219) */
   export type PalletWorkingGroupInstance3 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance4 (204) */
+  /** @name PalletWorkingGroupRawEventInstance4 (220) */
   export interface PalletWorkingGroupRawEventInstance4 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1779,10 +1950,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance4 (205) */
+  /** @name PalletWorkingGroupInstance4 (221) */
   export type PalletWorkingGroupInstance4 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance5 (206) */
+  /** @name PalletWorkingGroupRawEventInstance5 (222) */
   export interface PalletWorkingGroupRawEventInstance5 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1838,10 +2009,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance5 (207) */
+  /** @name PalletWorkingGroupInstance5 (223) */
   export type PalletWorkingGroupInstance5 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance6 (208) */
+  /** @name PalletWorkingGroupRawEventInstance6 (224) */
   export interface PalletWorkingGroupRawEventInstance6 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1897,10 +2068,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance6 (209) */
+  /** @name PalletWorkingGroupInstance6 (225) */
   export type PalletWorkingGroupInstance6 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance7 (210) */
+  /** @name PalletWorkingGroupRawEventInstance7 (226) */
   export interface PalletWorkingGroupRawEventInstance7 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -1956,10 +2127,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance7 (211) */
+  /** @name PalletWorkingGroupInstance7 (227) */
   export type PalletWorkingGroupInstance7 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance8 (212) */
+  /** @name PalletWorkingGroupRawEventInstance8 (228) */
   export interface PalletWorkingGroupRawEventInstance8 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2015,10 +2186,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance8 (213) */
+  /** @name PalletWorkingGroupInstance8 (229) */
   export type PalletWorkingGroupInstance8 = Null;
 
-  /** @name PalletWorkingGroupRawEventInstance9 (214) */
+  /** @name PalletWorkingGroupRawEventInstance9 (230) */
   export interface PalletWorkingGroupRawEventInstance9 extends Enum {
     readonly isOpeningAdded: boolean;
     readonly asOpeningAdded: ITuple<[u64, Bytes, PalletWorkingGroupOpeningType, PalletWorkingGroupStakePolicy, Option<u128>]>;
@@ -2074,10 +2245,10 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'OpeningAdded' | 'AppliedOnOpening' | 'OpeningFilled' | 'LeaderSet' | 'WorkerRoleAccountUpdated' | 'LeaderUnset' | 'WorkerExited' | 'WorkerStartedLeaving' | 'TerminatedWorker' | 'TerminatedLeader' | 'StakeSlashed' | 'StakeDecreased' | 'StakeIncreased' | 'ApplicationWithdrawn' | 'OpeningCanceled' | 'BudgetSet' | 'WorkerRewardAccountUpdated' | 'WorkerRewardAmountUpdated' | 'StatusTextChanged' | 'BudgetSpending' | 'RewardPaid' | 'NewMissedRewardLevelReached' | 'WorkerStorageUpdated' | 'WorkingGroupBudgetFunded' | 'LeadRemarked' | 'WorkerRemarked';
   }
 
-  /** @name PalletWorkingGroupInstance9 (215) */
+  /** @name PalletWorkingGroupInstance9 (231) */
   export type PalletWorkingGroupInstance9 = Null;
 
-  /** @name FrameSystemPhase (216) */
+  /** @name FrameSystemPhase (232) */
   export interface FrameSystemPhase extends Enum {
     readonly isApplyExtrinsic: boolean;
     readonly asApplyExtrinsic: u32;
@@ -2086,13 +2257,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ApplyExtrinsic' | 'Finalization' | 'Initialization';
   }
 
-  /** @name FrameSystemLastRuntimeUpgradeInfo (220) */
+  /** @name FrameSystemLastRuntimeUpgradeInfo (236) */
   export interface FrameSystemLastRuntimeUpgradeInfo extends Struct {
     readonly specVersion: Compact<u32>;
     readonly specName: Text;
   }
 
-  /** @name FrameSystemCall (223) */
+  /** @name FrameSystemCall (239) */
   export interface FrameSystemCall extends Enum {
     readonly isFillBlock: boolean;
     readonly asFillBlock: {
@@ -2134,21 +2305,21 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'FillBlock' | 'Remark' | 'SetHeapPages' | 'SetCode' | 'SetCodeWithoutChecks' | 'SetStorage' | 'KillStorage' | 'KillPrefix' | 'RemarkWithEvent';
   }
 
-  /** @name FrameSystemLimitsBlockWeights (226) */
+  /** @name FrameSystemLimitsBlockWeights (242) */
   export interface FrameSystemLimitsBlockWeights extends Struct {
     readonly baseBlock: u64;
     readonly maxBlock: u64;
     readonly perClass: FrameSupportWeightsPerDispatchClassWeightsPerClass;
   }
 
-  /** @name FrameSupportWeightsPerDispatchClassWeightsPerClass (227) */
+  /** @name FrameSupportWeightsPerDispatchClassWeightsPerClass (243) */
   export interface FrameSupportWeightsPerDispatchClassWeightsPerClass extends Struct {
     readonly normal: FrameSystemLimitsWeightsPerClass;
     readonly operational: FrameSystemLimitsWeightsPerClass;
     readonly mandatory: FrameSystemLimitsWeightsPerClass;
   }
 
-  /** @name FrameSystemLimitsWeightsPerClass (228) */
+  /** @name FrameSystemLimitsWeightsPerClass (244) */
   export interface FrameSystemLimitsWeightsPerClass extends Struct {
     readonly baseExtrinsic: u64;
     readonly maxExtrinsic: Option<u64>;
@@ -2156,25 +2327,25 @@ declare module '@polkadot/types/lookup' {
     readonly reserved: Option<u64>;
   }
 
-  /** @name FrameSystemLimitsBlockLength (229) */
+  /** @name FrameSystemLimitsBlockLength (245) */
   export interface FrameSystemLimitsBlockLength extends Struct {
     readonly max: FrameSupportWeightsPerDispatchClassU32;
   }
 
-  /** @name FrameSupportWeightsPerDispatchClassU32 (230) */
+  /** @name FrameSupportWeightsPerDispatchClassU32 (246) */
   export interface FrameSupportWeightsPerDispatchClassU32 extends Struct {
     readonly normal: u32;
     readonly operational: u32;
     readonly mandatory: u32;
   }
 
-  /** @name FrameSupportWeightsRuntimeDbWeight (231) */
+  /** @name FrameSupportWeightsRuntimeDbWeight (247) */
   export interface FrameSupportWeightsRuntimeDbWeight extends Struct {
     readonly read: u64;
     readonly write: u64;
   }
 
-  /** @name SpVersionRuntimeVersion (232) */
+  /** @name SpVersionRuntimeVersion (248) */
   export interface SpVersionRuntimeVersion extends Struct {
     readonly specName: Text;
     readonly implName: Text;
@@ -2186,7 +2357,7 @@ declare module '@polkadot/types/lookup' {
     readonly stateVersion: u8;
   }
 
-  /** @name FrameSystemError (238) */
+  /** @name FrameSystemError (254) */
   export interface FrameSystemError extends Enum {
     readonly isInvalidSpecName: boolean;
     readonly isSpecVersionNeedsToIncrease: boolean;
@@ -2197,7 +2368,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InvalidSpecName' | 'SpecVersionNeedsToIncrease' | 'FailedToExtractRuntimeVersion' | 'NonDefaultComposite' | 'NonZeroRefCount' | 'CallFiltered';
   }
 
-  /** @name PalletUtilityCall (239) */
+  /** @name PalletUtilityCall (255) */
   export interface PalletUtilityCall extends Enum {
     readonly isBatch: boolean;
     readonly asBatch: {
@@ -2224,7 +2395,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Batch' | 'AsDerivative' | 'BatchAll' | 'DispatchAs' | 'ForceBatch';
   }
 
-  /** @name PalletBabeCall (242) */
+  /** @name PalletBabeCall (258) */
   export interface PalletBabeCall extends Enum {
     readonly isReportEquivocation: boolean;
     readonly asReportEquivocation: {
@@ -2243,7 +2414,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'PlanConfigChange';
   }
 
-  /** @name SpConsensusSlotsEquivocationProof (243) */
+  /** @name SpConsensusSlotsEquivocationProof (259) */
   export interface SpConsensusSlotsEquivocationProof extends Struct {
     readonly offender: SpConsensusBabeAppPublic;
     readonly slot: u64;
@@ -2251,7 +2422,7 @@ declare module '@polkadot/types/lookup' {
     readonly secondHeader: SpRuntimeHeader;
   }
 
-  /** @name SpRuntimeHeader (244) */
+  /** @name SpRuntimeHeader (260) */
   export interface SpRuntimeHeader extends Struct {
     readonly parentHash: H256;
     readonly number: Compact<u32>;
@@ -2260,20 +2431,20 @@ declare module '@polkadot/types/lookup' {
     readonly digest: SpRuntimeDigest;
   }
 
-  /** @name SpRuntimeBlakeTwo256 (245) */
+  /** @name SpRuntimeBlakeTwo256 (261) */
   export type SpRuntimeBlakeTwo256 = Null;
 
-  /** @name SpConsensusBabeAppPublic (246) */
+  /** @name SpConsensusBabeAppPublic (262) */
   export interface SpConsensusBabeAppPublic extends SpCoreSr25519Public {}
 
-  /** @name SpSessionMembershipProof (248) */
+  /** @name SpSessionMembershipProof (264) */
   export interface SpSessionMembershipProof extends Struct {
     readonly session: u32;
     readonly trieNodes: Vec<Bytes>;
     readonly validatorCount: u32;
   }
 
-  /** @name SpConsensusBabeDigestsNextConfigDescriptor (249) */
+  /** @name SpConsensusBabeDigestsNextConfigDescriptor (265) */
   export interface SpConsensusBabeDigestsNextConfigDescriptor extends Enum {
     readonly isV1: boolean;
     readonly asV1: {
@@ -2283,7 +2454,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'V1';
   }
 
-  /** @name SpConsensusBabeAllowedSlots (250) */
+  /** @name SpConsensusBabeAllowedSlots (266) */
   export interface SpConsensusBabeAllowedSlots extends Enum {
     readonly isPrimarySlots: boolean;
     readonly isPrimaryAndSecondaryPlainSlots: boolean;
@@ -2291,7 +2462,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'PrimarySlots' | 'PrimaryAndSecondaryPlainSlots' | 'PrimaryAndSecondaryVRFSlots';
   }
 
-  /** @name PalletTimestampCall (251) */
+  /** @name PalletTimestampCall (267) */
   export interface PalletTimestampCall extends Enum {
     readonly isSet: boolean;
     readonly asSet: {
@@ -2300,7 +2471,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Set';
   }
 
-  /** @name PalletAuthorshipCall (253) */
+  /** @name PalletAuthorshipCall (269) */
   export interface PalletAuthorshipCall extends Enum {
     readonly isSetUncles: boolean;
     readonly asSetUncles: {
@@ -2309,7 +2480,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'SetUncles';
   }
 
-  /** @name PalletBalancesCall (255) */
+  /** @name PalletBalancesCall (271) */
   export interface PalletBalancesCall extends Enum {
     readonly isTransfer: boolean;
     readonly asTransfer: {
@@ -2346,7 +2517,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Transfer' | 'SetBalance' | 'ForceTransfer' | 'TransferKeepAlive' | 'TransferAll' | 'ForceUnreserve';
   }
 
-  /** @name PalletElectionProviderMultiPhaseCall (256) */
+  /** @name PalletElectionProviderMultiPhaseCall (272) */
   export interface PalletElectionProviderMultiPhaseCall extends Enum {
     readonly isSubmitUnsigned: boolean;
     readonly asSubmitUnsigned: {
@@ -2373,14 +2544,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'SubmitUnsigned' | 'SetMinimumUntrustedScore' | 'SetEmergencyElectionResult' | 'Submit' | 'GovernanceFallback';
   }
 
-  /** @name PalletElectionProviderMultiPhaseRawSolution (257) */
+  /** @name PalletElectionProviderMultiPhaseRawSolution (273) */
   export interface PalletElectionProviderMultiPhaseRawSolution extends Struct {
     readonly solution: JoystreamNodeRuntimeNposSolution16;
     readonly score: SpNposElectionsElectionScore;
     readonly round: u32;
   }
 
-  /** @name JoystreamNodeRuntimeNposSolution16 (258) */
+  /** @name JoystreamNodeRuntimeNposSolution16 (274) */
   export interface JoystreamNodeRuntimeNposSolution16 extends Struct {
     readonly votes1: Vec<ITuple<[Compact<u32>, Compact<u16>]>>;
     readonly votes2: Vec<ITuple<[Compact<u32>, ITuple<[Compact<u16>, Compact<PerU16>]>, Compact<u16>]>>;
@@ -2400,26 +2571,26 @@ declare module '@polkadot/types/lookup' {
     readonly votes16: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
   }
 
-  /** @name SpNposElectionsElectionScore (309) */
+  /** @name SpNposElectionsElectionScore (325) */
   export interface SpNposElectionsElectionScore extends Struct {
     readonly minimalStake: u128;
     readonly sumStake: u128;
     readonly sumStakeSquared: u128;
   }
 
-  /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (310) */
+  /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (326) */
   export interface PalletElectionProviderMultiPhaseSolutionOrSnapshotSize extends Struct {
     readonly voters: Compact<u32>;
     readonly targets: Compact<u32>;
   }
 
-  /** @name SpNposElectionsSupport (314) */
+  /** @name SpNposElectionsSupport (330) */
   export interface SpNposElectionsSupport extends Struct {
     readonly total: u128;
     readonly voters: Vec<ITuple<[AccountId32, u128]>>;
   }
 
-  /** @name PalletStakingPalletCall (317) */
+  /** @name PalletStakingPalletCall (333) */
   export interface PalletStakingPalletCall extends Enum {
     readonly isBond: boolean;
     readonly asBond: {
@@ -2528,7 +2699,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Bond' | 'BondExtra' | 'Unbond' | 'WithdrawUnbonded' | 'Validate' | 'Nominate' | 'Chill' | 'SetPayee' | 'SetController' | 'SetValidatorCount' | 'IncreaseValidatorCount' | 'ScaleValidatorCount' | 'ForceNoEras' | 'ForceNewEra' | 'SetInvulnerables' | 'ForceUnstake' | 'ForceNewEraAlways' | 'CancelDeferredSlash' | 'PayoutStakers' | 'Rebond' | 'SetHistoryDepth' | 'ReapStash' | 'Kick' | 'SetStakingConfigs' | 'ChillOther' | 'ForceApplyMinCommission';
   }
 
-  /** @name PalletStakingRewardDestination (318) */
+  /** @name PalletStakingRewardDestination (334) */
   export interface PalletStakingRewardDestination extends Enum {
     readonly isStaked: boolean;
     readonly isStash: boolean;
@@ -2539,7 +2710,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Staked' | 'Stash' | 'Controller' | 'Account' | 'None';
   }
 
-  /** @name PalletStakingPalletConfigOpU128 (322) */
+  /** @name PalletStakingPalletConfigOpU128 (338) */
   export interface PalletStakingPalletConfigOpU128 extends Enum {
     readonly isNoop: boolean;
     readonly isSet: boolean;
@@ -2548,7 +2719,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Noop' | 'Set' | 'Remove';
   }
 
-  /** @name PalletStakingPalletConfigOpU32 (323) */
+  /** @name PalletStakingPalletConfigOpU32 (339) */
   export interface PalletStakingPalletConfigOpU32 extends Enum {
     readonly isNoop: boolean;
     readonly isSet: boolean;
@@ -2557,7 +2728,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Noop' | 'Set' | 'Remove';
   }
 
-  /** @name PalletStakingPalletConfigOpPercent (324) */
+  /** @name PalletStakingPalletConfigOpPercent (340) */
   export interface PalletStakingPalletConfigOpPercent extends Enum {
     readonly isNoop: boolean;
     readonly isSet: boolean;
@@ -2566,7 +2737,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Noop' | 'Set' | 'Remove';
   }
 
-  /** @name PalletStakingPalletConfigOpPerbill (325) */
+  /** @name PalletStakingPalletConfigOpPerbill (341) */
   export interface PalletStakingPalletConfigOpPerbill extends Enum {
     readonly isNoop: boolean;
     readonly isSet: boolean;
@@ -2575,7 +2746,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Noop' | 'Set' | 'Remove';
   }
 
-  /** @name PalletSessionCall (326) */
+  /** @name PalletSessionCall (342) */
   export interface PalletSessionCall extends Enum {
     readonly isSetKeys: boolean;
     readonly asSetKeys: {
@@ -2586,7 +2757,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'SetKeys' | 'PurgeKeys';
   }
 
-  /** @name JoystreamNodeRuntimeSessionKeys (327) */
+  /** @name JoystreamNodeRuntimeSessionKeys (343) */
   export interface JoystreamNodeRuntimeSessionKeys extends Struct {
     readonly grandpa: SpFinalityGrandpaAppPublic;
     readonly babe: SpConsensusBabeAppPublic;
@@ -2594,10 +2765,10 @@ declare module '@polkadot/types/lookup' {
     readonly authorityDiscovery: SpAuthorityDiscoveryAppPublic;
   }
 
-  /** @name SpAuthorityDiscoveryAppPublic (328) */
+  /** @name SpAuthorityDiscoveryAppPublic (344) */
   export interface SpAuthorityDiscoveryAppPublic extends SpCoreSr25519Public {}
 
-  /** @name PalletGrandpaCall (329) */
+  /** @name PalletGrandpaCall (345) */
   export interface PalletGrandpaCall extends Enum {
     readonly isReportEquivocation: boolean;
     readonly asReportEquivocation: {
@@ -2617,13 +2788,13 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'NoteStalled';
   }
 
-  /** @name SpFinalityGrandpaEquivocationProof (330) */
+  /** @name SpFinalityGrandpaEquivocationProof (346) */
   export interface SpFinalityGrandpaEquivocationProof extends Struct {
     readonly setId: u64;
     readonly equivocation: SpFinalityGrandpaEquivocation;
   }
 
-  /** @name SpFinalityGrandpaEquivocation (331) */
+  /** @name SpFinalityGrandpaEquivocation (347) */
   export interface SpFinalityGrandpaEquivocation extends Enum {
     readonly isPrevote: boolean;
     readonly asPrevote: FinalityGrandpaEquivocationPrevote;
@@ -2632,7 +2803,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Prevote' | 'Precommit';
   }
 
-  /** @name FinalityGrandpaEquivocationPrevote (332) */
+  /** @name FinalityGrandpaEquivocationPrevote (348) */
   export interface FinalityGrandpaEquivocationPrevote extends Struct {
     readonly roundNumber: u64;
     readonly identity: SpFinalityGrandpaAppPublic;
@@ -2640,19 +2811,19 @@ declare module '@polkadot/types/lookup' {
     readonly second: ITuple<[FinalityGrandpaPrevote, SpFinalityGrandpaAppSignature]>;
   }
 
-  /** @name FinalityGrandpaPrevote (333) */
+  /** @name FinalityGrandpaPrevote (349) */
   export interface FinalityGrandpaPrevote extends Struct {
     readonly targetHash: H256;
     readonly targetNumber: u32;
   }
 
-  /** @name SpFinalityGrandpaAppSignature (334) */
+  /** @name SpFinalityGrandpaAppSignature (350) */
   export interface SpFinalityGrandpaAppSignature extends SpCoreEd25519Signature {}
 
-  /** @name SpCoreEd25519Signature (335) */
+  /** @name SpCoreEd25519Signature (351) */
   export interface SpCoreEd25519Signature extends U8aFixed {}
 
-  /** @name FinalityGrandpaEquivocationPrecommit (338) */
+  /** @name FinalityGrandpaEquivocationPrecommit (354) */
   export interface FinalityGrandpaEquivocationPrecommit extends Struct {
     readonly roundNumber: u64;
     readonly identity: SpFinalityGrandpaAppPublic;
@@ -2660,13 +2831,13 @@ declare module '@polkadot/types/lookup' {
     readonly second: ITuple<[FinalityGrandpaPrecommit, SpFinalityGrandpaAppSignature]>;
   }
 
-  /** @name FinalityGrandpaPrecommit (339) */
+  /** @name FinalityGrandpaPrecommit (355) */
   export interface FinalityGrandpaPrecommit extends Struct {
     readonly targetHash: H256;
     readonly targetNumber: u32;
   }
 
-  /** @name PalletImOnlineCall (341) */
+  /** @name PalletImOnlineCall (357) */
   export interface PalletImOnlineCall extends Enum {
     readonly isHeartbeat: boolean;
     readonly asHeartbeat: {
@@ -2676,7 +2847,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Heartbeat';
   }
 
-  /** @name PalletImOnlineHeartbeat (342) */
+  /** @name PalletImOnlineHeartbeat (358) */
   export interface PalletImOnlineHeartbeat extends Struct {
     readonly blockNumber: u32;
     readonly networkState: SpCoreOffchainOpaqueNetworkState;
@@ -2685,19 +2856,19 @@ declare module '@polkadot/types/lookup' {
     readonly validatorsLen: u32;
   }
 
-  /** @name SpCoreOffchainOpaqueNetworkState (343) */
+  /** @name SpCoreOffchainOpaqueNetworkState (359) */
   export interface SpCoreOffchainOpaqueNetworkState extends Struct {
     readonly peerId: Bytes;
     readonly externalAddresses: Vec<Bytes>;
   }
 
-  /** @name PalletImOnlineSr25519AppSr25519Signature (347) */
+  /** @name PalletImOnlineSr25519AppSr25519Signature (363) */
   export interface PalletImOnlineSr25519AppSr25519Signature extends SpCoreSr25519Signature {}
 
-  /** @name SpCoreSr25519Signature (348) */
+  /** @name SpCoreSr25519Signature (364) */
   export interface SpCoreSr25519Signature extends U8aFixed {}
 
-  /** @name PalletSudoCall (349) */
+  /** @name PalletSudoCall (365) */
   export interface PalletSudoCall extends Enum {
     readonly isSudo: boolean;
     readonly asSudo: {
@@ -2720,7 +2891,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Sudo' | 'SudoUncheckedWeight' | 'SetKey' | 'SudoAs';
   }
 
-  /** @name PalletBagsListCall (350) */
+  /** @name PalletBagsListCall (366) */
   export interface PalletBagsListCall extends Enum {
     readonly isRebag: boolean;
     readonly asRebag: {
@@ -2733,7 +2904,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Rebag' | 'PutInFrontOf';
   }
 
-  /** @name PalletVestingCall (351) */
+  /** @name PalletVestingCall (367) */
   export interface PalletVestingCall extends Enum {
     readonly isVest: boolean;
     readonly isVestOther: boolean;
@@ -2759,14 +2930,48 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Vest' | 'VestOther' | 'VestedTransfer' | 'ForceVestedTransfer' | 'MergeSchedules';
   }
 
-  /** @name PalletVestingVestingInfo (352) */
+  /** @name PalletVestingVestingInfo (368) */
   export interface PalletVestingVestingInfo extends Struct {
     readonly locked: u128;
     readonly perBlock: u128;
     readonly startingBlock: u32;
   }
 
-  /** @name PalletCouncilCall (353) */
+  /** @name PalletMultisigCall (369) */
+  export interface PalletMultisigCall extends Enum {
+    readonly isAsMultiThreshold1: boolean;
+    readonly asAsMultiThreshold1: {
+      readonly otherSignatories: Vec<AccountId32>;
+      readonly call: Call;
+    } & Struct;
+    readonly isAsMulti: boolean;
+    readonly asAsMulti: {
+      readonly threshold: u16;
+      readonly otherSignatories: Vec<AccountId32>;
+      readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
+      readonly call: WrapperKeepOpaque<Call>;
+      readonly storeCall: bool;
+      readonly maxWeight: u64;
+    } & Struct;
+    readonly isApproveAsMulti: boolean;
+    readonly asApproveAsMulti: {
+      readonly threshold: u16;
+      readonly otherSignatories: Vec<AccountId32>;
+      readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
+      readonly callHash: U8aFixed;
+      readonly maxWeight: u64;
+    } & Struct;
+    readonly isCancelAsMulti: boolean;
+    readonly asCancelAsMulti: {
+      readonly threshold: u16;
+      readonly otherSignatories: Vec<AccountId32>;
+      readonly timepoint: PalletMultisigTimepoint;
+      readonly callHash: U8aFixed;
+    } & Struct;
+    readonly type: 'AsMultiThreshold1' | 'AsMulti' | 'ApproveAsMulti' | 'CancelAsMulti';
+  }
+
+  /** @name PalletCouncilCall (372) */
   export interface PalletCouncilCall extends Enum {
     readonly isAnnounceCandidacy: boolean;
     readonly asAnnounceCandidacy: {
@@ -2827,7 +3032,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AnnounceCandidacy' | 'ReleaseCandidacyStake' | 'WithdrawCandidacy' | 'SetCandidacyNote' | 'SetBudget' | 'PlanBudgetRefill' | 'SetBudgetIncrement' | 'SetCouncilorReward' | 'FundingRequest' | 'FundCouncilBudget' | 'CouncilorRemark' | 'CandidateRemark';
   }
 
-  /** @name PalletReferendumCall (354) */
+  /** @name PalletReferendumCall (373) */
   export interface PalletReferendumCall extends Enum {
     readonly isVote: boolean;
     readonly asVote: {
@@ -2843,7 +3048,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Vote' | 'RevealVote' | 'ReleaseVoteStake';
   }
 
-  /** @name PalletMembershipCall (355) */
+  /** @name PalletMembershipCall (374) */
   export interface PalletMembershipCall extends Enum {
     readonly isBuyMembership: boolean;
     readonly asBuyMembership: {
@@ -2926,7 +3131,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'BuyMembership' | 'UpdateProfile' | 'UpdateAccounts' | 'UpdateProfileVerification' | 'SetReferralCut' | 'TransferInvites' | 'InviteMember' | 'GiftMembership' | 'SetMembershipPrice' | 'SetLeaderInvitationQuota' | 'SetInitialInvitationBalance' | 'SetInitialInvitationCount' | 'AddStakingAccountCandidate' | 'RemoveStakingAccount' | 'ConfirmStakingAccount' | 'MemberRemark' | 'CreateFoundingMember';
   }
 
-  /** @name PalletForumCall (356) */
+  /** @name PalletForumCall (375) */
   export interface PalletForumCall extends Enum {
     readonly isUpdateCategoryMembershipOfModerator: boolean;
     readonly asUpdateCategoryMembershipOfModerator: {
@@ -3006,14 +3211,6 @@ declare module '@polkadot/types/lookup' {
       readonly text: Bytes;
       readonly editable: bool;
     } & Struct;
-    readonly isReactPost: boolean;
-    readonly asReactPost: {
-      readonly forumUserId: u64;
-      readonly categoryId: u64;
-      readonly threadId: u64;
-      readonly postId: u64;
-      readonly react: u64;
-    } & Struct;
     readonly isEditPostText: boolean;
     readonly asEditPostText: {
       readonly forumUserId: u64;
@@ -3042,10 +3239,10 @@ declare module '@polkadot/types/lookup' {
       readonly categoryId: u64;
       readonly stickiedIds: Vec<u64>;
     } & Struct;
-    readonly type: 'UpdateCategoryMembershipOfModerator' | 'CreateCategory' | 'UpdateCategoryArchivalStatus' | 'UpdateCategoryTitle' | 'UpdateCategoryDescription' | 'DeleteCategory' | 'CreateThread' | 'EditThreadMetadata' | 'DeleteThread' | 'MoveThreadToCategory' | 'ModerateThread' | 'AddPost' | 'ReactPost' | 'EditPostText' | 'ModeratePost' | 'DeletePosts' | 'SetStickiedThreads';
+    readonly type: 'UpdateCategoryMembershipOfModerator' | 'CreateCategory' | 'UpdateCategoryArchivalStatus' | 'UpdateCategoryTitle' | 'UpdateCategoryDescription' | 'DeleteCategory' | 'CreateThread' | 'EditThreadMetadata' | 'DeleteThread' | 'MoveThreadToCategory' | 'ModerateThread' | 'AddPost' | 'EditPostText' | 'ModeratePost' | 'DeletePosts' | 'SetStickiedThreads';
   }
 
-  /** @name PalletConstitutionCall (357) */
+  /** @name PalletConstitutionCall (376) */
   export interface PalletConstitutionCall extends Enum {
     readonly isAmendConstitution: boolean;
     readonly asAmendConstitution: {
@@ -3054,7 +3251,96 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AmendConstitution';
   }
 
-  /** @name PalletContentCall (359) */
+  /** @name PalletBountyCall (377) */
+  export interface PalletBountyCall extends Enum {
+    readonly isCreateBounty: boolean;
+    readonly asCreateBounty: {
+      readonly params: PalletBountyBountyParameters;
+      readonly metadata: Bytes;
+    } & Struct;
+    readonly isFundBounty: boolean;
+    readonly asFundBounty: {
+      readonly funder: PalletBountyBountyActor;
+      readonly bountyId: u64;
+      readonly amount: u128;
+    } & Struct;
+    readonly isTerminateBounty: boolean;
+    readonly asTerminateBounty: {
+      readonly bountyId: u64;
+    } & Struct;
+    readonly isSwitchOracle: boolean;
+    readonly asSwitchOracle: {
+      readonly newOracle: PalletBountyBountyActor;
+      readonly bountyId: u64;
+    } & Struct;
+    readonly isWithdrawFunding: boolean;
+    readonly asWithdrawFunding: {
+      readonly funder: PalletBountyBountyActor;
+      readonly bountyId: u64;
+    } & Struct;
+    readonly isAnnounceWorkEntry: boolean;
+    readonly asAnnounceWorkEntry: {
+      readonly memberId: u64;
+      readonly bountyId: u64;
+      readonly stakingAccountId: AccountId32;
+      readonly workDescription: Bytes;
+    } & Struct;
+    readonly isSubmitWork: boolean;
+    readonly asSubmitWork: {
+      readonly memberId: u64;
+      readonly bountyId: u64;
+      readonly entryId: u64;
+      readonly workData: Bytes;
+    } & Struct;
+    readonly isEndWorkingPeriod: boolean;
+    readonly asEndWorkingPeriod: {
+      readonly bountyId: u64;
+    } & Struct;
+    readonly isSubmitOracleJudgment: boolean;
+    readonly asSubmitOracleJudgment: {
+      readonly bountyId: u64;
+      readonly judgment: BTreeMap<u64, PalletBountyOracleWorkEntryJudgment>;
+      readonly rationale: Bytes;
+    } & Struct;
+    readonly isWithdrawEntrantStake: boolean;
+    readonly asWithdrawEntrantStake: {
+      readonly memberId: u64;
+      readonly bountyId: u64;
+      readonly entryId: u64;
+    } & Struct;
+    readonly isWithdrawOracleReward: boolean;
+    readonly asWithdrawOracleReward: {
+      readonly bountyId: u64;
+    } & Struct;
+    readonly isContributorRemark: boolean;
+    readonly asContributorRemark: {
+      readonly contributor: PalletBountyBountyActor;
+      readonly bountyId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly isOracleRemark: boolean;
+    readonly asOracleRemark: {
+      readonly oracle: PalletBountyBountyActor;
+      readonly bountyId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly isEntrantRemark: boolean;
+    readonly asEntrantRemark: {
+      readonly entrantId: u64;
+      readonly bountyId: u64;
+      readonly entryId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly isCreatorRemark: boolean;
+    readonly asCreatorRemark: {
+      readonly creator: PalletBountyBountyActor;
+      readonly bountyId: u64;
+      readonly msg: Bytes;
+    } & Struct;
+    readonly type: 'CreateBounty' | 'FundBounty' | 'TerminateBounty' | 'SwitchOracle' | 'WithdrawFunding' | 'AnnounceWorkEntry' | 'SubmitWork' | 'EndWorkingPeriod' | 'SubmitOracleJudgment' | 'WithdrawEntrantStake' | 'WithdrawOracleReward' | 'ContributorRemark' | 'OracleRemark' | 'EntrantRemark' | 'CreatorRemark';
+  }
+
+  /** @name PalletContentCall (379) */
   export interface PalletContentCall extends Enum {
     readonly isCreateCuratorGroup: boolean;
     readonly asCreateCuratorGroup: {
@@ -3109,6 +3395,7 @@ declare module '@polkadot/types/lookup' {
     readonly asDeleteChannel: {
       readonly actor: PalletContentPermissionsContentActor;
       readonly channelId: u64;
+      readonly channelBagWitness: PalletContentChannelBagWitness;
       readonly numObjectsToDelete: u64;
     } & Struct;
     readonly isDeleteChannelAssetsAsModerator: boolean;
@@ -3116,12 +3403,14 @@ declare module '@polkadot/types/lookup' {
       readonly actor: PalletContentPermissionsContentActor;
       readonly channelId: u64;
       readonly assetsToRemove: BTreeSet<u64>;
+      readonly storageBucketsNumWitness: u32;
       readonly rationale: Bytes;
     } & Struct;
     readonly isDeleteChannelAsModerator: boolean;
     readonly asDeleteChannelAsModerator: {
       readonly actor: PalletContentPermissionsContentActor;
       readonly channelId: u64;
+      readonly channelBagWitness: PalletContentChannelBagWitness;
       readonly numObjectsToDelete: u64;
       readonly rationale: Bytes;
     } & Struct;
@@ -3149,11 +3438,13 @@ declare module '@polkadot/types/lookup' {
       readonly actor: PalletContentPermissionsContentActor;
       readonly videoId: u64;
       readonly numObjectsToDelete: u64;
+      readonly storageBucketsNumWitness: Option<u32>;
     } & Struct;
     readonly isDeleteVideoAssetsAsModerator: boolean;
     readonly asDeleteVideoAssetsAsModerator: {
       readonly actor: PalletContentPermissionsContentActor;
       readonly videoId: u64;
+      readonly storageBucketsNumWitness: u32;
       readonly assetsToRemove: BTreeSet<u64>;
       readonly rationale: Bytes;
     } & Struct;
@@ -3161,6 +3452,7 @@ declare module '@polkadot/types/lookup' {
     readonly asDeleteVideoAsModerator: {
       readonly actor: PalletContentPermissionsContentActor;
       readonly videoId: u64;
+      readonly storageBucketsNumWitness: Option<u32>;
       readonly numObjectsToDelete: u64;
       readonly rationale: Bytes;
     } & Struct;
@@ -3178,7 +3470,7 @@ declare module '@polkadot/types/lookup' {
     readonly isClaimChannelReward: boolean;
     readonly asClaimChannelReward: {
       readonly actor: PalletContentPermissionsContentActor;
-      readonly proof: Vec<PalletContentProofElementRecord>;
+      readonly proof: Vec<PalletCommonProofElementRecord>;
       readonly item: PalletContentPullPaymentElement;
     } & Struct;
     readonly isWithdrawFromChannelBalance: boolean;
@@ -3198,7 +3490,7 @@ declare module '@polkadot/types/lookup' {
     readonly isClaimAndWithdrawChannelReward: boolean;
     readonly asClaimAndWithdrawChannelReward: {
       readonly actor: PalletContentPermissionsContentActor;
-      readonly proof: Vec<PalletContentProofElementRecord>;
+      readonly proof: Vec<PalletCommonProofElementRecord>;
       readonly item: PalletContentPullPaymentElement;
     } & Struct;
     readonly isIssueNft: boolean;
@@ -3342,7 +3634,7 @@ declare module '@polkadot/types/lookup' {
     readonly isAcceptChannelTransfer: boolean;
     readonly asAcceptChannelTransfer: {
       readonly channelId: u64;
-      readonly commitmentParams: PalletContentTransferCommitmentParameters;
+      readonly commitmentParams: PalletContentTransferCommitmentParametersBTreeMap;
     } & Struct;
     readonly isUpdateGlobalNftLimit: boolean;
     readonly asUpdateGlobalNftLimit: {
@@ -3380,6 +3672,7 @@ declare module '@polkadot/types/lookup' {
       readonly actor: PalletContentPermissionsContentActor;
       readonly channelId: u64;
       readonly outputs: PalletProjectTokenTransfersPaymentWithVesting;
+      readonly metadata: Bytes;
     } & Struct;
     readonly isMakeCreatorTokenPermissionless: boolean;
     readonly asMakeCreatorTokenPermissionless: {
@@ -3422,34 +3715,40 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'CreateCuratorGroup' | 'UpdateCuratorGroupPermissions' | 'SetCuratorGroupStatus' | 'AddCuratorToGroup' | 'RemoveCuratorFromGroup' | 'CreateChannel' | 'UpdateChannel' | 'UpdateChannelPrivilegeLevel' | 'SetChannelPausedFeaturesAsModerator' | 'DeleteChannel' | 'DeleteChannelAssetsAsModerator' | 'DeleteChannelAsModerator' | 'SetChannelVisibilityAsModerator' | 'CreateVideo' | 'UpdateVideo' | 'DeleteVideo' | 'DeleteVideoAssetsAsModerator' | 'DeleteVideoAsModerator' | 'SetVideoVisibilityAsModerator' | 'UpdateChannelPayouts' | 'ClaimChannelReward' | 'WithdrawFromChannelBalance' | 'UpdateChannelStateBloatBond' | 'UpdateVideoStateBloatBond' | 'ClaimAndWithdrawChannelReward' | 'IssueNft' | 'DestroyNft' | 'StartOpenAuction' | 'StartEnglishAuction' | 'CancelEnglishAuction' | 'CancelOpenAuction' | 'CancelOffer' | 'CancelBuyNow' | 'UpdateBuyNowPrice' | 'MakeOpenAuctionBid' | 'MakeEnglishAuctionBid' | 'CancelOpenAuctionBid' | 'SettleEnglishAuction' | 'PickOpenAuctionWinner' | 'OfferNft' | 'SlingNftBack' | 'AcceptIncomingOffer' | 'SellNft' | 'BuyNft' | 'ToggleNftLimits' | 'ChannelOwnerRemark' | 'ChannelAgentRemark' | 'NftOwnerRemark' | 'InitializeChannelTransfer' | 'CancelChannelTransfer' | 'AcceptChannelTransfer' | 'UpdateGlobalNftLimit' | 'UpdateChannelNftLimit' | 'IssueCreatorToken' | 'InitCreatorTokenSale' | 'UpdateUpcomingCreatorTokenSale' | 'CreatorTokenIssuerTransfer' | 'MakeCreatorTokenPermissionless' | 'ReduceCreatorTokenPatronageRateTo' | 'ClaimCreatorTokenPatronageCredit' | 'IssueRevenueSplit' | 'FinalizeRevenueSplit' | 'FinalizeCreatorTokenSale' | 'DeissueCreatorToken';
   }
 
-  /** @name PalletContentProofElementRecord (361) */
-  export interface PalletContentProofElementRecord extends Struct {
+  /** @name PalletContentChannelBagWitness (380) */
+  export interface PalletContentChannelBagWitness extends Struct {
+    readonly storageBucketsNum: u32;
+    readonly distributionBucketsNum: u32;
+  }
+
+  /** @name PalletCommonProofElementRecord (382) */
+  export interface PalletCommonProofElementRecord extends Struct {
     readonly hash_: H256;
-    readonly side: PalletContentSide;
+    readonly side: PalletCommonSide;
   }
 
-  /** @name PalletContentSide (362) */
-  export interface PalletContentSide extends Enum {
+  /** @name PalletCommonSide (383) */
+  export interface PalletCommonSide extends Enum {
     readonly isLeft: boolean;
     readonly isRight: boolean;
     readonly type: 'Left' | 'Right';
   }
 
-  /** @name PalletContentPullPaymentElement (363) */
+  /** @name PalletContentPullPaymentElement (384) */
   export interface PalletContentPullPaymentElement extends Struct {
     readonly channelId: u64;
     readonly cumulativeRewardEarned: u128;
     readonly reason: H256;
   }
 
-  /** @name PalletContentInitTransferParameters (364) */
+  /** @name PalletContentInitTransferParameters (385) */
   export interface PalletContentInitTransferParameters extends Struct {
     readonly newCollaborators: BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>;
     readonly price: u128;
     readonly newOwner: PalletContentChannelOwner;
   }
 
-  /** @name PalletProjectTokenTokenSaleParams (365) */
+  /** @name PalletProjectTokenTokenSaleParams (386) */
   export interface PalletProjectTokenTokenSaleParams extends Struct {
     readonly unitPrice: u128;
     readonly upperBoundQuantity: u128;
@@ -3460,10 +3759,10 @@ declare module '@polkadot/types/lookup' {
     readonly metadata: Option<Bytes>;
   }
 
-  /** @name PalletProjectTokenTransfersPaymentWithVesting (366) */
+  /** @name PalletProjectTokenTransfersPaymentWithVesting (387) */
   export interface PalletProjectTokenTransfersPaymentWithVesting extends BTreeMap<u64, PalletProjectTokenPaymentWithVesting> {}
 
-  /** @name PalletStorageCall (370) */
+  /** @name PalletStorageCall (391) */
   export interface PalletStorageCall extends Enum {
     readonly isDeleteStorageBucket: boolean;
     readonly asDeleteStorageBucket: {
@@ -3631,10 +3930,6 @@ declare module '@polkadot/types/lookup' {
     readonly asSudoUploadDataObjects: {
       readonly params: PalletStorageUploadParametersRecord;
     } & Struct;
-    readonly isSudoCreateDynamicBag: boolean;
-    readonly asSudoCreateDynamicBag: {
-      readonly params: PalletStorageDynBagCreationParametersRecord;
-    } & Struct;
     readonly isStorageOperatorRemark: boolean;
     readonly asStorageOperatorRemark: {
       readonly workerId: u64;
@@ -3647,27 +3942,17 @@ declare module '@polkadot/types/lookup' {
       readonly distributionBucketId: PalletStorageDistributionBucketIdRecord;
       readonly msg: Bytes;
     } & Struct;
-    readonly type: 'DeleteStorageBucket' | 'UpdateUploadingBlockedStatus' | 'UpdateDataSizeFee' | 'UpdateStorageBucketsPerBagLimit' | 'UpdateStorageBucketsVoucherMaxLimits' | 'UpdateDataObjectStateBloatBond' | 'UpdateNumberOfStorageBucketsInDynamicBagCreationPolicy' | 'UpdateBlacklist' | 'CreateStorageBucket' | 'UpdateStorageBucketsForBag' | 'CancelStorageBucketOperatorInvite' | 'InviteStorageBucketOperator' | 'RemoveStorageBucketOperator' | 'UpdateStorageBucketStatus' | 'SetStorageBucketVoucherLimits' | 'AcceptStorageBucketInvitation' | 'SetStorageOperatorMetadata' | 'AcceptPendingDataObjects' | 'CreateDistributionBucketFamily' | 'DeleteDistributionBucketFamily' | 'CreateDistributionBucket' | 'UpdateDistributionBucketStatus' | 'DeleteDistributionBucket' | 'UpdateDistributionBucketsForBag' | 'UpdateDistributionBucketsPerBagLimit' | 'UpdateDistributionBucketMode' | 'UpdateFamiliesInDynamicBagCreationPolicy' | 'InviteDistributionBucketOperator' | 'CancelDistributionBucketOperatorInvite' | 'RemoveDistributionBucketOperator' | 'SetDistributionBucketFamilyMetadata' | 'AcceptDistributionBucketInvitation' | 'SetDistributionOperatorMetadata' | 'SudoUploadDataObjects' | 'SudoCreateDynamicBag' | 'StorageOperatorRemark' | 'DistributionOperatorRemark';
-  }
-
-  /** @name PalletStorageDynBagCreationParametersRecord (371) */
-  export interface PalletStorageDynBagCreationParametersRecord extends Struct {
-    readonly bagId: PalletStorageDynamicBagIdType;
-    readonly objectCreationList: Vec<PalletStorageDataObjectCreationParameters>;
-    readonly stateBloatBondSourceAccountId: AccountId32;
-    readonly expectedDataSizeFee: u128;
-    readonly expectedDataObjectStateBloatBond: u128;
-    readonly storageBuckets: BTreeSet<u64>;
-    readonly distributionBuckets: BTreeSet<PalletStorageDistributionBucketIdRecord>;
+    readonly type: 'DeleteStorageBucket' | 'UpdateUploadingBlockedStatus' | 'UpdateDataSizeFee' | 'UpdateStorageBucketsPerBagLimit' | 'UpdateStorageBucketsVoucherMaxLimits' | 'UpdateDataObjectStateBloatBond' | 'UpdateNumberOfStorageBucketsInDynamicBagCreationPolicy' | 'UpdateBlacklist' | 'CreateStorageBucket' | 'UpdateStorageBucketsForBag' | 'CancelStorageBucketOperatorInvite' | 'InviteStorageBucketOperator' | 'RemoveStorageBucketOperator' | 'UpdateStorageBucketStatus' | 'SetStorageBucketVoucherLimits' | 'AcceptStorageBucketInvitation' | 'SetStorageOperatorMetadata' | 'AcceptPendingDataObjects' | 'CreateDistributionBucketFamily' | 'DeleteDistributionBucketFamily' | 'CreateDistributionBucket' | 'UpdateDistributionBucketStatus' | 'DeleteDistributionBucket' | 'UpdateDistributionBucketsForBag' | 'UpdateDistributionBucketsPerBagLimit' | 'UpdateDistributionBucketMode' | 'UpdateFamiliesInDynamicBagCreationPolicy' | 'InviteDistributionBucketOperator' | 'CancelDistributionBucketOperatorInvite' | 'RemoveDistributionBucketOperator' | 'SetDistributionBucketFamilyMetadata' | 'AcceptDistributionBucketInvitation' | 'SetDistributionOperatorMetadata' | 'SudoUploadDataObjects' | 'StorageOperatorRemark' | 'DistributionOperatorRemark';
   }
 
-  /** @name PalletProjectTokenCall (372) */
+  /** @name PalletProjectTokenCall (392) */
   export interface PalletProjectTokenCall extends Enum {
     readonly isTransfer: boolean;
     readonly asTransfer: {
       readonly srcMemberId: u64;
       readonly tokenId: u64;
       readonly outputs: PalletProjectTokenTransfersPayment;
+      readonly metadata: Bytes;
     } & Struct;
     readonly isBurn: boolean;
     readonly asBurn: {
@@ -3706,26 +3991,25 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Transfer' | 'Burn' | 'DustAccount' | 'JoinWhitelist' | 'PurchaseTokensOnSale' | 'ParticipateInSplit' | 'ExitRevenueSplit';
   }
 
-  /** @name PalletProjectTokenTransfersPayment (373) */
+  /** @name PalletProjectTokenTransfersPayment (393) */
   export interface PalletProjectTokenTransfersPayment extends BTreeMap<u64, PalletProjectTokenPayment> {}
 
-  /** @name PalletProjectTokenPayment (374) */
+  /** @name PalletProjectTokenPayment (394) */
   export interface PalletProjectTokenPayment extends Struct {
-    readonly remark: Bytes;
     readonly amount: u128;
   }
 
-  /** @name PalletProjectTokenMerkleProof (378) */
+  /** @name PalletProjectTokenMerkleProof (398) */
   export interface PalletProjectTokenMerkleProof extends Vec<ITuple<[H256, PalletProjectTokenMerkleSide]>> {}
 
-  /** @name PalletProjectTokenMerkleSide (381) */
+  /** @name PalletProjectTokenMerkleSide (401) */
   export interface PalletProjectTokenMerkleSide extends Enum {
     readonly isRight: boolean;
     readonly isLeft: boolean;
     readonly type: 'Right' | 'Left';
   }
 
-  /** @name PalletProposalsEngineCall (382) */
+  /** @name PalletProposalsEngineCall (402) */
   export interface PalletProposalsEngineCall extends Enum {
     readonly isVote: boolean;
     readonly asVote: {
@@ -3752,7 +4036,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Vote' | 'CancelProposal' | 'VetoProposal' | 'ProposerRemark';
   }
 
-  /** @name PalletProposalsDiscussionCall (383) */
+  /** @name PalletProposalsDiscussionCall (403) */
   export interface PalletProposalsDiscussionCall extends Enum {
     readonly isAddPost: boolean;
     readonly asAddPost: {
@@ -3783,7 +4067,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AddPost' | 'DeletePost' | 'UpdatePost' | 'ChangeThreadMode';
   }
 
-  /** @name PalletProposalsCodexCall (384) */
+  /** @name PalletProposalsCodexCall (404) */
   export interface PalletProposalsCodexCall extends Enum {
     readonly isCreateProposal: boolean;
     readonly asCreateProposal: {
@@ -3793,7 +4077,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'CreateProposal';
   }
 
-  /** @name PalletWorkingGroupCall (385) */
+  /** @name PalletWorkingGroupCall (405) */
   export interface PalletWorkingGroupCall extends Enum {
     readonly isAddOpening: boolean;
     readonly asAddOpening: {
@@ -3898,7 +4182,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'AddOpening' | 'ApplyOnOpening' | 'FillOpening' | 'UpdateRoleAccount' | 'LeaveRole' | 'TerminateRole' | 'SlashStake' | 'DecreaseStake' | 'IncreaseStake' | 'WithdrawApplication' | 'CancelOpening' | 'SetBudget' | 'UpdateRewardAccount' | 'UpdateRewardAmount' | 'SetStatusText' | 'SpendFromBudget' | 'UpdateRoleStorage' | 'FundWorkingGroupBudget' | 'LeadRemark' | 'WorkerRemark';
   }
 
-  /** @name JoystreamNodeRuntimeOriginCaller (394) */
+  /** @name JoystreamNodeRuntimeOriginCaller (414) */
   export interface JoystreamNodeRuntimeOriginCaller extends Enum {
     readonly isSystem: boolean;
     readonly asSystem: FrameSupportDispatchRawOrigin;
@@ -3906,7 +4190,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'System' | 'Void';
   }
 
-  /** @name FrameSupportDispatchRawOrigin (395) */
+  /** @name FrameSupportDispatchRawOrigin (415) */
   export interface FrameSupportDispatchRawOrigin extends Enum {
     readonly isRoot: boolean;
     readonly isSigned: boolean;
@@ -3915,16 +4199,16 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Root' | 'Signed' | 'None';
   }
 
-  /** @name SpCoreVoid (396) */
+  /** @name SpCoreVoid (416) */
   export type SpCoreVoid = Null;
 
-  /** @name PalletUtilityError (397) */
+  /** @name PalletUtilityError (417) */
   export interface PalletUtilityError extends Enum {
     readonly isTooManyCalls: boolean;
     readonly type: 'TooManyCalls';
   }
 
-  /** @name SpConsensusBabeDigestsPreDigest (404) */
+  /** @name SpConsensusBabeDigestsPreDigest (424) */
   export interface SpConsensusBabeDigestsPreDigest extends Enum {
     readonly isPrimary: boolean;
     readonly asPrimary: SpConsensusBabeDigestsPrimaryPreDigest;
@@ -3935,7 +4219,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Primary' | 'SecondaryPlain' | 'SecondaryVRF';
   }
 
-  /** @name SpConsensusBabeDigestsPrimaryPreDigest (405) */
+  /** @name SpConsensusBabeDigestsPrimaryPreDigest (425) */
   export interface SpConsensusBabeDigestsPrimaryPreDigest extends Struct {
     readonly authorityIndex: u32;
     readonly slot: u64;
@@ -3943,13 +4227,13 @@ declare module '@polkadot/types/lookup' {
     readonly vrfProof: U8aFixed;
   }
 
-  /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (406) */
+  /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (426) */
   export interface SpConsensusBabeDigestsSecondaryPlainPreDigest extends Struct {
     readonly authorityIndex: u32;
     readonly slot: u64;
   }
 
-  /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (407) */
+  /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (427) */
   export interface SpConsensusBabeDigestsSecondaryVRFPreDigest extends Struct {
     readonly authorityIndex: u32;
     readonly slot: u64;
@@ -3957,13 +4241,13 @@ declare module '@polkadot/types/lookup' {
     readonly vrfProof: U8aFixed;
   }
 
-  /** @name SpConsensusBabeBabeEpochConfiguration (409) */
+  /** @name SpConsensusBabeBabeEpochConfiguration (429) */
   export interface SpConsensusBabeBabeEpochConfiguration extends Struct {
     readonly c: ITuple<[u64, u64]>;
     readonly allowedSlots: SpConsensusBabeAllowedSlots;
   }
 
-  /** @name PalletBabeError (410) */
+  /** @name PalletBabeError (430) */
   export interface PalletBabeError extends Enum {
     readonly isInvalidEquivocationProof: boolean;
     readonly isInvalidKeyOwnershipProof: boolean;
@@ -3972,7 +4256,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InvalidEquivocationProof' | 'InvalidKeyOwnershipProof' | 'DuplicateOffenceReport' | 'InvalidConfiguration';
   }
 
-  /** @name PalletAuthorshipUncleEntryItem (412) */
+  /** @name PalletAuthorshipUncleEntryItem (432) */
   export interface PalletAuthorshipUncleEntryItem extends Enum {
     readonly isInclusionHeight: boolean;
     readonly asInclusionHeight: u32;
@@ -3981,7 +4265,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InclusionHeight' | 'Uncle';
   }
 
-  /** @name PalletAuthorshipError (413) */
+  /** @name PalletAuthorshipError (433) */
   export interface PalletAuthorshipError extends Enum {
     readonly isInvalidUncleParent: boolean;
     readonly isUnclesAlreadySet: boolean;
@@ -3993,14 +4277,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InvalidUncleParent' | 'UnclesAlreadySet' | 'TooManyUncles' | 'GenesisUncle' | 'TooHighUncle' | 'UncleAlreadyIncluded' | 'OldUncle';
   }
 
-  /** @name PalletBalancesBalanceLock (415) */
+  /** @name PalletBalancesBalanceLock (435) */
   export interface PalletBalancesBalanceLock extends Struct {
     readonly id: U8aFixed;
     readonly amount: u128;
     readonly reasons: PalletBalancesReasons;
   }
 
-  /** @name PalletBalancesReasons (416) */
+  /** @name PalletBalancesReasons (436) */
   export interface PalletBalancesReasons extends Enum {
     readonly isFee: boolean;
     readonly isMisc: boolean;
@@ -4008,20 +4292,20 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Fee' | 'Misc' | 'All';
   }
 
-  /** @name PalletBalancesReserveData (419) */
+  /** @name PalletBalancesReserveData (439) */
   export interface PalletBalancesReserveData extends Struct {
     readonly id: U8aFixed;
     readonly amount: u128;
   }
 
-  /** @name PalletBalancesReleases (421) */
+  /** @name PalletBalancesReleases (441) */
   export interface PalletBalancesReleases extends Enum {
     readonly isV100: boolean;
     readonly isV200: boolean;
     readonly type: 'V100' | 'V200';
   }
 
-  /** @name PalletBalancesError (422) */
+  /** @name PalletBalancesError (442) */
   export interface PalletBalancesError extends Enum {
     readonly isVestingBalance: boolean;
     readonly isLiquidityRestrictions: boolean;
@@ -4034,14 +4318,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'VestingBalance' | 'LiquidityRestrictions' | 'InsufficientBalance' | 'ExistentialDeposit' | 'KeepAlive' | 'ExistingVestingSchedule' | 'DeadAccount' | 'TooManyReserves';
   }
 
-  /** @name PalletTransactionPaymentReleases (424) */
+  /** @name PalletTransactionPaymentReleases (444) */
   export interface PalletTransactionPaymentReleases extends Enum {
     readonly isV1Ancient: boolean;
     readonly isV2: boolean;
     readonly type: 'V1Ancient' | 'V2';
   }
 
-  /** @name PalletElectionProviderMultiPhasePhase (425) */
+  /** @name PalletElectionProviderMultiPhasePhase (445) */
   export interface PalletElectionProviderMultiPhasePhase extends Enum {
     readonly isOff: boolean;
     readonly isSigned: boolean;
@@ -4051,20 +4335,20 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Off' | 'Signed' | 'Unsigned' | 'Emergency';
   }
 
-  /** @name PalletElectionProviderMultiPhaseReadySolution (427) */
+  /** @name PalletElectionProviderMultiPhaseReadySolution (447) */
   export interface PalletElectionProviderMultiPhaseReadySolution extends Struct {
     readonly supports: Vec<ITuple<[AccountId32, SpNposElectionsSupport]>>;
     readonly score: SpNposElectionsElectionScore;
     readonly compute: PalletElectionProviderMultiPhaseElectionCompute;
   }
 
-  /** @name PalletElectionProviderMultiPhaseRoundSnapshot (428) */
+  /** @name PalletElectionProviderMultiPhaseRoundSnapshot (448) */
   export interface PalletElectionProviderMultiPhaseRoundSnapshot extends Struct {
     readonly voters: Vec<ITuple<[AccountId32, u64, Vec<AccountId32>]>>;
     readonly targets: Vec<AccountId32>;
   }
 
-  /** @name PalletElectionProviderMultiPhaseSignedSignedSubmission (436) */
+  /** @name PalletElectionProviderMultiPhaseSignedSignedSubmission (456) */
   export interface PalletElectionProviderMultiPhaseSignedSignedSubmission extends Struct {
     readonly who: AccountId32;
     readonly deposit: u128;
@@ -4072,7 +4356,7 @@ declare module '@polkadot/types/lookup' {
     readonly callFee: u128;
   }
 
-  /** @name PalletElectionProviderMultiPhaseError (437) */
+  /** @name PalletElectionProviderMultiPhaseError (457) */
   export interface PalletElectionProviderMultiPhaseError extends Enum {
     readonly isPreDispatchEarlySubmission: boolean;
     readonly isPreDispatchWrongWinnerCount: boolean;
@@ -4089,7 +4373,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'PreDispatchEarlySubmission' | 'PreDispatchWrongWinnerCount' | 'PreDispatchWeakSubmission' | 'SignedQueueFull' | 'SignedCannotPayDeposit' | 'SignedInvalidWitness' | 'SignedTooMuchWeight' | 'OcwCallWrongEra' | 'MissingSnapshotMetadata' | 'InvalidSubmissionIndex' | 'CallNotAllowed' | 'FallbackFailed';
   }
 
-  /** @name PalletStakingStakingLedger (438) */
+  /** @name PalletStakingStakingLedger (458) */
   export interface PalletStakingStakingLedger extends Struct {
     readonly stash: AccountId32;
     readonly total: Compact<u128>;
@@ -4098,32 +4382,32 @@ declare module '@polkadot/types/lookup' {
     readonly claimedRewards: Vec<u32>;
   }
 
-  /** @name PalletStakingUnlockChunk (440) */
+  /** @name PalletStakingUnlockChunk (460) */
   export interface PalletStakingUnlockChunk extends Struct {
     readonly value: Compact<u128>;
     readonly era: Compact<u32>;
   }
 
-  /** @name PalletStakingNominations (442) */
+  /** @name PalletStakingNominations (462) */
   export interface PalletStakingNominations extends Struct {
     readonly targets: Vec<AccountId32>;
     readonly submittedIn: u32;
     readonly suppressed: bool;
   }
 
-  /** @name PalletStakingActiveEraInfo (443) */
+  /** @name PalletStakingActiveEraInfo (463) */
   export interface PalletStakingActiveEraInfo extends Struct {
     readonly index: u32;
     readonly start: Option<u64>;
   }
 
-  /** @name PalletStakingEraRewardPoints (445) */
+  /** @name PalletStakingEraRewardPoints (465) */
   export interface PalletStakingEraRewardPoints extends Struct {
     readonly total: u32;
     readonly individual: BTreeMap<AccountId32, u32>;
   }
 
-  /** @name PalletStakingForcing (449) */
+  /** @name PalletStakingForcing (469) */
   export interface PalletStakingForcing extends Enum {
     readonly isNotForcing: boolean;
     readonly isForceNew: boolean;
@@ -4132,7 +4416,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NotForcing' | 'ForceNew' | 'ForceNone' | 'ForceAlways';
   }
 
-  /** @name PalletStakingUnappliedSlash (451) */
+  /** @name PalletStakingUnappliedSlash (471) */
   export interface PalletStakingUnappliedSlash extends Struct {
     readonly validator: AccountId32;
     readonly own: u128;
@@ -4141,7 +4425,7 @@ declare module '@polkadot/types/lookup' {
     readonly payout: u128;
   }
 
-  /** @name PalletStakingSlashingSlashingSpans (453) */
+  /** @name PalletStakingSlashingSlashingSpans (473) */
   export interface PalletStakingSlashingSlashingSpans extends Struct {
     readonly spanIndex: u32;
     readonly lastStart: u32;
@@ -4149,13 +4433,13 @@ declare module '@polkadot/types/lookup' {
     readonly prior: Vec<u32>;
   }
 
-  /** @name PalletStakingSlashingSpanRecord (454) */
+  /** @name PalletStakingSlashingSpanRecord (474) */
   export interface PalletStakingSlashingSpanRecord extends Struct {
     readonly slashed: u128;
     readonly paidOut: u128;
   }
 
-  /** @name PalletStakingReleases (457) */
+  /** @name PalletStakingReleases (477) */
   export interface PalletStakingReleases extends Enum {
     readonly isV100Ancient: boolean;
     readonly isV200: boolean;
@@ -4169,7 +4453,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'V100Ancient' | 'V200' | 'V300' | 'V400' | 'V500' | 'V600' | 'V700' | 'V800' | 'V900';
   }
 
-  /** @name PalletStakingPalletError (458) */
+  /** @name PalletStakingPalletError (478) */
   export interface PalletStakingPalletError extends Enum {
     readonly isNotController: boolean;
     readonly isNotStash: boolean;
@@ -4195,13 +4479,14 @@ declare module '@polkadot/types/lookup' {
     readonly isTooManyNominators: boolean;
     readonly isTooManyValidators: boolean;
     readonly isCommissionTooLow: boolean;
-    readonly type: 'NotController' | 'NotStash' | 'AlreadyBonded' | 'AlreadyPaired' | 'EmptyTargets' | 'DuplicateIndex' | 'InvalidSlashIndex' | 'InsufficientBond' | 'NoMoreChunks' | 'NoUnlockChunk' | 'FundedTarget' | 'InvalidEraToReward' | 'InvalidNumberOfNominations' | 'NotSortedAndUnique' | 'AlreadyClaimed' | 'IncorrectHistoryDepth' | 'IncorrectSlashingSpans' | 'BadState' | 'TooManyTargets' | 'BadTarget' | 'CannotChillOther' | 'TooManyNominators' | 'TooManyValidators' | 'CommissionTooLow';
+    readonly isBondingRestricted: boolean;
+    readonly type: 'NotController' | 'NotStash' | 'AlreadyBonded' | 'AlreadyPaired' | 'EmptyTargets' | 'DuplicateIndex' | 'InvalidSlashIndex' | 'InsufficientBond' | 'NoMoreChunks' | 'NoUnlockChunk' | 'FundedTarget' | 'InvalidEraToReward' | 'InvalidNumberOfNominations' | 'NotSortedAndUnique' | 'AlreadyClaimed' | 'IncorrectHistoryDepth' | 'IncorrectSlashingSpans' | 'BadState' | 'TooManyTargets' | 'BadTarget' | 'CannotChillOther' | 'TooManyNominators' | 'TooManyValidators' | 'CommissionTooLow' | 'BondingRestricted';
   }
 
-  /** @name SpCoreCryptoKeyTypeId (462) */
+  /** @name SpCoreCryptoKeyTypeId (482) */
   export interface SpCoreCryptoKeyTypeId extends U8aFixed {}
 
-  /** @name PalletSessionError (463) */
+  /** @name PalletSessionError (483) */
   export interface PalletSessionError extends Enum {
     readonly isInvalidProof: boolean;
     readonly isNoAssociatedValidatorId: boolean;
@@ -4211,7 +4496,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'InvalidProof' | 'NoAssociatedValidatorId' | 'DuplicatedKey' | 'NoKeys' | 'NoAccount';
   }
 
-  /** @name PalletGrandpaStoredState (465) */
+  /** @name PalletGrandpaStoredState (485) */
   export interface PalletGrandpaStoredState extends Enum {
     readonly isLive: boolean;
     readonly isPendingPause: boolean;
@@ -4228,7 +4513,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Live' | 'PendingPause' | 'Paused' | 'PendingResume';
   }
 
-  /** @name PalletGrandpaStoredPendingChange (466) */
+  /** @name PalletGrandpaStoredPendingChange (486) */
   export interface PalletGrandpaStoredPendingChange extends Struct {
     readonly scheduledAt: u32;
     readonly delay: u32;
@@ -4236,7 +4521,7 @@ declare module '@polkadot/types/lookup' {
     readonly forced: Option<u32>;
   }
 
-  /** @name PalletGrandpaError (468) */
+  /** @name PalletGrandpaError (488) */
   export interface PalletGrandpaError extends Enum {
     readonly isPauseFailed: boolean;
     readonly isResumeFailed: boolean;
@@ -4248,32 +4533,32 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'PauseFailed' | 'ResumeFailed' | 'ChangePending' | 'TooSoon' | 'InvalidKeyOwnershipProof' | 'InvalidEquivocationProof' | 'DuplicateOffenceReport';
   }
 
-  /** @name PalletImOnlineBoundedOpaqueNetworkState (474) */
+  /** @name PalletImOnlineBoundedOpaqueNetworkState (494) */
   export interface PalletImOnlineBoundedOpaqueNetworkState extends Struct {
     readonly peerId: Bytes;
     readonly externalAddresses: Vec<Bytes>;
   }
 
-  /** @name PalletImOnlineError (478) */
+  /** @name PalletImOnlineError (498) */
   export interface PalletImOnlineError extends Enum {
     readonly isInvalidKey: boolean;
     readonly isDuplicatedHeartbeat: boolean;
     readonly type: 'InvalidKey' | 'DuplicatedHeartbeat';
   }
 
-  /** @name SpStakingOffenceOffenceDetails (479) */
+  /** @name SpStakingOffenceOffenceDetails (499) */
   export interface SpStakingOffenceOffenceDetails extends Struct {
     readonly offender: ITuple<[AccountId32, PalletStakingExposure]>;
     readonly reporters: Vec<AccountId32>;
   }
 
-  /** @name PalletSudoError (482) */
+  /** @name PalletSudoError (502) */
   export interface PalletSudoError extends Enum {
     readonly isRequireSudo: boolean;
     readonly type: 'RequireSudo';
   }
 
-  /** @name PalletBagsListListNode (483) */
+  /** @name PalletBagsListListNode (503) */
   export interface PalletBagsListListNode extends Struct {
     readonly id: AccountId32;
     readonly prev: Option<AccountId32>;
@@ -4282,20 +4567,20 @@ declare module '@polkadot/types/lookup' {
     readonly score: u64;
   }
 
-  /** @name PalletBagsListListBag (484) */
+  /** @name PalletBagsListListBag (504) */
   export interface PalletBagsListListBag extends Struct {
     readonly head: Option<AccountId32>;
     readonly tail: Option<AccountId32>;
   }
 
-  /** @name PalletBagsListError (485) */
+  /** @name PalletBagsListError (505) */
   export interface PalletBagsListError extends Enum {
     readonly isList: boolean;
     readonly asList: PalletBagsListListListError;
     readonly type: 'List';
   }
 
-  /** @name PalletBagsListListListError (486) */
+  /** @name PalletBagsListListListError (506) */
   export interface PalletBagsListListListError extends Enum {
     readonly isDuplicate: boolean;
     readonly isNotHeavier: boolean;
@@ -4304,14 +4589,14 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Duplicate' | 'NotHeavier' | 'NotInSameBag' | 'NodeNotFound';
   }
 
-  /** @name PalletVestingReleases (489) */
+  /** @name PalletVestingReleases (509) */
   export interface PalletVestingReleases extends Enum {
     readonly isV0: boolean;
     readonly isV1: boolean;
     readonly type: 'V0' | 'V1';
   }
 
-  /** @name PalletVestingError (490) */
+  /** @name PalletVestingError (510) */
   export interface PalletVestingError extends Enum {
     readonly isNotVesting: boolean;
     readonly isAtMaxVestingSchedules: boolean;
@@ -4321,33 +4606,67 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NotVesting' | 'AtMaxVestingSchedules' | 'AmountLow' | 'ScheduleIndexOutOfBounds' | 'InvalidScheduleParams';
   }
 
-  /** @name PalletCouncilCouncilStageUpdate (491) */
+  /** @name PalletMultisigMultisig (512) */
+  export interface PalletMultisigMultisig extends Struct {
+    readonly when: PalletMultisigTimepoint;
+    readonly deposit: u128;
+    readonly depositor: AccountId32;
+    readonly approvals: Vec<AccountId32>;
+  }
+
+  /** @name PalletMultisigError (514) */
+  export interface PalletMultisigError extends Enum {
+    readonly isMinimumThreshold: boolean;
+    readonly isAlreadyApproved: boolean;
+    readonly isNoApprovalsNeeded: boolean;
+    readonly isTooFewSignatories: boolean;
+    readonly isTooManySignatories: boolean;
+    readonly isSignatoriesOutOfOrder: boolean;
+    readonly isSenderInSignatories: boolean;
+    readonly isNotFound: boolean;
+    readonly isNotOwner: boolean;
+    readonly isNoTimepoint: boolean;
+    readonly isWrongTimepoint: boolean;
+    readonly isUnexpectedTimepoint: boolean;
+    readonly isMaxWeightTooLow: boolean;
+    readonly isAlreadyStored: boolean;
+    readonly type: 'MinimumThreshold' | 'AlreadyApproved' | 'NoApprovalsNeeded' | 'TooFewSignatories' | 'TooManySignatories' | 'SignatoriesOutOfOrder' | 'SenderInSignatories' | 'NotFound' | 'NotOwner' | 'NoTimepoint' | 'WrongTimepoint' | 'UnexpectedTimepoint' | 'MaxWeightTooLow' | 'AlreadyStored';
+  }
+
+  /** @name PalletCouncilCouncilStageUpdate (515) */
   export interface PalletCouncilCouncilStageUpdate extends Struct {
     readonly stage: PalletCouncilCouncilStage;
     readonly changedAt: u32;
   }
 
-  /** @name PalletCouncilCouncilStage (492) */
+  /** @name PalletCouncilCouncilStage (516) */
   export interface PalletCouncilCouncilStage extends Enum {
     readonly isAnnouncing: boolean;
     readonly asAnnouncing: PalletCouncilCouncilStageAnnouncing;
     readonly isElection: boolean;
     readonly asElection: PalletCouncilCouncilStageElection;
     readonly isIdle: boolean;
+    readonly asIdle: PalletCouncilCouncilStageIdle;
     readonly type: 'Announcing' | 'Election' | 'Idle';
   }
 
-  /** @name PalletCouncilCouncilStageAnnouncing (493) */
+  /** @name PalletCouncilCouncilStageAnnouncing (517) */
   export interface PalletCouncilCouncilStageAnnouncing extends Struct {
     readonly candidatesCount: u64;
+    readonly endsAt: u32;
   }
 
-  /** @name PalletCouncilCouncilStageElection (494) */
+  /** @name PalletCouncilCouncilStageElection (518) */
   export interface PalletCouncilCouncilStageElection extends Struct {
     readonly candidatesCount: u64;
   }
 
-  /** @name PalletCouncilCouncilMember (496) */
+  /** @name PalletCouncilCouncilStageIdle (519) */
+  export interface PalletCouncilCouncilStageIdle extends Struct {
+    readonly endsAt: u32;
+  }
+
+  /** @name PalletCouncilCouncilMember (521) */
   export interface PalletCouncilCouncilMember extends Struct {
     readonly stakingAccountId: AccountId32;
     readonly rewardAccountId: AccountId32;
@@ -4357,7 +4676,7 @@ declare module '@polkadot/types/lookup' {
     readonly unpaidReward: u128;
   }
 
-  /** @name PalletCouncilCandidate (497) */
+  /** @name PalletCouncilCandidate (522) */
   export interface PalletCouncilCandidate extends Struct {
     readonly stakingAccountId: AccountId32;
     readonly rewardAccountId: AccountId32;
@@ -4367,7 +4686,7 @@ declare module '@polkadot/types/lookup' {
     readonly noteHash: Option<H256>;
   }
 
-  /** @name PalletCouncilError (498) */
+  /** @name PalletCouncilError (523) */
   export interface PalletCouncilError extends Enum {
     readonly isBadOrigin: boolean;
     readonly isCantCandidateNow: boolean;
@@ -4395,7 +4714,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'BadOrigin' | 'CantCandidateNow' | 'CantReleaseStakeNow' | 'CandidacyStakeTooLow' | 'CantCandidateTwice' | 'ConflictingStake' | 'StakeStillNeeded' | 'NoStake' | 'InsufficientBalanceForStaking' | 'CantVoteForYourself' | 'MemberIdNotMatchAccount' | 'InvalidAccountToStakeReuse' | 'NotCandidatingNow' | 'CantWithdrawCandidacyNow' | 'NotCouncilor' | 'InsufficientFundsForFundingRequest' | 'ZeroBalanceFundRequest' | 'RepeatedFundRequestAccount' | 'EmptyFundingRequests' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'CandidateDoesNotExist' | 'InsufficientBalanceForTransfer';
   }
 
-  /** @name PalletReferendumReferendumStage (499) */
+  /** @name PalletReferendumReferendumStage (524) */
   export interface PalletReferendumReferendumStage extends Enum {
     readonly isInactive: boolean;
     readonly isVoting: boolean;
@@ -4405,22 +4724,24 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Inactive' | 'Voting' | 'Revealing';
   }
 
-  /** @name PalletReferendumReferendumStageVoting (500) */
+  /** @name PalletReferendumReferendumStageVoting (525) */
   export interface PalletReferendumReferendumStageVoting extends Struct {
     readonly started: u32;
     readonly winningTargetCount: u64;
     readonly currentCycleId: u64;
+    readonly endsAt: u32;
   }
 
-  /** @name PalletReferendumReferendumStageRevealing (501) */
+  /** @name PalletReferendumReferendumStageRevealing (526) */
   export interface PalletReferendumReferendumStageRevealing extends Struct {
     readonly started: u32;
     readonly winningTargetCount: u64;
     readonly intermediateWinners: Vec<PalletReferendumOptionResult>;
     readonly currentCycleId: u64;
+    readonly endsAt: u32;
   }
 
-  /** @name PalletReferendumCastVote (502) */
+  /** @name PalletReferendumCastVote (527) */
   export interface PalletReferendumCastVote extends Struct {
     readonly commitment: H256;
     readonly cycleId: u64;
@@ -4428,7 +4749,7 @@ declare module '@polkadot/types/lookup' {
     readonly voteFor: Option<u64>;
   }
 
-  /** @name PalletReferendumError (503) */
+  /** @name PalletReferendumError (528) */
   export interface PalletReferendumError extends Enum {
     readonly isBadOrigin: boolean;
     readonly isReferendumNotRunning: boolean;
@@ -4446,7 +4767,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'BadOrigin' | 'ReferendumNotRunning' | 'RevealingNotInProgress' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToStake' | 'InsufficientStake' | 'InvalidReveal' | 'InvalidVote' | 'VoteNotExisting' | 'AlreadyVotedThisCycle' | 'UnstakingVoteInSameCycle' | 'SaltTooLong' | 'UnstakingForbidden';
   }
 
-  /** @name PalletMembershipMembershipObject (504) */
+  /** @name PalletMembershipMembershipObject (529) */
   export interface PalletMembershipMembershipObject extends Struct {
     readonly handleHash: Bytes;
     readonly rootAccount: AccountId32;
@@ -4455,13 +4776,13 @@ declare module '@polkadot/types/lookup' {
     readonly invites: u32;
   }
 
-  /** @name PalletMembershipStakingAccountMemberBinding (505) */
+  /** @name PalletMembershipStakingAccountMemberBinding (530) */
   export interface PalletMembershipStakingAccountMemberBinding extends Struct {
     readonly memberId: u64;
     readonly confirmed: bool;
   }
 
-  /** @name PalletMembershipError (506) */
+  /** @name PalletMembershipError (531) */
   export interface PalletMembershipError extends Enum {
     readonly isNotEnoughBalanceToBuyMembership: boolean;
     readonly isControllerAccountRequired: boolean;
@@ -4487,7 +4808,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'NotEnoughBalanceToBuyMembership' | 'ControllerAccountRequired' | 'RootAccountRequired' | 'UnsignedOrigin' | 'MemberProfileNotFound' | 'HandleAlreadyRegistered' | 'HandleMustBeProvidedDuringRegistration' | 'ReferrerIsNotMember' | 'CannotTransferInvitesForNotMember' | 'NotEnoughInvites' | 'WorkingGroupLeaderNotSet' | 'StakingAccountIsAlreadyRegistered' | 'StakingAccountDoesntExist' | 'StakingAccountAlreadyConfirmed' | 'WorkingGroupBudgetIsNotSufficientForInviting' | 'ConflictingLock' | 'CannotExceedReferralCutPercentLimit' | 'ConflictStakesOnAccount' | 'InsufficientBalanceToCoverStake' | 'GifLockExceedsCredit' | 'InsufficientBalanceToGift';
   }
 
-  /** @name PalletForumCategory (507) */
+  /** @name PalletForumCategory (532) */
   export interface PalletForumCategory extends Struct {
     readonly titleHash: H256;
     readonly descriptionHash: H256;
@@ -4499,24 +4820,24 @@ declare module '@polkadot/types/lookup' {
     readonly stickyThreadIds: Vec<u64>;
   }
 
-  /** @name PalletForumThread (508) */
+  /** @name PalletForumThread (533) */
   export interface PalletForumThread extends Struct {
     readonly categoryId: u64;
     readonly authorId: u64;
-    readonly cleanupPayOff: u128;
-    readonly numberOfPosts: u64;
+    readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
+    readonly numberOfEditablePosts: u64;
   }
 
-  /** @name PalletForumPost (509) */
+  /** @name PalletForumPost (534) */
   export interface PalletForumPost extends Struct {
     readonly threadId: u64;
     readonly textHash: H256;
     readonly authorId: u64;
-    readonly cleanupPayOff: u128;
+    readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
     readonly lastEdited: u32;
   }
 
-  /** @name PalletForumError (510) */
+  /** @name PalletForumError (535) */
   export interface PalletForumError extends Enum {
     readonly isOriginNotForumLead: boolean;
     readonly isForumUserIdNotMatchAccount: boolean;
@@ -4542,26 +4863,104 @@ declare module '@polkadot/types/lookup' {
     readonly isModeratorCantDeleteCategory: boolean;
     readonly isModeratorCantUpdateCategory: boolean;
     readonly isStickiedThreadIdsDuplicates: boolean;
-    readonly isDataMigrationNotDone: boolean;
     readonly isMapSizeLimit: boolean;
     readonly isPathLengthShouldBeGreaterThanZero: boolean;
-    readonly type: 'OriginNotForumLead' | 'ForumUserIdNotMatchAccount' | 'ModeratorIdNotMatchAccount' | 'AccountDoesNotMatchThreadAuthor' | 'ThreadDoesNotExist' | 'ModeratorModerateOriginCategory' | 'ModeratorModerateDestinationCategory' | 'ThreadMoveInvalid' | 'ThreadNotBeingUpdated' | 'InsufficientBalanceForThreadCreation' | 'CannotDeleteThreadWithOutstandingPosts' | 'PostDoesNotExist' | 'AccountDoesNotMatchPostAuthor' | 'InsufficientBalanceForPost' | 'CategoryNotBeingUpdated' | 'AncestorCategoryImmutable' | 'MaxValidCategoryDepthExceeded' | 'CategoryDoesNotExist' | 'CategoryModeratorDoesNotExist' | 'CategoryNotEmptyThreads' | 'CategoryNotEmptyCategories' | 'ModeratorCantDeleteCategory' | 'ModeratorCantUpdateCategory' | 'StickiedThreadIdsDuplicates' | 'DataMigrationNotDone' | 'MapSizeLimit' | 'PathLengthShouldBeGreaterThanZero';
+    readonly type: 'OriginNotForumLead' | 'ForumUserIdNotMatchAccount' | 'ModeratorIdNotMatchAccount' | 'AccountDoesNotMatchThreadAuthor' | 'ThreadDoesNotExist' | 'ModeratorModerateOriginCategory' | 'ModeratorModerateDestinationCategory' | 'ThreadMoveInvalid' | 'ThreadNotBeingUpdated' | 'InsufficientBalanceForThreadCreation' | 'CannotDeleteThreadWithOutstandingPosts' | 'PostDoesNotExist' | 'AccountDoesNotMatchPostAuthor' | 'InsufficientBalanceForPost' | 'CategoryNotBeingUpdated' | 'AncestorCategoryImmutable' | 'MaxValidCategoryDepthExceeded' | 'CategoryDoesNotExist' | 'CategoryModeratorDoesNotExist' | 'CategoryNotEmptyThreads' | 'CategoryNotEmptyCategories' | 'ModeratorCantDeleteCategory' | 'ModeratorCantUpdateCategory' | 'StickiedThreadIdsDuplicates' | 'MapSizeLimit' | 'PathLengthShouldBeGreaterThanZero';
   }
 
-  /** @name PalletConstitutionConstitutionInfo (511) */
+  /** @name PalletConstitutionConstitutionInfo (536) */
   export interface PalletConstitutionConstitutionInfo extends Struct {
     readonly textHash: Bytes;
   }
 
-  /** @name PalletContentVideoRecord (513) */
+  /** @name PalletBountyBountyRecord (537) */
+  export interface PalletBountyBountyRecord extends Struct {
+    readonly creationParams: PalletBountyBountyParameters;
+    readonly totalFunding: u128;
+    readonly milestone: PalletBountyBountyMilestone;
+    readonly activeWorkEntryCount: u32;
+    readonly hasUnpaidOracleReward: bool;
+  }
+
+  /** @name PalletBountyBountyMilestone (538) */
+  export interface PalletBountyBountyMilestone extends Enum {
+    readonly isCreated: boolean;
+    readonly asCreated: {
+      readonly createdAt: u32;
+      readonly hasContributions: bool;
+    } & Struct;
+    readonly isBountyMaxFundingReached: boolean;
+    readonly isWorkSubmitted: boolean;
+    readonly isTerminated: boolean;
+    readonly isJudgmentSubmitted: boolean;
+    readonly asJudgmentSubmitted: {
+      readonly successfulBounty: bool;
+    } & Struct;
+    readonly type: 'Created' | 'BountyMaxFundingReached' | 'WorkSubmitted' | 'Terminated' | 'JudgmentSubmitted';
+  }
+
+  /** @name PalletBountyContribution (540) */
+  export interface PalletBountyContribution extends Struct {
+    readonly amount: u128;
+    readonly funderStateBloatBondAmount: u128;
+  }
+
+  /** @name PalletBountyEntryRecord (541) */
+  export interface PalletBountyEntryRecord extends Struct {
+    readonly memberId: u64;
+    readonly stakingAccountId: AccountId32;
+    readonly submittedAt: u32;
+    readonly workSubmitted: bool;
+  }
+
+  /** @name PalletBountyError (542) */
+  export interface PalletBountyError extends Enum {
+    readonly isMinFundingAmountCannotBeGreaterThanMaxAmount: boolean;
+    readonly isBountyDoesntExist: boolean;
+    readonly isSwitchOracleOriginIsRoot: boolean;
+    readonly isInvalidStageUnexpectedFunding: boolean;
+    readonly isInvalidStageUnexpectedNoFundingContributed: boolean;
+    readonly isInvalidStageUnexpectedCancelled: boolean;
+    readonly isInvalidStageUnexpectedWorkSubmission: boolean;
+    readonly isInvalidStageUnexpectedJudgment: boolean;
+    readonly isInvalidStageUnexpectedSuccessfulBountyWithdrawal: boolean;
+    readonly isInvalidStageUnexpectedFailedBountyWithdrawal: boolean;
+    readonly isInsufficientBalanceForBounty: boolean;
+    readonly isNoBountyContributionFound: boolean;
+    readonly isInsufficientBalanceForStake: boolean;
+    readonly isConflictingStakes: boolean;
+    readonly isWorkEntryDoesntExist: boolean;
+    readonly isCherryLessThenMinimumAllowed: boolean;
+    readonly isCannotSubmitWorkToClosedContractBounty: boolean;
+    readonly isClosedContractMemberListIsEmpty: boolean;
+    readonly isClosedContractMemberListIsTooLarge: boolean;
+    readonly isClosedContractMemberNotFound: boolean;
+    readonly isInvalidOracleMemberId: boolean;
+    readonly isInvalidStakingAccountForMember: boolean;
+    readonly isZeroWinnerReward: boolean;
+    readonly isTotalRewardShouldBeEqualToTotalFunding: boolean;
+    readonly isEntrantStakeIsLessThanMininum: boolean;
+    readonly isFundingAmountCannotBeZero: boolean;
+    readonly isFundingPeriodCannotBeZero: boolean;
+    readonly isWinnerShouldHasWorkSubmission: boolean;
+    readonly isInvalidContributorActorSpecified: boolean;
+    readonly isInvalidOracleActorSpecified: boolean;
+    readonly isInvalidEntrantWorkerSpecified: boolean;
+    readonly isInvalidCreatorActorSpecified: boolean;
+    readonly isWorkEntryDoesntBelongToWorker: boolean;
+    readonly isOracleRewardAlreadyWithdrawn: boolean;
+    readonly type: 'MinFundingAmountCannotBeGreaterThanMaxAmount' | 'BountyDoesntExist' | 'SwitchOracleOriginIsRoot' | 'InvalidStageUnexpectedFunding' | 'InvalidStageUnexpectedNoFundingContributed' | 'InvalidStageUnexpectedCancelled' | 'InvalidStageUnexpectedWorkSubmission' | 'InvalidStageUnexpectedJudgment' | 'InvalidStageUnexpectedSuccessfulBountyWithdrawal' | 'InvalidStageUnexpectedFailedBountyWithdrawal' | 'InsufficientBalanceForBounty' | 'NoBountyContributionFound' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'WorkEntryDoesntExist' | 'CherryLessThenMinimumAllowed' | 'CannotSubmitWorkToClosedContractBounty' | 'ClosedContractMemberListIsEmpty' | 'ClosedContractMemberListIsTooLarge' | 'ClosedContractMemberNotFound' | 'InvalidOracleMemberId' | 'InvalidStakingAccountForMember' | 'ZeroWinnerReward' | 'TotalRewardShouldBeEqualToTotalFunding' | 'EntrantStakeIsLessThanMininum' | 'FundingAmountCannotBeZero' | 'FundingPeriodCannotBeZero' | 'WinnerShouldHasWorkSubmission' | 'InvalidContributorActorSpecified' | 'InvalidOracleActorSpecified' | 'InvalidEntrantWorkerSpecified' | 'InvalidCreatorActorSpecified' | 'WorkEntryDoesntBelongToWorker' | 'OracleRewardAlreadyWithdrawn';
+  }
+
+  /** @name PalletContentVideoRecord (544) */
   export interface PalletContentVideoRecord extends Struct {
     readonly inChannel: u64;
     readonly nftStatus: Option<PalletContentNftTypesOwnedNft>;
     readonly dataObjects: BTreeSet<u64>;
-    readonly videoStateBloatBond: u128;
+    readonly videoStateBloatBond: PalletCommonBloatBondRepayableBloatBond;
   }
 
-  /** @name PalletContentNftTypesOwnedNft (514) */
+  /** @name PalletContentNftTypesOwnedNft (545) */
   export interface PalletContentNftTypesOwnedNft extends Struct {
     readonly owner: PalletContentNftTypesNftOwner;
     readonly transactionalStatus: PalletContentNftTypesTransactionalStatusRecord;
@@ -4569,7 +4968,7 @@ declare module '@polkadot/types/lookup' {
     readonly openAuctionsNonce: u64;
   }
 
-  /** @name PalletContentNftTypesTransactionalStatusRecord (515) */
+  /** @name PalletContentNftTypesTransactionalStatusRecord (546) */
   export interface PalletContentNftTypesTransactionalStatusRecord extends Enum {
     readonly isIdle: boolean;
     readonly isInitiatedOfferToMember: boolean;
@@ -4583,7 +4982,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Idle' | 'InitiatedOfferToMember' | 'EnglishAuction' | 'OpenAuction' | 'BuyNow';
   }
 
-  /** @name PalletContentNftTypesEnglishAuctionRecord (516) */
+  /** @name PalletContentNftTypesEnglishAuctionRecord (547) */
   export interface PalletContentNftTypesEnglishAuctionRecord extends Struct {
     readonly startingPrice: u128;
     readonly buyNowPrice: Option<u128>;
@@ -4595,13 +4994,13 @@ declare module '@polkadot/types/lookup' {
     readonly topBid: Option<PalletContentNftTypesEnglishAuctionBid>;
   }
 
-  /** @name PalletContentNftTypesEnglishAuctionBid (518) */
+  /** @name PalletContentNftTypesEnglishAuctionBid (549) */
   export interface PalletContentNftTypesEnglishAuctionBid extends Struct {
     readonly amount: u128;
     readonly bidderId: u64;
   }
 
-  /** @name PalletContentNftTypesOpenAuctionRecord (519) */
+  /** @name PalletContentNftTypesOpenAuctionRecord (550) */
   export interface PalletContentNftTypesOpenAuctionRecord extends Struct {
     readonly startingPrice: u128;
     readonly buyNowPrice: Option<u128>;
@@ -4611,7 +5010,7 @@ declare module '@polkadot/types/lookup' {
     readonly start: u32;
   }
 
-  /** @name PalletContentNftTypesNftOwner (520) */
+  /** @name PalletContentNftTypesNftOwner (551) */
   export interface PalletContentNftTypesNftOwner extends Enum {
     readonly isChannelOwner: boolean;
     readonly isMember: boolean;
@@ -4619,26 +5018,36 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'ChannelOwner' | 'Member';
   }
 
-  /** @name PalletContentPermissionsCuratorGroup (522) */
+  /** @name PalletContentPermissionsCuratorGroup (554) */
   export interface PalletContentPermissionsCuratorGroup extends Struct {
     readonly curators: BTreeMap<u64, BTreeSet<PalletContentChannelActionPermission>>;
     readonly active: bool;
     readonly permissionsByLevel: BTreeMap<u8, BTreeSet<PalletContentPermissionsCuratorGroupContentModerationAction>>;
   }
 
-  /** @name PalletContentNftTypesOpenAuctionBidRecord (523) */
+  /** @name PalletContentNftTypesOpenAuctionBidRecord (555) */
   export interface PalletContentNftTypesOpenAuctionBidRecord extends Struct {
     readonly amount: u128;
     readonly madeAtBlock: u32;
     readonly auctionId: u64;
   }
 
-  /** @name PalletContentErrorsError (524) */
+  /** @name PalletContentErrorsError (556) */
   export interface PalletContentErrorsError extends Enum {
     readonly isChannelStateBloatBondChanged: boolean;
     readonly isVideoStateBloatBondChanged: boolean;
     readonly isMinCashoutValueTooLow: boolean;
     readonly isMaxCashoutValueTooHigh: boolean;
+    readonly isMaxNumberOfChannelCollaboratorsExceeded: boolean;
+    readonly isMaxNumberOfChannelAssetsExceeded: boolean;
+    readonly isMaxNumberOfVideoAssetsExceeded: boolean;
+    readonly isInvalidChannelBagWitnessProvided: boolean;
+    readonly isInvalidStorageBucketsNumWitnessProvided: boolean;
+    readonly isMissingStorageBucketsNumWitness: boolean;
+    readonly isChannelOwnerMemberDoesNotExist: boolean;
+    readonly isChannelOwnerCuratorGroupDoesNotExist: boolean;
+    readonly isChannelStateBloatBondBelowExistentialDeposit: boolean;
+    readonly isNumberOfAssetsToRemoveIsZero: boolean;
     readonly isCuratorIsNotAMemberOfGivenCuratorGroup: boolean;
     readonly isCuratorIsAlreadyAMemberOfGivenCuratorGroup: boolean;
     readonly isCuratorGroupDoesNotExist: boolean;
@@ -4656,6 +5065,7 @@ declare module '@polkadot/types/lookup' {
     readonly isVideoInSeason: boolean;
     readonly isActorCannotBeLead: boolean;
     readonly isActorCannotOwnChannel: boolean;
+    readonly isNftAlreadyOwnedByChannel: boolean;
     readonly isNftAlreadyExists: boolean;
     readonly isNftDoesNotExist: boolean;
     readonly isOverflowOrUnderflowHappened: boolean;
@@ -4696,11 +5106,13 @@ declare module '@polkadot/types/lookup' {
     readonly isIsNotEnglishAuctionType: boolean;
     readonly isBidLockDurationIsNotExpired: boolean;
     readonly isNftAuctionIsAlreadyExpired: boolean;
-    readonly isBuyNowIsLessThenStartingPrice: boolean;
+    readonly isBuyNowMustBeGreaterThanStartingPrice: boolean;
     readonly isTargetMemberDoesNotExist: boolean;
     readonly isInvalidNftOfferWitnessPriceProvided: boolean;
     readonly isMaxAuctionWhiteListLengthUpperBoundExceeded: boolean;
     readonly isWhitelistHasOnlyOneMember: boolean;
+    readonly isWhitelistedMemberDoesNotExist: boolean;
+    readonly isNftNonChannelOwnerDoesNotExist: boolean;
     readonly isExtensionPeriodIsGreaterThenAuctionDuration: boolean;
     readonly isNoAssetsSpecified: boolean;
     readonly isInvalidAssetsProvided: boolean;
@@ -4716,7 +5128,7 @@ declare module '@polkadot/types/lookup' {
     readonly isPaymentProofVerificationFailed: boolean;
     readonly isCashoutAmountExceedsMaximumAmount: boolean;
     readonly isCashoutAmountBelowMinimumAmount: boolean;
-    readonly isWithdrawFromChannelAmountExceedsBalanceMinusExistentialDeposit: boolean;
+    readonly isWithdrawalAmountExceedsChannelAccountWithdrawableBalance: boolean;
     readonly isWithdrawFromChannelAmountIsZero: boolean;
     readonly isChannelCashoutsDisabled: boolean;
     readonly isMinCashoutAllowedExceedsMaxCashoutAllowed: boolean;
@@ -4747,10 +5159,10 @@ declare module '@polkadot/types/lookup' {
     readonly isPatronageCanOnlyBeClaimedForMemberOwnedChannels: boolean;
     readonly isChannelTransfersBlockedDuringRevenueSplits: boolean;
     readonly isChannelTransfersBlockedDuringTokenSales: boolean;
-    readonly type: 'ChannelStateBloatBondChanged' | 'VideoStateBloatBondChanged' | 'MinCashoutValueTooLow' | 'MaxCashoutValueTooHigh' | 'CuratorIsNotAMemberOfGivenCuratorGroup' | 'CuratorIsAlreadyAMemberOfGivenCuratorGroup' | 'CuratorGroupDoesNotExist' | 'CuratorsPerGroupLimitReached' | 'CuratorGroupIsNotActive' | 'CuratorIdInvalid' | 'LeadAuthFailed' | 'MemberAuthFailed' | 'CuratorAuthFailed' | 'BadOrigin' | 'ActorNotAuthorized' | 'CategoryDoesNotExist' | 'ChannelDoesNotExist' | 'VideoDoesNotExist' | 'VideoInSeason' | 'ActorCannotBeLead' | 'ActorCannotOwnChannel' | 'NftAlreadyExists' | 'NftDoesNotExist' | 'OverflowOrUnderflowHappened' | 'DoesNotOwnNft' | 'RoyaltyUpperBoundExceeded' | 'RoyaltyLowerBoundExceeded' | 'AuctionDurationUpperBoundExceeded' | 'AuctionDurationLowerBoundExceeded' | 'ExtensionPeriodUpperBoundExceeded' | 'ExtensionPeriodLowerBoundExceeded' | 'BidLockDurationUpperBoundExceeded' | 'BidLockDurationLowerBoundExceeded' | 'StartingPriceUpperBoundExceeded' | 'StartingPriceLowerBoundExceeded' | 'AuctionBidStepUpperBoundExceeded' | 'AuctionBidStepLowerBoundExceeded' | 'InsufficientBalance' | 'BidStepConstraintViolated' | 'InvalidBidAmountSpecified' | 'StartingPriceConstraintViolated' | 'ActionHasBidsAlready' | 'NftIsNotIdle' | 'PendingOfferDoesNotExist' | 'RewardAccountIsNotSet' | 'ActorIsNotBidder' | 'AuctionCannotBeCompleted' | 'BidDoesNotExist' | 'BidIsForPastAuction' | 'StartsAtLowerBoundExceeded' | 'StartsAtUpperBoundExceeded' | 'AuctionDidNotStart' | 'NotInAuctionState' | 'MemberIsNotAllowedToParticipate' | 'MemberProfileNotFound' | 'NftNotInBuyNowState' | 'InvalidBuyNowWitnessPriceProvided' | 'IsNotOpenAuctionType' | 'IsNotEnglishAuctionType' | 'BidLockDurationIsNotExpired' | 'NftAuctionIsAlreadyExpired' | 'BuyNowIsLessThenStartingPrice' | 'TargetMemberDoesNotExist' | 'InvalidNftOfferWitnessPriceProvided' | 'MaxAuctionWhiteListLengthUpperBoundExceeded' | 'WhitelistHasOnlyOneMember' | 'ExtensionPeriodIsGreaterThenAuctionDuration' | 'NoAssetsSpecified' | 'InvalidAssetsProvided' | 'ChannelContainsVideos' | 'ChannelContainsAssets' | 'InvalidBagSizeSpecified' | 'MigrationNotFinished' | 'ReplyDoesNotExist' | 'UnsufficientBalance' | 'InsufficientTreasuryBalance' | 'InvalidMemberProvided' | 'ActorNotAMember' | 'PaymentProofVerificationFailed' | 'CashoutAmountExceedsMaximumAmount' | 'CashoutAmountBelowMinimumAmount' | 'WithdrawFromChannelAmountExceedsBalanceMinusExistentialDeposit' | 'WithdrawFromChannelAmountIsZero' | 'ChannelCashoutsDisabled' | 'MinCashoutAllowedExceedsMaxCashoutAllowed' | 'CuratorModerationActionNotAllowed' | 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded' | 'ChannelFeaturePaused' | 'ChannelBagMissing' | 'AssetsToRemoveBeyondEntityAssetsSet' | 'InvalidVideoDataObjectsCountProvided' | 'InvalidChannelTransferStatus' | 'InvalidChannelTransferAcceptor' | 'InvalidChannelTransferCommitmentParams' | 'ChannelAgentInsufficientPermissions' | 'InvalidChannelOwner' | 'ZeroReward' | 'InsufficientBalanceForTransfer' | 'InsufficientBalanceForChannelCreation' | 'InsufficientBalanceForVideoCreation' | 'InsufficientCouncilBudget' | 'GlobalNftDailyLimitExceeded' | 'GlobalNftWeeklyLimitExceeded' | 'ChannelNftDailyLimitExceeded' | 'ChannelNftWeeklyLimitExceeded' | 'CreatorTokenAlreadyIssued' | 'CreatorTokenNotIssued' | 'MemberIdCouldNotBeDerivedFromActor' | 'CannotWithdrawFromChannelWithCreatorTokenIssued' | 'PatronageCanOnlyBeClaimedForMemberOwnedChannels' | 'ChannelTransfersBlockedDuringRevenueSplits' | 'ChannelTransfersBlockedDuringTokenSales';
+    readonly type: 'ChannelStateBloatBondChanged' | 'VideoStateBloatBondChanged' | 'MinCashoutValueTooLow' | 'MaxCashoutValueTooHigh' | 'MaxNumberOfChannelCollaboratorsExceeded' | 'MaxNumberOfChannelAssetsExceeded' | 'MaxNumberOfVideoAssetsExceeded' | 'InvalidChannelBagWitnessProvided' | 'InvalidStorageBucketsNumWitnessProvided' | 'MissingStorageBucketsNumWitness' | 'ChannelOwnerMemberDoesNotExist' | 'ChannelOwnerCuratorGroupDoesNotExist' | 'ChannelStateBloatBondBelowExistentialDeposit' | 'NumberOfAssetsToRemoveIsZero' | 'CuratorIsNotAMemberOfGivenCuratorGroup' | 'CuratorIsAlreadyAMemberOfGivenCuratorGroup' | 'CuratorGroupDoesNotExist' | 'CuratorsPerGroupLimitReached' | 'CuratorGroupIsNotActive' | 'CuratorIdInvalid' | 'LeadAuthFailed' | 'MemberAuthFailed' | 'CuratorAuthFailed' | 'BadOrigin' | 'ActorNotAuthorized' | 'CategoryDoesNotExist' | 'ChannelDoesNotExist' | 'VideoDoesNotExist' | 'VideoInSeason' | 'ActorCannotBeLead' | 'ActorCannotOwnChannel' | 'NftAlreadyOwnedByChannel' | 'NftAlreadyExists' | 'NftDoesNotExist' | 'OverflowOrUnderflowHappened' | 'DoesNotOwnNft' | 'RoyaltyUpperBoundExceeded' | 'RoyaltyLowerBoundExceeded' | 'AuctionDurationUpperBoundExceeded' | 'AuctionDurationLowerBoundExceeded' | 'ExtensionPeriodUpperBoundExceeded' | 'ExtensionPeriodLowerBoundExceeded' | 'BidLockDurationUpperBoundExceeded' | 'BidLockDurationLowerBoundExceeded' | 'StartingPriceUpperBoundExceeded' | 'StartingPriceLowerBoundExceeded' | 'AuctionBidStepUpperBoundExceeded' | 'AuctionBidStepLowerBoundExceeded' | 'InsufficientBalance' | 'BidStepConstraintViolated' | 'InvalidBidAmountSpecified' | 'StartingPriceConstraintViolated' | 'ActionHasBidsAlready' | 'NftIsNotIdle' | 'PendingOfferDoesNotExist' | 'RewardAccountIsNotSet' | 'ActorIsNotBidder' | 'AuctionCannotBeCompleted' | 'BidDoesNotExist' | 'BidIsForPastAuction' | 'StartsAtLowerBoundExceeded' | 'StartsAtUpperBoundExceeded' | 'AuctionDidNotStart' | 'NotInAuctionState' | 'MemberIsNotAllowedToParticipate' | 'MemberProfileNotFound' | 'NftNotInBuyNowState' | 'InvalidBuyNowWitnessPriceProvided' | 'IsNotOpenAuctionType' | 'IsNotEnglishAuctionType' | 'BidLockDurationIsNotExpired' | 'NftAuctionIsAlreadyExpired' | 'BuyNowMustBeGreaterThanStartingPrice' | 'TargetMemberDoesNotExist' | 'InvalidNftOfferWitnessPriceProvided' | 'MaxAuctionWhiteListLengthUpperBoundExceeded' | 'WhitelistHasOnlyOneMember' | 'WhitelistedMemberDoesNotExist' | 'NftNonChannelOwnerDoesNotExist' | 'ExtensionPeriodIsGreaterThenAuctionDuration' | 'NoAssetsSpecified' | 'InvalidAssetsProvided' | 'ChannelContainsVideos' | 'ChannelContainsAssets' | 'InvalidBagSizeSpecified' | 'MigrationNotFinished' | 'ReplyDoesNotExist' | 'UnsufficientBalance' | 'InsufficientTreasuryBalance' | 'InvalidMemberProvided' | 'ActorNotAMember' | 'PaymentProofVerificationFailed' | 'CashoutAmountExceedsMaximumAmount' | 'CashoutAmountBelowMinimumAmount' | 'WithdrawalAmountExceedsChannelAccountWithdrawableBalance' | 'WithdrawFromChannelAmountIsZero' | 'ChannelCashoutsDisabled' | 'MinCashoutAllowedExceedsMaxCashoutAllowed' | 'CuratorModerationActionNotAllowed' | 'CuratorGroupMaxPermissionsByLevelMapSizeExceeded' | 'ChannelFeaturePaused' | 'ChannelBagMissing' | 'AssetsToRemoveBeyondEntityAssetsSet' | 'InvalidVideoDataObjectsCountProvided' | 'InvalidChannelTransferStatus' | 'InvalidChannelTransferAcceptor' | 'InvalidChannelTransferCommitmentParams' | 'ChannelAgentInsufficientPermissions' | 'InvalidChannelOwner' | 'ZeroReward' | 'InsufficientBalanceForTransfer' | 'InsufficientBalanceForChannelCreation' | 'InsufficientBalanceForVideoCreation' | 'InsufficientCouncilBudget' | 'GlobalNftDailyLimitExceeded' | 'GlobalNftWeeklyLimitExceeded' | 'ChannelNftDailyLimitExceeded' | 'ChannelNftWeeklyLimitExceeded' | 'CreatorTokenAlreadyIssued' | 'CreatorTokenNotIssued' | 'MemberIdCouldNotBeDerivedFromActor' | 'CannotWithdrawFromChannelWithCreatorTokenIssued' | 'PatronageCanOnlyBeClaimedForMemberOwnedChannels' | 'ChannelTransfersBlockedDuringRevenueSplits' | 'ChannelTransfersBlockedDuringTokenSales';
   }
 
-  /** @name PalletStorageBagRecord (525) */
+  /** @name PalletStorageBagRecord (557) */
   export interface PalletStorageBagRecord extends Struct {
     readonly storedBy: BTreeSet<u64>;
     readonly distributedBy: BTreeSet<PalletStorageDistributionBucketIdRecord>;
@@ -4758,7 +5170,7 @@ declare module '@polkadot/types/lookup' {
     readonly objectsNumber: u64;
   }
 
-  /** @name PalletStorageStorageBucketRecord (526) */
+  /** @name PalletStorageStorageBucketRecord (558) */
   export interface PalletStorageStorageBucketRecord extends Struct {
     readonly operatorStatus: PalletStorageStorageBucketOperatorStatus;
     readonly acceptingNewBags: bool;
@@ -4766,7 +5178,7 @@ declare module '@polkadot/types/lookup' {
     readonly assignedBags: u64;
   }
 
-  /** @name PalletStorageStorageBucketOperatorStatus (527) */
+  /** @name PalletStorageStorageBucketOperatorStatus (559) */
   export interface PalletStorageStorageBucketOperatorStatus extends Enum {
     readonly isMissing: boolean;
     readonly isInvitedStorageWorker: boolean;
@@ -4776,26 +5188,26 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Missing' | 'InvitedStorageWorker' | 'StorageWorker';
   }
 
-  /** @name PalletStorageDynamicBagCreationPolicy (528) */
+  /** @name PalletStorageDynamicBagCreationPolicy (560) */
   export interface PalletStorageDynamicBagCreationPolicy extends Struct {
     readonly numberOfStorageBuckets: u64;
     readonly families: BTreeMap<u64, u32>;
   }
 
-  /** @name PalletStorageDataObject (530) */
+  /** @name PalletStorageDataObject (562) */
   export interface PalletStorageDataObject extends Struct {
     readonly accepted: bool;
-    readonly stateBloatBond: u128;
+    readonly stateBloatBond: PalletCommonBloatBondRepayableBloatBond;
     readonly size_: u64;
     readonly ipfsContentId: Bytes;
   }
 
-  /** @name PalletStorageDistributionBucketFamilyRecord (531) */
+  /** @name PalletStorageDistributionBucketFamilyRecord (563) */
   export interface PalletStorageDistributionBucketFamilyRecord extends Struct {
     readonly nextDistributionBucketIndex: u64;
   }
 
-  /** @name PalletStorageDistributionBucketRecord (532) */
+  /** @name PalletStorageDistributionBucketRecord (564) */
   export interface PalletStorageDistributionBucketRecord extends Struct {
     readonly acceptingNewBags: bool;
     readonly distributing: bool;
@@ -4804,13 +5216,13 @@ declare module '@polkadot/types/lookup' {
     readonly assignedBags: u64;
   }
 
-  /** @name PalletCommonConstraintsBoundedValueConstraint (533) */
+  /** @name PalletCommonConstraintsBoundedValueConstraint (565) */
   export interface PalletCommonConstraintsBoundedValueConstraint extends Struct {
     readonly min: u64;
     readonly maxMinDiff: u64;
   }
 
-  /** @name PalletStorageError (534) */
+  /** @name PalletStorageError (566) */
   export interface PalletStorageError extends Enum {
     readonly isArithmeticError: boolean;
     readonly isInvalidCidLength: boolean;
@@ -4875,20 +5287,21 @@ declare module '@polkadot/types/lookup' {
     readonly isInvalidTransactorAccount: boolean;
     readonly isNumberOfStorageBucketsOutsideOfAllowedContraints: boolean;
     readonly isNumberOfDistributionBucketsOutsideOfAllowedContraints: boolean;
-    readonly type: 'ArithmeticError' | 'InvalidCidLength' | 'NoObjectsOnUpload' | 'StorageBucketDoesntExist' | 'StorageBucketIsNotBoundToBag' | 'StorageBucketIsBoundToBag' | 'NoStorageBucketInvitation' | 'StorageProviderAlreadySet' | 'StorageProviderMustBeSet' | 'DifferentStorageProviderInvited' | 'InvitedStorageProvider' | 'StorageBucketIdCollectionsAreEmpty' | 'StorageBucketsNumberViolatesDynamicBagCreationPolicy' | 'DistributionBucketsViolatesDynamicBagCreationPolicy' | 'EmptyContentId' | 'ZeroObjectSize' | 'InvalidStateBloatBondSourceAccount' | 'InvalidStorageProvider' | 'InsufficientBalance' | 'DataObjectDoesntExist' | 'UploadingBlocked' | 'DataObjectIdCollectionIsEmpty' | 'SourceAndDestinationBagsAreEqual' | 'DataObjectBlacklisted' | 'BlacklistSizeLimitExceeded' | 'VoucherMaxObjectSizeLimitExceeded' | 'VoucherMaxObjectNumberLimitExceeded' | 'StorageBucketObjectNumberLimitReached' | 'StorageBucketObjectSizeLimitReached' | 'InsufficientTreasuryBalance' | 'CannotDeleteNonEmptyStorageBucket' | 'DataObjectIdParamsAreEmpty' | 'StorageBucketsPerBagLimitTooLow' | 'StorageBucketsPerBagLimitTooHigh' | 'StorageBucketPerBagLimitExceeded' | 'StorageBucketDoesntAcceptNewBags' | 'DynamicBagExists' | 'DynamicBagDoesntExist' | 'StorageProviderOperatorDoesntExist' | 'DataSizeFeeChanged' | 'DataObjectStateBloatBondChanged' | 'CannotDeleteNonEmptyDynamicBag' | 'MaxDistributionBucketFamilyNumberLimitExceeded' | 'DistributionBucketFamilyDoesntExist' | 'DistributionBucketDoesntExist' | 'DistributionBucketIdCollectionsAreEmpty' | 'DistributionBucketDoesntAcceptNewBags' | 'MaxDistributionBucketNumberPerBagLimitExceeded' | 'DistributionBucketIsNotBoundToBag' | 'DistributionBucketIsBoundToBag' | 'DistributionBucketsPerBagLimitTooLow' | 'DistributionBucketsPerBagLimitTooHigh' | 'DistributionProviderOperatorDoesntExist' | 'DistributionProviderOperatorAlreadyInvited' | 'DistributionProviderOperatorSet' | 'NoDistributionBucketInvitation' | 'MustBeDistributionProviderOperatorForBucket' | 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached' | 'DistributionFamilyBoundToBagCreationPolicy' | 'MaxDataObjectSizeExceeded' | 'InvalidTransactorAccount' | 'NumberOfStorageBucketsOutsideOfAllowedContraints' | 'NumberOfDistributionBucketsOutsideOfAllowedContraints';
+    readonly isCallDisabled: boolean;
+    readonly type: 'ArithmeticError' | 'InvalidCidLength' | 'NoObjectsOnUpload' | 'StorageBucketDoesntExist' | 'StorageBucketIsNotBoundToBag' | 'StorageBucketIsBoundToBag' | 'NoStorageBucketInvitation' | 'StorageProviderAlreadySet' | 'StorageProviderMustBeSet' | 'DifferentStorageProviderInvited' | 'InvitedStorageProvider' | 'StorageBucketIdCollectionsAreEmpty' | 'StorageBucketsNumberViolatesDynamicBagCreationPolicy' | 'DistributionBucketsViolatesDynamicBagCreationPolicy' | 'EmptyContentId' | 'ZeroObjectSize' | 'InvalidStateBloatBondSourceAccount' | 'InvalidStorageProvider' | 'InsufficientBalance' | 'DataObjectDoesntExist' | 'UploadingBlocked' | 'DataObjectIdCollectionIsEmpty' | 'SourceAndDestinationBagsAreEqual' | 'DataObjectBlacklisted' | 'BlacklistSizeLimitExceeded' | 'VoucherMaxObjectSizeLimitExceeded' | 'VoucherMaxObjectNumberLimitExceeded' | 'StorageBucketObjectNumberLimitReached' | 'StorageBucketObjectSizeLimitReached' | 'InsufficientTreasuryBalance' | 'CannotDeleteNonEmptyStorageBucket' | 'DataObjectIdParamsAreEmpty' | 'StorageBucketsPerBagLimitTooLow' | 'StorageBucketsPerBagLimitTooHigh' | 'StorageBucketPerBagLimitExceeded' | 'StorageBucketDoesntAcceptNewBags' | 'DynamicBagExists' | 'DynamicBagDoesntExist' | 'StorageProviderOperatorDoesntExist' | 'DataSizeFeeChanged' | 'DataObjectStateBloatBondChanged' | 'CannotDeleteNonEmptyDynamicBag' | 'MaxDistributionBucketFamilyNumberLimitExceeded' | 'DistributionBucketFamilyDoesntExist' | 'DistributionBucketDoesntExist' | 'DistributionBucketIdCollectionsAreEmpty' | 'DistributionBucketDoesntAcceptNewBags' | 'MaxDistributionBucketNumberPerBagLimitExceeded' | 'DistributionBucketIsNotBoundToBag' | 'DistributionBucketIsBoundToBag' | 'DistributionBucketsPerBagLimitTooLow' | 'DistributionBucketsPerBagLimitTooHigh' | 'DistributionProviderOperatorDoesntExist' | 'DistributionProviderOperatorAlreadyInvited' | 'DistributionProviderOperatorSet' | 'NoDistributionBucketInvitation' | 'MustBeDistributionProviderOperatorForBucket' | 'MaxNumberOfPendingInvitationsLimitForDistributionBucketReached' | 'DistributionFamilyBoundToBagCreationPolicy' | 'MaxDataObjectSizeExceeded' | 'InvalidTransactorAccount' | 'NumberOfStorageBucketsOutsideOfAllowedContraints' | 'NumberOfDistributionBucketsOutsideOfAllowedContraints' | 'CallDisabled';
   }
 
-  /** @name PalletProjectTokenAccountData (535) */
+  /** @name PalletProjectTokenAccountData (567) */
   export interface PalletProjectTokenAccountData extends Struct {
     readonly vestingSchedules: BTreeMap<PalletProjectTokenVestingSource, PalletProjectTokenVestingSchedule>;
     readonly amount: u128;
     readonly splitStakingStatus: Option<PalletProjectTokenStakingStatus>;
-    readonly bloatBond: u128;
+    readonly bloatBond: PalletCommonBloatBondRepayableBloatBond;
     readonly nextVestingTransferId: u64;
     readonly lastSaleTotalPurchasedAmount: Option<ITuple<[u32, u128]>>;
   }
 
-  /** @name PalletProjectTokenVestingSchedule (536) */
+  /** @name PalletProjectTokenVestingSchedule (568) */
   export interface PalletProjectTokenVestingSchedule extends Struct {
     readonly linearVestingStartBlock: u32;
     readonly linearVestingDuration: u32;
@@ -4897,13 +5310,13 @@ declare module '@polkadot/types/lookup' {
     readonly burnedAmount: u128;
   }
 
-  /** @name PalletProjectTokenStakingStatus (537) */
+  /** @name PalletProjectTokenStakingStatus (569) */
   export interface PalletProjectTokenStakingStatus extends Struct {
     readonly splitId: u32;
     readonly amount: u128;
   }
 
-  /** @name PalletProjectTokenTokenData (544) */
+  /** @name PalletProjectTokenTokenData (576) */
   export interface PalletProjectTokenTokenData extends Struct {
     readonly totalSupply: u128;
     readonly tokensIssued: u128;
@@ -4918,7 +5331,7 @@ declare module '@polkadot/types/lookup' {
     readonly nextRevenueSplitId: u32;
   }
 
-  /** @name PalletProjectTokenRevenueSplitState (545) */
+  /** @name PalletProjectTokenRevenueSplitState (577) */
   export interface PalletProjectTokenRevenueSplitState extends Enum {
     readonly isInactive: boolean;
     readonly isActive: boolean;
@@ -4926,27 +5339,27 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Inactive' | 'Active';
   }
 
-  /** @name PalletProjectTokenRevenueSplitInfo (546) */
+  /** @name PalletProjectTokenRevenueSplitInfo (578) */
   export interface PalletProjectTokenRevenueSplitInfo extends Struct {
     readonly allocation: u128;
     readonly timeline: PalletProjectTokenTimeline;
     readonly dividendsClaimed: u128;
   }
 
-  /** @name PalletProjectTokenTimeline (547) */
+  /** @name PalletProjectTokenTimeline (579) */
   export interface PalletProjectTokenTimeline extends Struct {
     readonly start: u32;
     readonly duration: u32;
   }
 
-  /** @name PalletProjectTokenPatronageData (549) */
+  /** @name PalletProjectTokenPatronageData (581) */
   export interface PalletProjectTokenPatronageData extends Struct {
     readonly rate: Perquintill;
     readonly unclaimedPatronageTallyAmount: u128;
     readonly lastUnclaimedPatronageTallyBlock: u32;
   }
 
-  /** @name PalletProjectTokenErrorsError (551) */
+  /** @name PalletProjectTokenErrorsError (583) */
   export interface PalletProjectTokenErrorsError extends Enum {
     readonly isInsufficientTransferrableBalance: boolean;
     readonly isTokenDoesNotExist: boolean;
@@ -4954,6 +5367,7 @@ declare module '@polkadot/types/lookup' {
     readonly isMerkleProofVerificationFailure: boolean;
     readonly isTargetPatronageRateIsHigherThanCurrentRate: boolean;
     readonly isTokenSymbolAlreadyInUse: boolean;
+    readonly isInitialAllocationToNonExistingMember: boolean;
     readonly isAccountAlreadyExists: boolean;
     readonly isTransferDestinationMemberDoesNotExist: boolean;
     readonly isTokenIssuanceNotInIdleState: boolean;
@@ -4995,10 +5409,10 @@ declare module '@polkadot/types/lookup' {
     readonly isRevenueSplitRateIsZero: boolean;
     readonly isBurnAmountIsZero: boolean;
     readonly isBurnAmountGreaterThanAccountTokensAmount: boolean;
-    readonly type: 'InsufficientTransferrableBalance' | 'TokenDoesNotExist' | 'AccountInformationDoesNotExist' | 'MerkleProofVerificationFailure' | 'TargetPatronageRateIsHigherThanCurrentRate' | 'TokenSymbolAlreadyInUse' | 'AccountAlreadyExists' | 'TransferDestinationMemberDoesNotExist' | 'TokenIssuanceNotInIdleState' | 'InsufficientJoyBalance' | 'JoyTransferSubjectToDusting' | 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode' | 'AttemptToRemoveNonEmptyAccount' | 'CannotJoinWhitelistInPermissionlessMode' | 'CannotDeissueTokenWithOutstandingAccounts' | 'NoUpcomingSale' | 'NoActiveSale' | 'InsufficientBalanceForTokenPurchase' | 'NotEnoughTokensOnSale' | 'SaleStartingBlockInThePast' | 'SaleAccessProofRequired' | 'SaleAccessProofParticipantIsNotSender' | 'SalePurchaseCapExceeded' | 'MaxVestingSchedulesPerAccountPerTokenReached' | 'PreviousSaleNotFinalized' | 'NoTokensToRecover' | 'SaleDurationTooShort' | 'SaleDurationIsZero' | 'SaleUpperBoundQuantityIsZero' | 'SaleCapPerMemberIsZero' | 'SaleUnitPriceIsZero' | 'SalePurchaseAmountIsZero' | 'RevenueSplitTimeToStartTooShort' | 'RevenueSplitDurationTooShort' | 'RevenueSplitAlreadyActiveForToken' | 'RevenueSplitNotActiveForToken' | 'RevenueSplitDidNotEnd' | 'RevenueSplitNotOngoing' | 'UserAlreadyParticipating' | 'InsufficientBalanceForSplitParticipation' | 'UserNotParticipantingInAnySplit' | 'CannotParticipateInSplitWithZeroAmount' | 'CannotIssueSplitWithZeroAllocationAmount' | 'CannotModifySupplyWhenRevenueSplitsAreActive' | 'RevenueSplitRateIsZero' | 'BurnAmountIsZero' | 'BurnAmountGreaterThanAccountTokensAmount';
+    readonly type: 'InsufficientTransferrableBalance' | 'TokenDoesNotExist' | 'AccountInformationDoesNotExist' | 'MerkleProofVerificationFailure' | 'TargetPatronageRateIsHigherThanCurrentRate' | 'TokenSymbolAlreadyInUse' | 'InitialAllocationToNonExistingMember' | 'AccountAlreadyExists' | 'TransferDestinationMemberDoesNotExist' | 'TokenIssuanceNotInIdleState' | 'InsufficientJoyBalance' | 'JoyTransferSubjectToDusting' | 'AttemptToRemoveNonOwnedAccountUnderPermissionedMode' | 'AttemptToRemoveNonEmptyAccount' | 'CannotJoinWhitelistInPermissionlessMode' | 'CannotDeissueTokenWithOutstandingAccounts' | 'NoUpcomingSale' | 'NoActiveSale' | 'InsufficientBalanceForTokenPurchase' | 'NotEnoughTokensOnSale' | 'SaleStartingBlockInThePast' | 'SaleAccessProofRequired' | 'SaleAccessProofParticipantIsNotSender' | 'SalePurchaseCapExceeded' | 'MaxVestingSchedulesPerAccountPerTokenReached' | 'PreviousSaleNotFinalized' | 'NoTokensToRecover' | 'SaleDurationTooShort' | 'SaleDurationIsZero' | 'SaleUpperBoundQuantityIsZero' | 'SaleCapPerMemberIsZero' | 'SaleUnitPriceIsZero' | 'SalePurchaseAmountIsZero' | 'RevenueSplitTimeToStartTooShort' | 'RevenueSplitDurationTooShort' | 'RevenueSplitAlreadyActiveForToken' | 'RevenueSplitNotActiveForToken' | 'RevenueSplitDidNotEnd' | 'RevenueSplitNotOngoing' | 'UserAlreadyParticipating' | 'InsufficientBalanceForSplitParticipation' | 'UserNotParticipantingInAnySplit' | 'CannotParticipateInSplitWithZeroAmount' | 'CannotIssueSplitWithZeroAllocationAmount' | 'CannotModifySupplyWhenRevenueSplitsAreActive' | 'RevenueSplitRateIsZero' | 'BurnAmountIsZero' | 'BurnAmountGreaterThanAccountTokensAmount';
   }
 
-  /** @name PalletProposalsEngineProposal (552) */
+  /** @name PalletProposalsEngineProposal (584) */
   export interface PalletProposalsEngineProposal extends Struct {
     readonly parameters: PalletProposalsEngineProposalParameters;
     readonly proposerId: u64;
@@ -5010,7 +5424,7 @@ declare module '@polkadot/types/lookup' {
     readonly stakingAccountId: Option<AccountId32>;
   }
 
-  /** @name PalletProposalsEngineProposalParameters (553) */
+  /** @name PalletProposalsEngineProposalParameters (585) */
   export interface PalletProposalsEngineProposalParameters extends Struct {
     readonly votingPeriod: u32;
     readonly gracePeriod: u32;
@@ -5022,7 +5436,7 @@ declare module '@polkadot/types/lookup' {
     readonly constitutionality: u32;
   }
 
-  /** @name PalletProposalsEngineVotingResults (554) */
+  /** @name PalletProposalsEngineVotingResults (586) */
   export interface PalletProposalsEngineVotingResults extends Struct {
     readonly abstentions: u32;
     readonly approvals: u32;
@@ -5030,7 +5444,7 @@ declare module '@polkadot/types/lookup' {
     readonly slashes: u32;
   }
 
-  /** @name PalletProposalsEngineError (556) */
+  /** @name PalletProposalsEngineError (588) */
   export interface PalletProposalsEngineError extends Enum {
     readonly isEmptyTitleProvided: boolean;
     readonly isEmptyDescriptionProvided: boolean;
@@ -5056,21 +5470,21 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'EmptyTitleProvided' | 'EmptyDescriptionProvided' | 'TitleIsTooLong' | 'DescriptionIsTooLong' | 'ProposalNotFound' | 'ProposalFinalized' | 'AlreadyVoted' | 'NotAuthor' | 'MaxActiveProposalNumberExceeded' | 'EmptyStake' | 'StakeShouldBeEmpty' | 'StakeDiffersFromRequired' | 'InvalidParameterApprovalThreshold' | 'InvalidParameterSlashingThreshold' | 'RequireRootOrigin' | 'ProposalHasVotes' | 'ZeroExactExecutionBlock' | 'InvalidExactExecutionBlock' | 'InsufficientBalanceForStake' | 'ConflictingStakes' | 'InvalidStakingAccountForMember';
   }
 
-  /** @name PalletProposalsDiscussionDiscussionThread (557) */
+  /** @name PalletProposalsDiscussionDiscussionThread (589) */
   export interface PalletProposalsDiscussionDiscussionThread extends Struct {
     readonly activatedAt: u32;
     readonly authorId: u64;
     readonly mode: PalletProposalsDiscussionThreadMode;
   }
 
-  /** @name PalletProposalsDiscussionDiscussionPost (558) */
+  /** @name PalletProposalsDiscussionDiscussionPost (590) */
   export interface PalletProposalsDiscussionDiscussionPost extends Struct {
     readonly authorId: u64;
-    readonly cleanupPayOff: u128;
+    readonly cleanupPayOff: PalletCommonBloatBondRepayableBloatBond;
     readonly lastEdited: u32;
   }
 
-  /** @name PalletProposalsDiscussionError (559) */
+  /** @name PalletProposalsDiscussionError (591) */
   export interface PalletProposalsDiscussionError extends Enum {
     readonly isThreadDoesntExist: boolean;
     readonly isPostDoesntExist: boolean;
@@ -5078,12 +5492,13 @@ declare module '@polkadot/types/lookup' {
     readonly isCannotPostOnClosedThread: boolean;
     readonly isNotAuthorOrCouncilor: boolean;
     readonly isMaxWhiteListSizeExceeded: boolean;
+    readonly isWhitelistedMemberDoesNotExist: boolean;
     readonly isInsufficientBalanceForPost: boolean;
     readonly isCannotDeletePost: boolean;
-    readonly type: 'ThreadDoesntExist' | 'PostDoesntExist' | 'RequireRootOrigin' | 'CannotPostOnClosedThread' | 'NotAuthorOrCouncilor' | 'MaxWhiteListSizeExceeded' | 'InsufficientBalanceForPost' | 'CannotDeletePost';
+    readonly type: 'ThreadDoesntExist' | 'PostDoesntExist' | 'RequireRootOrigin' | 'CannotPostOnClosedThread' | 'NotAuthorOrCouncilor' | 'MaxWhiteListSizeExceeded' | 'WhitelistedMemberDoesNotExist' | 'InsufficientBalanceForPost' | 'CannotDeletePost';
   }
 
-  /** @name PalletProposalsCodexError (560) */
+  /** @name PalletProposalsCodexError (592) */
   export interface PalletProposalsCodexError extends Enum {
     readonly isSignalProposalIsEmpty: boolean;
     readonly isRuntimeProposalIsEmpty: boolean;
@@ -5106,10 +5521,14 @@ declare module '@polkadot/types/lookup' {
     readonly isInvalidFundingRequestProposalNumberOfAccount: boolean;
     readonly isInvalidFundingRequestProposalRepeatedAccount: boolean;
     readonly isInvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout: boolean;
-    readonly type: 'SignalProposalIsEmpty' | 'RuntimeProposalIsEmpty' | 'InvalidFundingRequestProposalBalance' | 'InvalidValidatorCount' | 'RequireRootOrigin' | 'InvalidCouncilElectionParameterCouncilSize' | 'InvalidCouncilElectionParameterCandidacyLimit' | 'InvalidCouncilElectionParameterMinVotingStake' | 'InvalidCouncilElectionParameterNewTermDuration' | 'InvalidCouncilElectionParameterMinCouncilStake' | 'InvalidCouncilElectionParameterRevealingPeriod' | 'InvalidCouncilElectionParameterVotingPeriod' | 'InvalidCouncilElectionParameterAnnouncingPeriod' | 'InvalidWorkingGroupBudgetCapacity' | 'InvalidSetLeadParameterCannotBeCouncilor' | 'SlashingStakeIsZero' | 'DecreasingStakeIsZero' | 'InsufficientFundsForBudgetUpdate' | 'InvalidFundingRequestProposalNumberOfAccount' | 'InvalidFundingRequestProposalRepeatedAccount' | 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout';
+    readonly isInvalidLeadWorkerId: boolean;
+    readonly isInvalidLeadOpeningId: boolean;
+    readonly isInvalidLeadApplicationId: boolean;
+    readonly isInvalidProposalId: boolean;
+    readonly type: 'SignalProposalIsEmpty' | 'RuntimeProposalIsEmpty' | 'InvalidFundingRequestProposalBalance' | 'InvalidValidatorCount' | 'RequireRootOrigin' | 'InvalidCouncilElectionParameterCouncilSize' | 'InvalidCouncilElectionParameterCandidacyLimit' | 'InvalidCouncilElectionParameterMinVotingStake' | 'InvalidCouncilElectionParameterNewTermDuration' | 'InvalidCouncilElectionParameterMinCouncilStake' | 'InvalidCouncilElectionParameterRevealingPeriod' | 'InvalidCouncilElectionParameterVotingPeriod' | 'InvalidCouncilElectionParameterAnnouncingPeriod' | 'InvalidWorkingGroupBudgetCapacity' | 'InvalidSetLeadParameterCannotBeCouncilor' | 'SlashingStakeIsZero' | 'DecreasingStakeIsZero' | 'InsufficientFundsForBudgetUpdate' | 'InvalidFundingRequestProposalNumberOfAccount' | 'InvalidFundingRequestProposalRepeatedAccount' | 'InvalidChannelPayoutsProposalMinCashoutExceedsMaxCashout' | 'InvalidLeadWorkerId' | 'InvalidLeadOpeningId' | 'InvalidLeadApplicationId' | 'InvalidProposalId';
   }
 
-  /** @name PalletWorkingGroupOpening (561) */
+  /** @name PalletWorkingGroupOpening (593) */
   export interface PalletWorkingGroupOpening extends Struct {
     readonly openingType: PalletWorkingGroupOpeningType;
     readonly created: u32;
@@ -5119,7 +5538,7 @@ declare module '@polkadot/types/lookup' {
     readonly creationStake: u128;
   }
 
-  /** @name PalletWorkingGroupJobApplication (562) */
+  /** @name PalletWorkingGroupJobApplication (594) */
   export interface PalletWorkingGroupJobApplication extends Struct {
     readonly roleAccountId: AccountId32;
     readonly rewardAccountId: AccountId32;
@@ -5129,7 +5548,7 @@ declare module '@polkadot/types/lookup' {
     readonly openingId: u64;
   }
 
-  /** @name PalletWorkingGroupGroupWorker (563) */
+  /** @name PalletWorkingGroupGroupWorker (595) */
   export interface PalletWorkingGroupGroupWorker extends Struct {
     readonly memberId: u64;
     readonly roleAccountId: AccountId32;
@@ -5142,7 +5561,7 @@ declare module '@polkadot/types/lookup' {
     readonly createdAt: u32;
   }
 
-  /** @name PalletWorkingGroupErrorsError (564) */
+  /** @name PalletWorkingGroupErrorsError (596) */
   export interface PalletWorkingGroupErrorsError extends Enum {
     readonly isStakeBalanceCannotBeZero: boolean;
     readonly isOpeningDoesNotExist: boolean;
@@ -5178,7 +5597,7 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'StakeBalanceCannotBeZero' | 'OpeningDoesNotExist' | 'CannotHireMultipleLeaders' | 'WorkerApplicationDoesNotExist' | 'MaxActiveWorkerNumberExceeded' | 'SuccessfulWorkerApplicationDoesNotExist' | 'CannotHireLeaderWhenLeaderExists' | 'IsNotLeadAccount' | 'CurrentLeadNotSet' | 'WorkerDoesNotExist' | 'InvalidMemberOrigin' | 'SignerIsNotWorkerRoleAccount' | 'BelowMinimumStakes' | 'InsufficientBalanceToCoverStake' | 'ApplicationStakeDoesntMatchOpening' | 'OriginIsNotApplicant' | 'WorkerIsLeaving' | 'CannotRewardWithZero' | 'InvalidStakingAccountForMember' | 'ConflictStakesOnAccount' | 'WorkerHasNoReward' | 'UnstakingPeriodLessThanMinimum' | 'CannotSpendZero' | 'InsufficientBudgetForSpending' | 'NoApplicationsProvided' | 'CannotDecreaseStakeDeltaGreaterThanStake' | 'ApplicationsNotForOpening' | 'WorkerStorageValueTooLong' | 'InsufficientTokensForFunding' | 'ZeroTokensFunding' | 'InsufficientBalanceForTransfer';
   }
 
-  /** @name SpRuntimeMultiSignature (574) */
+  /** @name SpRuntimeMultiSignature (606) */
   export interface SpRuntimeMultiSignature extends Enum {
     readonly isEd25519: boolean;
     readonly asEd25519: SpCoreEd25519Signature;
@@ -5189,31 +5608,31 @@ declare module '@polkadot/types/lookup' {
     readonly type: 'Ed25519' | 'Sr25519' | 'Ecdsa';
   }
 
-  /** @name SpCoreEcdsaSignature (575) */
+  /** @name SpCoreEcdsaSignature (607) */
   export interface SpCoreEcdsaSignature extends U8aFixed {}
 
-  /** @name FrameSystemExtensionsCheckNonZeroSender (578) */
+  /** @name FrameSystemExtensionsCheckNonZeroSender (610) */
   export type FrameSystemExtensionsCheckNonZeroSender = Null;
 
-  /** @name FrameSystemExtensionsCheckSpecVersion (579) */
+  /** @name FrameSystemExtensionsCheckSpecVersion (611) */
   export type FrameSystemExtensionsCheckSpecVersion = Null;
 
-  /** @name FrameSystemExtensionsCheckTxVersion (580) */
+  /** @name FrameSystemExtensionsCheckTxVersion (612) */
   export type FrameSystemExtensionsCheckTxVersion = Null;
 
-  /** @name FrameSystemExtensionsCheckGenesis (581) */
+  /** @name FrameSystemExtensionsCheckGenesis (613) */
   export type FrameSystemExtensionsCheckGenesis = Null;
 
-  /** @name FrameSystemExtensionsCheckNonce (584) */
+  /** @name FrameSystemExtensionsCheckNonce (616) */
   export interface FrameSystemExtensionsCheckNonce extends Compact<u32> {}
 
-  /** @name FrameSystemExtensionsCheckWeight (585) */
+  /** @name FrameSystemExtensionsCheckWeight (617) */
   export type FrameSystemExtensionsCheckWeight = Null;
 
-  /** @name PalletTransactionPaymentChargeTransactionPayment (586) */
+  /** @name PalletTransactionPaymentChargeTransactionPayment (618) */
   export interface PalletTransactionPaymentChargeTransactionPayment extends Compact<u128> {}
 
-  /** @name JoystreamNodeRuntimeRuntime (587) */
+  /** @name JoystreamNodeRuntimeRuntime (619) */
   export type JoystreamNodeRuntimeRuntime = Null;
 
 } // declare module
diff --git a/src/index.ts b/src/index.ts
index 75a4039dac7aa7bf4931de12b6b300e887a085ad..fcd62abb55e1c7f8dc0e93d8e2acbb32f71257e8 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -26,7 +26,7 @@ import { AugmentedQuery } from '@polkadot/api/types'
 // Tweaked version of https://stackoverflow.com/a/62163715 for handling enum variants
 // Based on type (T) like: { a: string; b: number; c: Null; }
 // will create a type like: { a: string } | { b: number } | { c: Null } | "c"
-type EnumVariant<T> = keyof T extends infer K
+export type EnumVariant<T> = keyof T extends infer K
   ? K extends keyof T
     ? T[K] extends Null | null
       ? K | { [I in K]: T[I] }
diff --git a/src/primitives.ts b/src/primitives.ts
index d405ae7c630d83d3ad305593c9074bd9ac1eed09..5c0038c2a47fc130e1203dc0ee363816db22f031 100644
--- a/src/primitives.ts
+++ b/src/primitives.ts
@@ -4,7 +4,6 @@ import { u8, u32, u64 } from '@polkadot/types'
 export type ForumCategoryId = u64
 export type ForumThreadId = u64
 export type ForumPostId = u64
-export type ForumPostReactionId = u64
 
 // Proposals
 export type ProposalId = u32
@@ -24,7 +23,6 @@ export type MemberId = u64
 
 // Content
 export type ChannelId = u64
-export type ChannelCategoryId = u64
 export type VideoId = u64
 export type OpenAuctionId = u64
 export type CuratorId = u64
diff --git a/tsconfig.json b/tsconfig.json
index 1326b8ddabb2269ea1a5475274adf65ab21c6acd..9a3b92a9ecde87dd59451a47cd076460aa2b7842 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,7 +1,7 @@
 {
   "compilerOptions": {
     "target": "es2017",
-    "module": "commonjs",
+    "module": "esnext",
     "strict": true,
     "noImplicitAny": true,
     "noUnusedLocals": true,
